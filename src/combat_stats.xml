<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, April 29, 2012, 7:48 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "combat_stats" generated by Plugin Wizard -->

<muclient>

<plugin
   name="combat_stats"
   author="Ruthgul"
   id="644c7a6e7d17a3195d0d025d"
   language="Lua"
   purpose="compiles &amp; shows combat statistics"
   date_written="2012-04-29 07:47:12"
   date_modified="2015-03-12 20:54:46"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.----------------.
 | combat_stats |
`----------------'

- Gathers and shows statistics (success rate) per skill / spell.
- Gathers and shows usage of skills / spells, until you get a better.


** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- detect_globals (plugin id="d900cb999816b1f6f2d4bdc5") must be installed and enabled.
- global_vars (plugin id="97784abf5f30629a0d7e7307") must be installed and enabled.

- You'll need to add MUSHclient Execute aliases for the breathe / lay / slit / strike skills, if you use any of them. This is to detect which one you were trying to use, when they fail.

- You'll also need to add MUSHclient Execute aliases for the spells that you use. This helps lower the amount of triggers needed to detect what spell you're casting.

See plugin webpage for details.


Syntax:

* combat stats skills  - will show accumulated results for all skills.
* combat stats spells  - will show accumulated results for all spells.

* reset combat <what>  - will reset hits / misses counters for a skill or spell.
* reset combat  - will reset hits / misses counters for all skills and spells.

* usage count skills  - will show usage count since last better for all skills.
* usage count spells  - will show usage count since last better for all spells.

* reset usage <what>  - will reset the usage counter for a skill or spell.
* reset combat  - will reset usage counters for all skills and spells.


** HELP NEEDED **

This plugin is missing some knave skills strings (slit purse, strike heart, strike match...),

If you have those skills, or others that I haven't added yet, please send Ruthgul a tell or a page of parchment (including the full string, skill name, and whether it means success or fail), and I'll update the plugin.


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

</variables>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>


<!-- auto-show stats after combat info -->

  <trigger
   keep_evaluating="y"
   match="You are (left|right)\-handed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>-- this is disable because lists grow too long at hero/archon
show_all_skills_stats()
</send>
  </trigger>


<!-- melee -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^((@!char_name) is (.+) on the (.+) with your (.+) causing (.+) damage|Your (.*?)attack didn\'t seem to have any effect on (.+))\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("melee")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You fail to hit (.+) with your (.*?)attack\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("melee")
</send>
  </trigger>


<!-- detect better -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(The Powers have noticed thy efforts at betterment\, and have rewarded thee\!|(Lord|Lady) (.+) raises (his|her) hands above (his|her) head and chants strange words\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>just_leveled()
</send>
  </trigger>

  <trigger
   name="detect_done_leveling"
   keep_evaluating="y"
   match="^$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>done_leveling()
</send>
  </trigger>

  <trigger
   enabled="y"
   name="detect_betters"
   keep_evaluating="y"
   match="^(You learn from your mistakes\, and your knowledge of|You have become more learned at|You have become a master at) \'(?P&lt;what&gt;.+)\'( improves\. \((.+)\%\)| \((.+)\%\)\.|\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>got_a_better("%&lt;what&gt;")
</send>
  </trigger>


<!-- backstab -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You stab (.+) in the back with (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("backstab")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You attempt to stab (.+) in the back with (.+)\, but miss\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("backstab")
</send>
  </trigger>


<!-- bash -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You bash (.+) over the head with (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("bash")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You attempt to bash (.+) over the head with (.+)\, but miss\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("bash")
</send>
  </trigger>


<!-- battle rage -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^A white\-hot rage flashes through you as you lash out at (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_used("battle rage")
</send>
  </trigger>


<!-- breathe -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^A thin trail of smoke wafts from your nostrils\, but nothing else happens\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("breath")
</send>
  </trigger>


<!-- breathe acid -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You spit acid at (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("acid breath")
</send>
  </trigger>


<!-- breathe fire -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You breathe forth a cone of fire\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("fire breath")
</send>
  </trigger>


<!-- breathe frost -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You breathe out a cone of frost\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("frost breath")
</send>
  </trigger>


<!-- breathe gas -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You breathe out a cloud of poisonous gas\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("gas breath")
</send>
  </trigger>


<!-- breathe lightning -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You breathe a bolt of lightning at (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("lightning breath")
</send>
  </trigger>


<!-- charge -->

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^You charge into battle on (.+)\!\n(You impale|(.+) impales) (.+)\!$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("charge")
</send>
  </trigger>

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^You charge into battle on (.+)\!\n(You miss|(.+) misses) (.+)\!$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("charge")
</send>
  </trigger>


<!-- grapple -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You latch your arms around (.+)\, flinging (.+) violently to the ground\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("grapple")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You attempt to grapple with (.+)\, but lack proper form\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("grapple")
</send>
  </trigger>


<!-- herald bloodthirst -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Shrieking mightily\, you declare your bloodthirstiness to all present\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("herald bloodthirst")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You clear your throat\, preparing to cry and wail\, but can\'t muster the force required\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("herald bloodthirst")
</send>
  </trigger>


<!-- herald death -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(You prepare to usher (.+) into the afterlife|(@!char_name) resists your attempts to prematurely ensure (.+) death\.)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("herald death")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You begin to herald\, but stumble awkwardly halfway through\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("herald death")
</send>
  </trigger>


<!-- kick -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You deliver a roundhouse kick to (.+)\, connecting solidly\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("kick")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You attempt to kick (.+)\, but miss\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("kick")
</send>
  </trigger>


<!-- lay -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(You begin to\, but then just mess it up|Your lack of practice and preparation works against you)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("lay")
</send>
  </trigger>


<!-- lay hands -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name) (seems to be suffering less|looks relieved as the evil inflicted upon (.+) is cured|There is nothing you can do for (.+)\.)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("lay hands")
</send>
  </trigger>


<!-- lay out -->
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Abandoning all strategy\, you run headlong into (.+)\, tackling (.+) and punching (.+) until your knuckles bleed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("lay out")
</send>
  </trigger>


<!-- music -->

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^You have completed your song\.\n(?P&lt;second_line&gt;.+)$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_music("%&lt;second_line&gt;")
</send>
  </trigger>


<!-- slit -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(You begin to slit\, but get confused about how it works halfway through|You run your index finger up and down the blade\, itching to slit slit slit\, but remaining unable)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("slit")
</send>
  </trigger>


<!-- slit armor -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^With a flick of your wrist\, you slit open a weak link in (.+)\'s \'(.+)\'\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("slit armor")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You attempt to slit holes in (.+)\'s armor\, but do not manage to do so\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("slit armor")
</send>
  </trigger>


<!-- slit purse -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You slash open a hole in (.+)\'s coinpurse\, causing (.+) gold coins to spill all over the ground\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("slit purse")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You attempt to seize upon (.+)\'s coinpurse\, but get noticed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("slit purse")
</send>
  </trigger>


<!-- slit tendon -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You slide down low and slash indiscriminately at (.+)\'s legs\, aiming roughly for (.+) tendons\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("slit tendon")
</send>
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("slit tendon")
</send>
  </trigger>


<!-- slit throat -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Stealthily\, you sneak up behind (.+) and slit (.+) throat\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("slit throat")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You attempt to sneak up behind (.+)\, but get noticed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("slit throat")
</send>
  </trigger>


<!-- strike -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(You begin to\, but you simply end up striking out|You strike out)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("strike")
</send>
  </trigger>


<!-- strike blow -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You sucker punch (.+) right in the kidneys\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("strike blow")
</send>
  </trigger>


<!-- strike death -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You strike (.+) in six pressure points simultaneously\, disrupting (.+) nervous system\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("strike death")
</send>
  </trigger>


<!-- strike down -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You strike (.+) down\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("strike down")
</send>
  </trigger>


<!-- strike heart -->

  <trigger
   keep_evaluating="y"
   match="^$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("strike heart")
</send>
  </trigger>


<!-- strike match -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You consume (.+) in a sudden blaze\, engulfing (.+) in an inferno\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("strike match")
</send>
  </trigger>


<!-- strike pain -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You strike (.+)\, eliciting a grimace of pain\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("strike pain")
</send>
  </trigger>


<!-- sweep -->

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^You swing (.+) around in a wide arc\.\.\.\n(.+) is cut on the (.+) with your (.+) causing (.+) damage\.$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_success("sweep")
</send>
  </trigger>

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^You swing (.+) around in a wide arc\.\.\.\n(.+) misses (.+)\!$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_fail("sweep")
</send>
  </trigger>


<!-- defensive skills -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You (.+) (backflip|leap|sidestep|tumble) out of the way of (.+)\'s (.*?)attack\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_used("acrobatics")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You dodge out of the way of (.+)\'s (.*?)attack\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_used("dodge")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name) lunges towards you\, but you dodge out of the way\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_used("evasion")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You slip between planes for a moment\, evading (.+)\'s (.*?)attack\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_used("magical fade")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You skillfully parry (.+)\'s (.*?)attack\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_used("parry")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You catch (.+) on (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skill_used("shield block")
</send>
  </trigger>


<!-- spells -->

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^You have completed your (casting|evocation|invocation)\.\n(?P&lt;second_line&gt;.+)$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_finished_casting("%&lt;second_line&gt;")
</send>
  </trigger>


<!-- psionic spells -->
<!-- these lack a unified end-of-casting string, on success -->

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^\nYou lose your concentration\.$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_fail()
</send>
  </trigger>

  <trigger
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^(You cannot extend that spell\'s duration\.|You have increased the duration of the spell \'(.+)\'\.|A clear focusing crystal flares brightly and vanishes\!)$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success()
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(You (begin (to speak the words of the spell|reciting the words of the (evocation|invocation)))|narrow your eyes\, concentrating on the spell)\.\.\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_started_casting()
</send>
  </trigger>


<!-- specific psionic spells / success strings (land/resist) -->

<!-- bar -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(The (.+) exit glows a brilliant aquamarine\, then fades\.|The magic can\'t find a foothold on that exit\.|It\'s already locked\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("bar")
</send>
  </trigger>

<!-- cancellation - uses a focusing crystal -->

<!-- describe -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Level (.+) item \'(.+)\' is type (.+)\, with keywords \'(.+)\'\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("bar")
</send>
  </trigger>

<!-- disrupt sight -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^((@!char_name) staggers suddenly as (.+) vision is clouded by your mind control\.|(@!char_name) totters suddenly\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("disrupt sight")
</send>
  </trigger>

<!-- disequilibriate - missing: resist string -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name)\'s eyes go wide and (.+) clutches (.+) head as vertigo sets in\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("disequilibriate")
</send>
  </trigger>

<!-- domination -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^((@!char_name) looks at you with adoring eyes\.|Nothing seems to happen\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("domination")
</send>
  </trigger>

<!-- esp -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You close your eyes and concentrate\.\.\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("esp")
</send>
  </trigger>

<!-- force field -->
<!-- no way to know if I, or someone else, casted this, based on strings -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(You hear a high\-pitched shriek as the air around you becomes more dense\.|There is a faint sound\, a very high pitched shriek as the air becomes more dense around (.+)\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("force field")
</send>
  </trigger>

<!-- float -->
<!-- no way to know if I, or someone else, casted this, based on strings -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(Your|(@!char_name)\'s) feet rise off the ground\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("float")
</send>
  </trigger>

<!-- forget -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You extend your senses into the astral plane\, working on others\' memories directly\.\.\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("forget")
</send>
  </trigger>

<!-- geisteblitz - uses a focusing crystal -->

<!-- induce aggression - missing: resist string -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name) changes (.+) stance and suddenly seems quite a bit more aggressive\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("induce aggression")
</send>
  </trigger>

<!-- irritation -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(Ghastly looking sores start cropping up on (.+)\'s body as you inflict irritation upon (.+)\!|(@!char_name) seems to resist your mental irritation\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("irritation")
</send>
  </trigger>

<!-- knock - missing: container unlock success string -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(The (.+) exit glows a brilliant blue\, then fades\.|The exit glows briefly\, but nothing happens\.|You failed\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("knock")
</send>
  </trigger>

<!-- memory drain -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(You extend your senses into the astral plane\, working on (.+)\'s memories\.\.\.|Nothing happens\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("memory drain")
</send>
  </trigger>

<!-- mental disruption -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^((@!char_name) staggers suddenly as (.+) mind is disrupted by your mental power\.|(@!char_name) staggers suddenly\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("mental disruption")
</send>
  </trigger>

<!-- mesmerize - missing: resist string -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name) stares deeply into your eyes\, seemingly unable to move\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("mesmerize")
</send>
  </trigger>

<!-- mimic - uses a focusing crystal -->

<!-- mind shield -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You erect a mental image of a brick wall in your mind\, so as to stave off unwanted intrusions\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("mind shield")
</send>
  </trigger>

<!-- nullification field - uses a focusing crystal -->

<!-- pense -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You feel a prickling on the back of your neck as your senses are heightened\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("pense")
</send>
  </trigger>

<!-- pyrokinesis -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You ignite a small pocket of turbulence with your mind and fling it towards (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("pyrokinesis")
</send>
  </trigger>

<!-- sensory enhancement -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You feel a tingling in your pineal gland\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("sensory enhancement")
</send>
  </trigger>

<!-- spook -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^((@!char_name) turns white with fear at the thought of you\!|(@!char_name) flinches momentarily\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("spook")
</send>
  </trigger>

<!-- telekinesis -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^A bit of weight lifts from your shoulders as you shift the burden to your mind\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telekinesis")
</send>
  </trigger>

<!-- telekinetic bash -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You lash out at (.+) with your mind\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telekinetic bash")
</send>
  </trigger>

<!-- telekinetic explosion -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Your mind power lashes out around you\, taking the form of blue lightning\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telekinetic explosion")
</send>
  </trigger>

<!-- telekinetic pierce -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You lash out at (.+) with your mind\, physically piercing(| (.+) twice across) (his|her|its) form\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telekinetic pierce")
</send>
  </trigger>

<!-- telekinetic punch -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You lash out at (.+) with your mind\, delivering (a mental punch|two mental punches)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telekinetic punch")
</send>
  </trigger>

<!-- telekinetic shield - uses a focusing crystal -->

<!-- telekinetic slash -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You lash out at (.+) with your mind\, slashing(| twice) across (.+) form\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telekinetic slash")
</send>
  </trigger>

<!-- telekinetic wave -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^There is a low\, resonant hum as an invisible shockwave emanates from your mind\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telekinetic wave")
</send>
  </trigger>

<!-- telesmatic force -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(Your powers deftly knock (.+) from (.+)\'s grasp\.|You attempt to use your powers to knock (.+) from (.+)\'s grasp\, but nothing happens\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>spell_success("telesmatic force")
</send>
  </trigger>

<!-- teleview - uses a focusing crystal -->

<!-- transference - uses a focusing crystal -->

</triggers>



<!--  Timers  -->

<timers>

  <timer
   enabled="y"
   minute="5"
   second="0.00"
   offset_second="0.00"
   send_to="12"
  >
  <send>save_tables()
</send>
  </timer>

</timers>



<!--  Aliases  -->

<aliases>

<!-- check results -->

  <alias
   match="^combat stats skills$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_skills_results()
</send>
  </alias>

  <alias
   match="^combat stats spells$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_spells_results()
</send>
  </alias>

  <alias
   match="^usage count skills$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_usage_count_skills()
</send>
  </alias>

  <alias
   match="^usage count spells$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_usage_count_spells()
</send>
  </alias>


<!-- reset counters -->

  <alias
   match="^reset combat$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>reset_hits_n_misses_all()
</send>
  </alias>

  <alias
   match="^reset combat (?P&lt;skill&gt;.+)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>reset_hits_n_misses("%&lt;skill&gt;")
</send>
  </alias>

  <alias
   match="^reset usage$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>reset_usage_all()
</send>
  </alias>

  <alias
   match="^reset usage (?P&lt;skill&gt;.+)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>reset_usage("%&lt;skill&gt;")
</send>
  </alias>


<!-- detect breathe/lay/slit/strike type -->

  <alias
   enabled="y"
   match="^breathe (?P&lt;subskill&gt;(acid|fire|gas|frost|lightning))(| |[ ]+(?P&lt;target&gt;.+))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>process_subskill("breath", "%&lt;subskill&gt;", "%&lt;target&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^lay (?P&lt;subskill&gt;(hands|out))(| |[ ]+(?P&lt;target&gt;.+))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>process_subskill("lay", "%&lt;subskill&gt;", "%&lt;target&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^slit (?P&lt;subskill&gt;(armor|purse|tendon|throat))(| |[ ]+(?P&lt;target&gt;.+))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>process_subskill("slit", "%&lt;subskill&gt;", "%&lt;target&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^strike (?P&lt;subskill&gt;(blow|death|down|heart|match|pain))(| |[ ]+(?P&lt;target&gt;.+))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>process_subskill("strike", "%&lt;subskill&gt;", "%&lt;target&gt;")
</send>
  </alias>


<!-- detect spells -->

  <alias
   enabled="y"
   match="^(c|cast) (?P&lt;params&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>parse_spell("cast", "%&lt;params&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^(?P&lt;cmd&gt;(evoke|invoke)) (?P&lt;spell&gt;[a-z]+)(| |[ ]+(?P&lt;target&gt;.+))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>process_spell("%&lt;cmd&gt;", "%&lt;spell&gt;", "%&lt;target&gt;")
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^combat\_stats(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

debugging = false

require "wait"


-----------
-- plugin
-----------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  init_stuff()
end


function OnPluginClose()
  save_tables()
  set_global_var("detect_weapon", "false")
end


function OnPluginConnect()
  init_stuff()
end


function OnPluginSaveState()
  if (name) then
    save_tables()
  end
end


function OnPluginDisconnect()
  if (name) then
    save_tables()
  end
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_not_initialized()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": plugin initialization unfinished --")
  Note("please wait 5 seconds and try again")
end


function show_debug_message(msg)
  if (debugging) then
    Note("-- combat_stats >debug< - " .. msg .. " --")
  end
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/combat_stats.xml",
  }
  return (table.concat(t, ";"))
end



------------
-- general
------------

function get_global_var(name)
  local res, val

  res, val = CallPlugin("97784abf5f30629a0d7e7307", "get_global_var", name)

  if (res ~= 0) then
    val = nil
  end

  return val
end


function set_global_var(name, value)
  local res, val, done

  res, val = CallPlugin("97784abf5f30629a0d7e7307", "set_global_var", name, value)

  done = (res == 0)

  return done
end



-----------------
-- generic init
-----------------

function init_stuff()
  EnableTrigger("first_prompt", true)

  name = nil
  weapon = nil
  detecting = nil
  specific_spell = nil
  casting = nil
end



---------------
-- name, etc.
---------------

function on_first_prompt()
  wait.make(function()
    EnableTrigger("first_prompt", false)

    -- give the plugins time to initialize
    wait.time(3)

    set_global_var("detect_weapon", "true")
    do_get_name()
  end)
end


function OnPluginBroadcast(msg, id, pname, text)
  if (id =="97784abf5f30629a0d7e7307")
  and (pname == "global_vars") then -- global_vars
    if (msg == 1) and (text == "name") then
      -- name broadcasted
      do_get_name()

    elseif (msg == 1) and (text == "weapon") then
      -- weapon broadcasted
      do_get_weapon()
    end
  end
end


function do_get_name()
  name = get_global_var("name")

  if (name) then
    got_name()
  end
end


function got_name()
  load_tables()
end


function do_get_weapon()
  weapon = get_global_var("weapon")

  if (weapon) then
    local tweapon = utils.split(weapon, "/")
    weapon = tweapon[1]
    show_debug_message("weapon type set to " .. weapon)
  end
end



-----------
-- tables
-----------

function save_tables()
  if (name) then
    SetVariable(name .. "_sk_hits", ArrayExport("sk_hits", ","))
    SetVariable(name .. "_sk_misses", ArrayExport("sk_misses", ","))
    SetVariable(name .. "_sk_usg_better", ArrayExport("sk_usg_better", ","))

    SetVariable(name .. "_sp_hits", ArrayExport("sp_hits", ","))
    SetVariable(name .. "_sp_misses", ArrayExport("sp_misses", ","))
    SetVariable(name .. "_sp_usg_better", ArrayExport("sp_usg_better", ","))

    SaveState()
  end
end


function load_tables()
  if (name) then
    load_a_table("sk_hits", name .. "_sk_hits")
    load_a_table("sk_misses", name .. "_sk_misses")
    load_a_table("sk_usg_better", name .. "_sk_usg_better")

    load_a_table("sp_hits", name .. "_sp_hits")
    load_a_table("sp_misses", name .. "_sp_misses")
    load_a_table("sp_usg_better", name .. "_sp_usg_better")
  end
end


function load_a_table(arrayname, savedname)
  create_and_empty_an_array(arrayname)
  ArrayImport(arrayname, GetVariable(savedname) or "", ",")
end


function create_and_empty_an_array(arrayname)
  ArrayCreate(arrayname)
  ArrayClear(arrayname)
end


function reset_hits_n_misses(skill)
  if (name) then
--    Note(skill)
    if (ArrayGet("sk_hits", skill)) or (ArrayGet("sk_misses", skill)) then
      ArraySet("sk_hits", skill, 0)
      ArraySet("sk_misses", skill, 0)
--      Note("it's a skill!")

    elseif (ArrayGet("sp_hits", skill)) or (ArrayGet("sp_misses", skill)) then
      ArraySet("sp_hits", skill, 0)
      ArraySet("sp_misses", skill, 0)
--      Note("it's a spell!")
    end

    save_tables()

    Note("-- combat_stats: " .. skill .. " hits & misses counters reinitialized --")

  else
    plugin_not_initialized()
  end
end


function reset_hits_n_misses_all()
  if (name) then
    create_and_empty_an_array("sk_hits")
    create_and_empty_an_array("sk_misses")

    create_and_empty_an_array("sp_hits")
    create_and_empty_an_array("sp_misses")

    save_tables()
    Note("-- combat_stats: all all hits & misses counters reinitialized --")

  else
    plugin_not_initialized()
  end
end


function reset_usage(what)
  if (name) then
    if (ArrayGet("sk_usg_better", what)) then
      ArraySet("sk_usg_better", what, 0)

    elseif (ArrayGet("sp_usg_better", what)) then
      ArraySet("sp_usg_better", what, 0)
    end

    save_tables()

    Note("-- combat_stats: " .. what .. " usage counter reinitialized --")

  else
    plugin_not_initialized()
  end
end


function reset_usage_all()
  if (name) then
    create_and_empty_an_array("sk_usg_better")

    create_and_empty_an_array("sp_usg_better")

    save_tables()
    Note("-- combat_stats: all usage counters reinitialized --")

  else
    plugin_not_initialized()
  end
end


function find_index(t, item)
  local res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end



------------------
-- special cases
------------------

umbrella_skills = {"breath", "lay", "slit", "strike"}

function check_music(second_line)
  if (second_line == "You lose your concentration.") then
    skill_fail("music")
  else
    skill_success("music")
  end
end


function process_subskill(skill, subskill, param)
  local cmd

  if (skill == "breath") then
    cmd = "breathe " .. subskill
  else
    cmd = skill .. " " .. subskill
  end

  if (param) then
    cmd = cmd .. " " .. param
  end

  if (name) then
    if (skill == "breath") then
      specific_skill = subskill .. " " .. skill
    else
      specific_skill = skill .. " " .. subskill
    end

    show_debug_message("specific skill: " .. specific_skill)
    Send(cmd)

  else
    Send(cmd)
  end
end


function parse_spell(cmd, params)
  if (name) then
    if (not casting) then
      params = Trim(params)

      -- patch for missing ' at the end of the spell name
      -- eg, cast 'magic dart --> cast 'magic dart'
      local n
      _, n = string.gsub(params, "'", "'")

      if (math.fmod(n, 2) ~= 0) then
        params = params .. "'"
        params = string.gsub(params, "''", "'")
      end

      -- substitute spaces within '' with _s
      params = string.gsub(params,
                           "'[%a ]+'",
                           function(w)
                             return string.gsub(w, " ", "_")
                           end
                          )

      -- make table of parameters
      local tparams = {}
      for param in string.gmatch(params, "[^ ]+") do
        -- restore spaces instead of _s
        param = Trim(string.gsub(param, "_", " "))
        tparams[#tparams + 1] = param
      end

      show_debug_message(#tparams .. " parameters")

      process_spell(cmd, tparams[1], tparams[2], tparams[3], tparams[4], tparams[5], tparams[6])

    else
      Send(cmd .. " " .. params)
      show_debug_message("already casting")
    end

  else
    Send(cmd .. " " .. params)
  end
end


function process_spell(cmd, spell, param1, param2, param3, param4, param5)
  if (name) and (not casting) then
    if (cmd == "evoke") then
      specific_spell = spell .. " evocation"

    elseif (cmd == "invoke") then
      specific_spell = spell .. " invocation"

    else
      -- we don't wanna include 's
      specific_spell = string.match(spell, "[%a ]+")
    end
  end

  cmd = cmd .. " " .. spell

  if (param1) then
    cmd = cmd .. " " .. param1
  end

  if (param2) then
    cmd = cmd .. " " .. param2
  end

  if (param3) then
    cmd = cmd .. " " .. param3
  end

  if (param4) then
    cmd = cmd .. " " .. param4
  end

  if (param5) then
    cmd = cmd .. " " .. param5
  end

  Send(cmd)
end



------------
-- betters
------------

function just_leveled()
-- leveling betters don't affect usage betters
  EnableTrigger("detect_betters", false)
  EnableTrigger("detect_done_leveling", true)
end


function done_leveling()
-- leveling betters don't affect usage betters
  EnableTrigger("detect_done_leveling", false)
  EnableTrigger("detect_betters", true)
end


function got_a_better(what)
  show_specific_usage_count(what)
  reset_usage(what)
end


function show_specific_usage_count(what)
  if (ArrayGet("sk_usg_better", what)) then
    show_usage_count_skill(what)

  elseif (ArrayGet("sp_usg_better", what)) then
    show_usage_count_spell(what)
  end
end


function show_usage_count_skill(skill)
  show_a_usage_count(skill, "sk_usg_better", "skill")
end


function show_usage_count_spell(spell)
  show_a_usage_count(spell, "sp_usg_better", "spell")
end


function show_a_usage_count(what, arrayname, typename)
-- shows header, calls show_a_usg
  what = string.lower(what)
  local usg = ArrayGet(arrayname, what) or 0

  Tell("-- combat_stats: results for ")
  ColourTell("silver", "black", name)
  Note(" --")

  Note(typename .. "                      uses since last better")

  show_a_usg(what, usg)
end


function show_usage_count_skills()
  if (name) then
    show_usage_count_all("sk", "skill")

  else
    plugin_not_initialized()
  end
end


function do_show_usage_count_skills()
  do_show_usage_count_all("sk", "skill")
end


function show_usage_count_spells()
  if (name) then
    show_usage_count_all("sp", "spell")

  else
    plugin_not_initialized()
  end
end


function do_show_usage_count_spells()
  do_show_usage_count_all("sp", "spell")
end


function show_usage_count_all(aprefix, typename)
-- shows header, calls do_use_...
  local usg

  if (ArraySize(aprefix .. "_usg_better") > 0) then
    Tell("-- combat_stats: results for ")
    ColourTell("silver", "black", name)
    Note(" --")
    Note("")

    do_show_usage_count_all(aprefix, typename)

  else
    Note("-- combat_stats: use some " .. typename .. "s first! --")
  end
end


function do_show_usage_count_all(aprefix, typename)
-- shows all results
  local usg

  Note(typename .. "                      uses since last better")

  for key, what in pairs(ArrayListKeys(aprefix .. "_usg_better")) do
    usg = ArrayGet(aprefix .. "_usg_better", what) or 0

    if (tonumber(usg) > 0) then
      show_a_usg(what, usg)
    end
  end
end


function show_a_usg(name, count)
-- shows 1 line in the usages since last better table
  ColourTell("silver", "black", name)
  ColourTell("navy", "black", string.rep(".", 21 - string.len(name)))
  ColourTell("navy", "black", string.rep(".", 28 - string.len(count)))
  ColourNote("silver", "black", count)
end



--------------------
-- skills / spells
--------------------

function skill_success(skill)
  if (name) then
    if (skill == "melee") then
      skill = weapon
    end

    if (find_index(umbrella_skills, skill)) then
      if (skill == specific_skill) then
        increase_counter("sk_hits", skill)
        increase_counter("sk_usg_better", skill)
      end

    else
      increase_counter("sk_hits", skill)
      increase_counter("sk_usg_better", skill)
    end
  end
end


function skill_fail(skill)
  if (name) then
    if (skill == "melee") then
      skill = weapon

    elseif (find_index(umbrella_skills, skill)) then
      if (specific_skill) then
        skill = specific_skill
        specific_skill = nil
      end
      show_debug_message("skill: " .. skill .. " failed")
    end

    increase_counter("sk_misses", skill)
    increase_counter("sk_usg_better", skill)
  end
end


function skill_used(skill)
-- this is for skills that lack a failure string,
-- like battle rage, or the defensive skills
  if (name) then
    increase_counter("sk_usg_better", skill)
  end
end


function spell_started_casting()
  casting = true
end


function spell_finished_casting(second_line)
  if (second_line == "You lose your concentration.") then
  -- fumble
    spell_fail()

  else
    spell_success()
  end
end


function spell_success(name)
-- not really using 'name' until I'm sure that resist/etc. strings are unique
  local spell = specific_spell
  specific_spell = nil
  casting = nil

  if (spell) then
    show_debug_message("spell: " .. spell .. " casted successfully")
  end

  increase_counter("sp_hits", spell)
  increase_counter("sp_usg_better", spell)
end


function spell_fail()
  spell = specific_spell
  specific_spell = nil
  casting = nil

  if (spell) then
    show_debug_message("spell: " .. spell .. " fumbled")
  end

  increase_counter("sp_misses", spell)
  increase_counter("sp_usg_better", spell)
end


function increase_counter(arrayname, what)
  if (what) then
    local val = ArrayGet(arrayname, what) or 0
    val = val + 1
    ArraySet(arrayname, what, val)
  end
end



------------------------------
-- show success rate results
------------------------------

function show_skills_results()
  if (name) then
    show_all_results("sk", "skill")

  else
    plugin_not_initialized()
  end
end


function do_show_skills_results()
  do_show_all_results("sk", "skill")
end


function show_spells_results()
  if (name) then
    show_all_results("sp", "spell")

  else
    plugin_not_initialized()
  end
end


function do_show_spells_results()
  do_show_all_results("sp", "spell")
end


function show_all_results(aprefix, typename)
  if (ArraySize(aprefix .. "_hits") > 0)
  or (ArraySize(aprefix .. "_misses") > 0) then
    Tell("-- combat_stats: results for ")
    ColourTell("silver", "black", name)
    Note(" --")
    Note("")

    do_show_all_results(aprefix, typename)

  else
    Note("-- combat_stats: use some " .. typename .. "s first! --")
  end
end


function do_show_all_results(aprefix, typename)
  if (typename == "skill") then
    Note(typename .. "                      hits    misses    success")
  elseif (typename == "spell") then
    Note(typename .. "              non-fumbles   fumbles    success")
  end

  for key, what in pairs(ArrayListKeys(aprefix .. "_usg_better")) do
    hits = ArrayGet(aprefix .. "_hits", what) or 0
    misses = ArrayGet(aprefix .. "_misses", what) or 0

    if (tonumber(hits) > 0) or (tonumber(misses) > 0) then
      show_a_result(what, hits, misses)
    end
  end
end


function show_a_result(skill, hits, misses)
  local success = string.format("%.1f", (hits * 100) / (hits + misses))

  ColourTell("silver", "black", skill)
  ColourTell("navy", "black", string.rep(".", 21 - string.len(skill)))
  ColourTell("navy", "black", string.rep(".", 10 - string.len(hits)))
  ColourTell("silver", "black", hits)
  ColourTell("navy", "black", string.rep(".", 10 - string.len(misses)))
  ColourTell("silver", "black", misses)
  ColourTell("navy", "black", string.rep(".", 10 - string.len(success)))
  ColourNote("silver", "black", success .. "%")
end



---------------------
-- show all results
---------------------

function show_all_skills_stats()
  if (name) then
    Note("")
    do_show_skills_results()
    Note("")
    do_show_usage_count_skills()
    Note("")
  end
end


]]>

</script>

</muclient>
