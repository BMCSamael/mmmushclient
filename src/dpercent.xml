<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, November 3, 2023, 6:47 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "dpercent" generated by Plugin Wizard -->

<muclient>

<plugin
   name="dpercent"
   author="Tamlin"
   id="4e2bf9f75646bf678cf620ee"
   language="Lua"
   purpose="lessens default combat spam"
   save_state="y"
   date_written="2023-11-02 18:46:16"
   date_modified="2023-11-03 13:53:40"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.----------.
 | dpercent |
`----------'

Shows the % of damage at the beginning of the combat line

Author: Tamlin

dpercent <on/off>
dpercent show_dmg_brief <on/off>

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

  <variable name="ordinal">(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth)</variable>

</variables>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^dpercent(|[ ]+(?P&lt;state&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_dpercent("%&lt;state&gt;")
</send>
  </alias>

<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^dpercent( |\:)help$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

<!--  Options  -->

  <alias
   enabled="y"
   match="^dpercent[ ]+show\_dmg\_brief(|[ ]+(?P&lt;state&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_show_dmg_brief("%&lt;state&gt;")
</send>
  </alias>


</aliases>



<!--  Triggers  -->

<triggers>

 <!-- my defenses -->

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You (.+) (backflip|leap|sidestep|tumble) out of the way of (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "%&lt;who&gt;", "ACRO")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^The world goes black for a moment as you teleport a few feet away\, missing (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "%&lt;who&gt;", "combat_blink")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You dodge out of the way of (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "%&lt;who&gt;", "dodge")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^You are obscured by a swirling cloud of dust\, causing (?P&lt;who&gt;.+) to miss (.+) attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "%&lt;who&gt;", "dust_invo")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You slip between planes for a moment\, evading (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "%&lt;who&gt;", "magical_fade")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You skillfully parry (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "%&lt;who&gt;", "parry")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^You catch (.+) on (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "?", "shield_block")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^The telekinetic shield protecting you moves quickly\, intercepting (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_my_def("%0", "%&lt;who&gt;", "tk_shield")
</send>
  </trigger>

<!-- other's defenses -->

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) (.+) (backflips|leaps|sidesteps|tumbles) out of the way of your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_vs_me_def("%0", "%&lt;tgt&gt;", "acrobatics")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) (.+) (backflips|leaps|sidesteps|tumbles) out of the way of (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "%&lt;who&gt;", "acrobatics")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) disappears with a BANG and reappears a few feet away\, out of the range of your (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns.
inc_vs_me_def("%0", "%&lt;tgt&gt;", "combat_blink")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) disappears with a BANG and reappears a few feet away\, out of the range of (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "%&lt;who&gt;", "combat_blink")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) dodges out of the way of your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_vs_me_def("%0", "%&lt;tgt&gt;", "dodge")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) dodges out of the way of (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "%&lt;who&gt;", "dodge")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is obscured by a swirling cloud of dust\, causing you to miss your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_vs_me_def("%0", "%&lt;tgt&gt;", "dust_invo")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is obscured by a swirling cloud of dust\, causing (?P&lt;who&gt;.+) to miss (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "%&lt;who&gt;", "dust_invo")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) phases out of existence\, evading your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_vs_me_def("%0", "%&lt;tgt&gt;", "magical_fade")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) phases out of existence\, evading (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "%&lt;who&gt;", "magical_fade")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) parries your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_vs_me_def("%0", "%&lt;tgt&gt;", "parry")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) parries (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "%&lt;who&gt;", "parry")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) catches (.+) on (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "?", "shield_block")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^A disc of solidifed air in front of (?P&lt;tgt&gt;.+) moves quickly\, intercepting your (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_vs_me_def("%0", "%&lt;tgt&gt;", "tk_shield")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^A disc of solidifed air in front of (?P&lt;tgt&gt;.+) moves quickly\, intercepting (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
inc_other_def("%0", "%&lt;tgt&gt;", "%&lt;who&gt;", "tk_shield")
</send>
  </trigger>


<!-- other's damage -->

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;who&gt;(@!char_name)) fails to hit (?P&lt;tgt&gt;.+) with (.+) attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
check_other_dmg("%0", "%&lt;who&gt;", "none", "fail", "miss")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;who&gt;(@!char_name))\'s fireshield erupts at your strike\! You are burned on the ?P&lt;bpart&gt;.+ by (.+)\'s flames causing (?P&lt;how_much&gt;.+) damage\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   inc_vs_me_dmg("%0", "%&lt;who&gt;", "%&lt;bpart&gt;", "flames", "%&lt;how_much&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;who&gt;(@!char_name))\'s fireshield erupts at (?P&lt;tgt&gt;.+)\'s strike\! (.+) (is|are) burned on the (?P&lt;bpart&gt;.+) by (.+)\'s flames causing (?P&lt;how_much&gt;.+) damage\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   inc_other_dmg("%0", "%&lt;tgt&gt;", "%&lt;bpart&gt;", "flames", "%&lt;how_much&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="(?P&lt;who&gt;(@!char_name))\'s (|(@!ordinal) )attack didn\'t seem to have any effect on (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   check_other_dmg("%0", "%&lt;who&gt;", "none", "immune", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) (is|are) (.+) on the (?P&lt;bpart&gt;.+) (by|with) (?P&lt;who&gt;.+)\'s (?P&lt;type&gt;.+) causing (?P&lt;how_much&gt;.+) damage\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   check_other_dmg("%0", "%&lt;tgt&gt;", "%&lt;bpart&gt;", "%&lt;type&gt;", "%&lt;how_much&gt;")
</send>
  </trigger>

<!-- my damage -->

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^You fail to hit (?P&lt;tgt&gt;.+) with your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   inc_my_dmg("%0", "%&lt;tgt&gt;", "none", "fail", "miss")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   match="^Your fireshield erupts as (?P&lt;tgt&gt;.+) strikes you\! (.+) is burned on the (?P&lt;bpart&gt;.+) with your flames causing (?P&lt;how_much&gt;.+) damage\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   inc_my_dmg("%0", "%&lt;tgt&gt;", "%&lt;bpart&gt;", "flames", "%&lt;how_much&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is unaffected by your (.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   inc_my_dmg("%0", "%&lt;tgt&gt;", "none", "immune", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^Your (|(@!ordinal) )attack didn\'t seem to have any effect on (?P&lt;tgt&gt;.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   inc_my_dmg("%0", "%&lt;tgt&gt;", "none", "immune", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^[a-zA-Z \-\,\' ]+ is not usable (at|from) your current formation position\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   inc_my_dmg("%0", "You", "none", "form", "pos")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-dpercent"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is (.+) on the (?P&lt;bpart&gt;.+) with your (?P&lt;type&gt;.+) causing (?P&lt;how_much&gt;.+) damage\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
   check_my_dmg("%0", "%&lt;tgt&gt;", "%&lt;bpart&gt;", "%&lt;type&gt;", "%&lt;how_much&gt;")
</send>
  </trigger>
</triggers>

<!--  Scripts  -->

<script>

<![CDATA[

require "wait"


-----------
-- plugin
-----------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    init_stuff()
    load_config()

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  use_events_mini = events_mini_installed()
  reader_present = reader_plugin_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/dpercent.xml",
  }
  return (table.concat(t, ";"))
end


function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/res/ping.mp3,MUSH/sounds",
  }
  return (table.concat(t, ";"))
end



------------
-- general
------------

-- percentages are from help combat adjectives
damage_dealt = {
  ["no"] = "IMNE",             -- this never happens - I use it for invuln
  ["miss"] = "MISS",		-- Misses
  ["pos"] = "FPOS",		-- Form Position Unusable
  ["undetectable"] = ".001%%%",
  ["ephemeral"] = ".002%%%",
  ["minuscule"] = ".003%%%", -- guess (not listed in help 2394)
  ["intangible"] = ".005%%%",
  ["imperceptible"] = ".010%%%",
  ["no observable"] = ".015%%%",
  ["no apparent"] = " .020%%%",
  ["no evident"] = " .033%%%",
  ["no obvious"] = " .05%%%",
  ["unnoticeable"] = ".10%%%",
  ["infinitesimal"] = ".15%%%",
  ["insignificant"] = ".25%%%",
  ["superficial"] = ".35%%%",
  ["trivial"] = ".50%%%",
  ["trifling"] = ".65%%%",
  ["slight"] = ".80%%%",
  ["paltry"] = "  1%%%",
  ["minimal"] = "  2%%%",
  ["mild"] = "  3%%%",
  ["modest"] = "  5%%%",
  ["middling"] = "  6%%%",      -- guess (not listed in help 2394)
  ["moderate"] = "  7%%%",      -- guess (not listed in help 2394)
  ["heavy"] = "  8%%%",
  ["great"] = " 12%%%",
  ["enormous"] = " 15%%%",
  ["giant"] = " 20%%%",
  ["huge"] = " 25%%%",
  ["extensive"] = " 35%%%",
  ["tremendous"] = " 45%%%",
  ["massive"] = " 55%%%",
  ["incredible"] = " 65%%%",
  ["shocking"] = " 75%%%",
  ["unbelievable"] = " 86%%%",
  ["unbearable"] = " 97%%%",
  ["intolerable"] = " 98%%%",
  ["lethal"] = " 99%%%",
}


function toggle_dpercent(state)
  dpercent_on = toggle_state(dpercent_on, state)

  if (dpercent_on) then
    EnableTriggerGroup("script-dpercent", true)
    Note("-- dpercent: scripts ON --")
    Tell("(remember to set ")
    ColourTell("silver", "black", "combat mode brief")
    Note(" to add damage percent)")

  else
    EnableTriggerGroup("script-dpercent", false)
    Note("-- dpercent: scripts OFF --")
  end
end


function toggle_show_dmg_brief(state)
  config.show_dmg_brief = toggle_state(config.show_dmg_brief, state)

  save_config()

  if (config.show_dmg_brief) then
    Note("-- dpercent: show_dmg_brief ON --")

  else
    Note("-- dpercent: show_dmg_brief OFF --")
  end
end


function toggle_state(oldstate, newstate)
  local res

  if (newstate == "") then
    res = not oldstate

  elseif (newstate == "on") then
    res = true

  elseif (newstate == "off") then
    res = false
  end

  return res
end


function load_config()
  config = {
    show_dmg_brief = ((GetVariable("show_dmg_brief") or "false") == "true"),
  }
end


function save_config()
  SetVariable("show_dmg_brief", tostring(config.show_dmg_brief))

  SaveState()
end


function init_stuff()

  my_def = {}
  vs_me_def = {}
  other_def = {}

  my_dmg = {}
  vs_me_dmg = {}
  other_dmg = {}

  my_dmg_prcnt = {}
  vs_me_dmg_prcnt = {}
  other_dmg_prcnt = {}

  total_count = 0

  dpercent_on = true
  EnableTriggerGroup("script-dpercent", true)
end


function count_items(t)
  local res = 0
  for key, val in pairs(t) do
    res = res + 1
  end
  return res
end


function inc(num)
  local res = (num or 0) + 1

  return res
end



-----------
-- events
-----------

function add_to_events(fgcol, txt)
  add_to_events_world(fgcol, txt)
  add_to_events_mini(fgcol, txt)
end


function add_to_events_world(fgcol, txt)
  local events = GetWorld("events")

  if (events) then
    events:Note("")
    events:ColourTell("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    events:ColourNote(fgcol, "black", txt)
    events:Note("")
  end
end


function add_to_events_mini(fgcol, txt)
  function add_style_to_events_mini(fgcol, bgcol, txt)
    CallPlugin("9ced43d0a7b4a60116794096", "add_to_mini", fgcol, bgcol, txt)
  end

  -- OnPluginListChanged() should keep 'use_events_mini' updated

  if (events_mini) then
    add_style_to_events_mini("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    add_style_to_events_mini(fgcol, "black", txt)
    add_style_to_events_mini("silver", "black", "\r\n")
  end
end


function events_mini_installed()
  return is_plugin_present("events_mini", "9ced43d0a7b4a60116794096")
end



---------------------
-- combat detection
---------------------

function set_combat(status, target)
  combat = status

  if (target) then
    opponent = string.lower(target)
  else
    opponent = nil
  end
end


function check_combat_end(target)
  target = string.lower(target)
  if (target == opponent) then
    set_combat(false)
  end
end

-----------------------
-- defense --
-----------------------


function inc_other_def(desc, tgt, who, type)
  who = string.lower(Trim(who))
  tgt = string.lower(Trim(tgt))

    for k, v in ipairs(trigger_style_runs) do
      if (config.show_dmg_brief) then
       	newval = string.gsub(v.text, desc, "[DEFN] [" .. type .. "] [" .. who .. "->" .. tgt .. "]")
      else
	newval = string.gsub(v.text, desc, "[DEFN] [" .. type .. "] " .. desc)
      end
      ColourTell(RGBColourToName(v.textcolour),
               RGBColourToName(v.backcolour),
               newval)
    end -- for each style run

    Note("")
end


function inc_vs_me_def(desc, tgt, type)
  tgt = string.lower(Trim(tgt))

    for k, v in ipairs(trigger_style_runs) do
      if (config.show_dmg_brief) then
       	newval = string.gsub(v.text, desc, "[DEFN] [" .. type .. "] Me->[" .. tgt .. "]")
      else
	newval = string.gsub(v.text, desc, "[DEFN] [" .. type .. "] " .. desc)
      end
      ColourTell(RGBColourToName(v.textcolour),
               RGBColourToName(v.backcolour),
               newval)
    end -- for each style run

    Note("")
end

function inc_my_def(desc, who, type)
  who = string.lower(Trim(who))

    for k, v in ipairs(trigger_style_runs) do
      if (config.show_dmg_brief) then
       	newval = string.gsub(v.text, desc, "[DEFN] [" .. type .. "] [" .. who .. "]->Me")
      else
	newval = string.gsub(v.text, desc, "[DEFN] [" .. type .. "] " .. desc)
      end
      ColourTell(RGBColourToName(v.textcolour),
               RGBColourToName(v.backcolour),
               newval)
    end -- for each style run

    Note("")
end


-----------------------
-- attacks --
-----------------------

function check_other_dmg(desc, who, bpart, type, dmg)
    -- who = string.lower(Trim(who))
    inc_other_dmg(desc, who, bpart, type, dmg)
end


function inc_other_dmg(desc, who, bpart, type, dmg)
  -- who = string.lower(Trim(who))
  local newval
   if (damage_dealt[dmg]) then
    for k, v in ipairs(trigger_style_runs) do
      if (config.show_dmg_brief) then
	newval = string.gsub(v.text, desc, "[" .. damage_dealt[dmg] .. "] [".. type .. "] [" .. who .. "] [" .. bpart .. "]")
      else
	newval = string.gsub(v.text, desc, "[" .. damage_dealt[dmg] .. "] " .. desc)
      end
      ColourTell(RGBColourToName(v.textcolour),
               RGBColourToName(v.backcolour),
               newval)
    end -- for each style run

    Note("")
  else
    Note("-- dpercent - unknown damage value: " .. dmg .. " --")
    add_to_events("silver", "unknown dmg value: " .. dmg)
  end
end


function inc_vs_me_dmg(desc, who, bpart, type, dmg)
 -- who = string.lower(Trim(who))
 local newval
  if (damage_dealt[dmg]) then
    for k, v in ipairs(trigger_style_runs) do
      if (config.show_dmg_brief) then
	newval = string.gsub(v.text, desc, "[" .. damage_dealt[dmg] .. "] [".. type .. "] [" .. who .. "] [" .. bpart .. "]")
      else
	newval = string.gsub(v.text, desc, "[" .. damage_dealt[dmg] .. "] " .. desc)
      end
      ColourTell(RGBColourToName(v.textcolour),
               RGBColourToName(v.backcolour),
               newval)
    end -- for each style run

    Note("")
  else
    Note("-- dpercent - unknown damage value: " .. dmg .. " --")
  end
end

function check_my_dmg(desc, who, bpart, type, dmg)
-- who = string.lower(Trim(who))
  if (not string.find(desc, "Your fireshield erupts")) then
    inc_my_dmg(desc, who, bpart, type, dmg)
  end
end


function inc_my_dmg(desc, who, bpart, type, dmg)
 -- who = string.lower(Trim(who))
 local newval
  if (damage_dealt[dmg]) then
    for k, v in ipairs(trigger_style_runs) do
       if (config.show_dmg_brief) then
	newval = string.gsub(v.text, desc, "[" .. damage_dealt[dmg] .. "] [".. type .. "] [" .. who .. "] [" .. bpart .. "]")
      else
	newval = string.gsub(v.text, desc, "[" .. damage_dealt[dmg] .. "] " .. desc)
      end
      ColourTell(RGBColourToName(v.textcolour),
		RGBColourToName(v.backcolour),
               newval)
    end -- for each style run

    Note("")
  else
    Note("-- dpercent - unknown damage value: " .. dmg .. " --")
  end
end

function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end



]]>

</script>

</muclient>
