<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, September 30, 2020, 6:35 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "room_desc_mini" generated by Plugin Wizard -->

<muclient>
  
<plugin
  name="room_desc_mini"
  author="Ruthgul"
  id="233091f6c00f9afb14a2af62"
  language="Lua"
  purpose="room descriptions mini-window"
  save_state="y"
  date_written="2020-09-30 18:34:17"
  date_modified="2020-10-01 05:17:37"
  requires="5.03"
  version="1.0"
>

<description trim="y">

<![CDATA[

.------------------.
 | room_desc_mini |
`------------------'

Miniwindow to capture the current room description.


** REQUIRES **

- The file generic_miniwindow.lua must be placed in the MUSHclient/lua directory.
- MUSHclient must have write access to its folder.
- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- Game settings: MXP must be ON, to auto-detect NPCs & items [ Client setting: Game, Configure, MXP / Pueblo... > Use MXP / Pueblo: On command (or Yes - always). ]
- Game settings: SHOW-EXITS must be ON (to detect the beginning of a room description).


Syntax:

* room desc mini [on|off]  - shows/hides the room_desc miniwindow

* reset room desc  - restores the default size

* clear room desc mini - clears the miniwindow contents


Author: Ruthgul
Miniwindow code adapted from Fiendish's / Enelya's chat capture plugins

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts


]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
   match="^room desc mini(| (?<status>on|off))$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="toggle_mini_to"
  >
  </alias>

  <alias
    enabled="y"
    regexp="y"
    match="^reset room desc$"
    sequence="100"
    script="restore_defaults"
  >
  </alias>

  <alias
   match="^clear room desc mini$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="clear_mini"
  >
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^room\_desc\_mini(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

  <trigger
   name="start_desc"
   keep_evaluating="y"
   match="^  Visible Exits\: (.+)$"
   regexp="y"
   sequence="100"
   script="on_start_desc"
  >
  </trigger>


  <trigger
   name="desc_line"
   keep_evaluating="y"
   match="^(.*)$"
   regexp="y"
   sequence="100"
   script="on_desc_line"
  >
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "generic_miniwindow"
require "gmcphelper"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  show_mini = ((GetVariable("show_mini") or "true") == "true")

  if (show_mini) then
    do_install_miniwindow("room description", show_mini, true)
  end
end


function OnPluginEnable()
  if (show_mini) then
    mini_show()
  end
end


function OnPluginClose()
  if (show_mini) then
    if GetPluginInfo(GetPluginID(), 17) then -- plugin is enabled
      mini_hide()
    end
  end
end


function OnPluginDisable()
  if (show_mini) then
    mini_hide()
  end
end


function OnPluginSaveState()
  if (show_mini) then
    SetVariable("enabled", tostring(GetPluginInfo(GetPluginID(), 17)))
    save_status()
  end
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/room_desc_mini.xml",
  }
  return (table.concat(t, ";"))
end


function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/generic_miniwindow.lua,MUSH/lua",
  }
  return (table.concat(t, ";"))
end



---------------
-- GMCP stuff
---------------

function OnPluginBroadcast(msg, id, name, text)
  if (id =="f67c4339ed0591a5b010d05b") then
    -- GMCP message
    if (text == "room.info") then
      on_gmcp_room_info()
    
    elseif (text == "char.vitals") then
      on_gmcp_char_vitals()
    end
  end
end


function get_gmcp_room()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "room.info")
  luastmt = "gmcpdata = " .. gmcparg
  
  assert(loadstring(luastmt or ""))()
end


function on_gmcp_room_info()
  get_gmcp_room()
  clear_mini()
  add_room_name()
  -- not adding vmap rooms
  if (not is_vmap()) then
    EnableTrigger("start_desc", true)
  end
end


function on_gmcp_char_vitals()
  -- char.vitals => it's a prompt => description ended
  on_end_desc()
end


function is_vmap()
  wilds = gmcpval("wilds")
  return (wilds == "true") or is_pseudo_vmap()
end


function is_pseudo_vmap()
  local vmap_zones = {
    ["lasler valley"] = true,
  }
  local vmap_rooms = {
    ["11273"] = true,
    ["11274"] = true,
  }
  zone = gmcpval("zone")
  uid = gmcpval("num")
  return vmap_zones[string.lower(Trim(zone))] or vmap_rooms[uid]
end



--------------
-- MXP stuff
--------------

function OnPluginMXPopenTag(name, args, mylist)
  -- MXP tag open => it's a mob or an item => description ended
  on_end_desc()
end



------------------
-- capture stuff
------------------

desc = nil

function on_start_desc()
  desc = nil
  EnableTrigger("desc_line", true)
  EnableTrigger("start_desc", false)
--  print("-- desc start --")
end


function on_desc_line(name, line, wildcards, styles)
--  print("line:", line)
  if (string.find(line, "  Visible Exits") ~= 1) then
    add_styles(styles)
    on_line_end(line)
  end
end


function on_line_end(line)
  if (not line) or (Trim(line) == "") then
    add_new_line()
  else
    add_space()
  end
end


function on_end_desc()
--  print("-- desc end --")
  EnableTrigger("desc_line", false)
  add_new_line()
end



----------------------------
-- add stuff to miniwindow
----------------------------

function add_room_name()
  local name = gmcpval("name")
--  print("name:", name)
  if (name and name ~= "") then
    add_to_mini("yellow", "black", name)
    add_new_line()
  end
end


function add_styles(styles)
  for _, v in ipairs(styles) do
    add_to_mini(RGBColourToName(v.textcolour), RGBColourToName(v.backcolour), v.text)
  end
end


function add_space()
  add_to_mini("silver", "black", " ")
end


function add_new_line()
  add_to_mini("silver", "black", '\r\n')
end


styles = {}
function add_to_mini(fgcol, bgcol, txt)
  if (show_mini) then
    if (not styles) then
      styles = {}
    end

    if (txt == "\r\n") then
      -- end line => push all styles to miniwindow
      log_to_mini("", "", "", styles)
      styles = {}

    else
      -- add styles until we get a a clear end of line
      styles[#styles + 1] = {
        text = txt,
        textcolour = ColourNameToRGB(fgcol),
        backcolour = ColourNameToRGB(bgcol),
        length = string.len(txt),
        style = 0,
      }
    end
  end
end



----------------------
-- miniwindow toggle
----------------------

function toggle_mini_to(name, line, wildcards)
  local state = wildcards.status
  
  if (state == "") then
    show_mini = not show_mini

  elseif (state == "on") then
    show_mini = true

  elseif (state == "off") then
    show_mini = false
  end

  if (show_mini) then
    SetVariable("show_mini", "true")
    mini_show()

  else
    SetVariable("show_mini", "false")
    mini_hide()
  end

  SaveState()
end


]]>

</script>


</muclient>
