<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, December 09, 2008, 2:04 PM -->
<!-- MuClient version 4.37 -->

<!-- Plugin "LuaAudio" generated by Plugin Wizard -->

<muclient>

<plugin
  name="LuaAudio"
  author="Tyler Spivey, Ruthgul"
  id="aedf0cb0be5bf045860d54b7"
  language="Lua"
  purpose="Test audio plugin for lua"
  save_state="y"
  date_written="2008-12-09 14:02:34"
  date_modified="2013-12-31 13:22:12"
  requires="4.37"
  version="1.0"
>

<description trim="y">
<![CDATA[

~ LuaAudio ~

Keystrokes:
Ctrl + F12  =  sound_toggle

Aliases:
sound_toggle
volume_down
volume_up
vol

Authors: Tyler Spivey, Ruthgul

Changes added by Ruthgul:
- added this help screen
- made it use accelerators to add the keystroke, if that plugin is present
- made it compatible with plugins_updater

]]>

</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>


<aliases>

  <alias
   enabled="y"
   match="sound_toggle"
   send_to="12"
   sequence="100"
  >
  <send>toggle_sound()
</send>

</alias>
  <alias
   enabled="y"
   match="volume_down"
   send_to="12"
   sequence="100"
  >
  <send>turn_volume_down()
</send>

</alias>
  <alias
   enabled="y"
   match="vol"
   send_to="12"
   sequence="100"
  >
  <send>show_stuff()
</send>

</alias>
  <alias
   enabled="y"
   match="volume_up"
   send_to="12"
   sequence="100"
  >
  <send>turn_volume_up()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^LuaAudio(|( |\:)help)$"
   regexp="y"
   ignore_case="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<script>

<![CDATA[

local ppi = require "ppi"

local sound_path = GetInfo(66) .. "/sounds/"


function OnPluginInstall()
  Note(GetPluginInfo(GetPluginID(), 1) .. ": type " .. GetPluginInfo(GetPluginID(), 1) .. " help to see info about this plugin")

  assert(package.loadlib("audio.dll", "luaopen_audio"))()
  if not (GetVariable("vol") == nil) then
    vol = tonumber(GetVariable("vol"))
    Sound("volume=" .. vol .. "")
  else
    vol = 100
    Sound("volume=100")
    SetVariable("vol", "100")
    SaveState()
  end

  if (is_accelerators_present()) then
    add_accelerator("ctrl + f12", "sound_toggle", "no")
  else
    Accelerator("ctrl + f12", "sound_toggle")
  end
end


function OnHelp ()
  world.Note(world.GetPluginInfo(world.GetPluginID(), 3))
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/LuaAudio.xml",
  }
  return (table.concat(t, ";"))
end


function sfreq(freqing)
  freq = split(freqing, "=")
  val = freq[1]
  file = freq[2]
  Sound("freq=" .. val)
  Sound(file)
end


local function isPlaying(id)
  return audio.isPlaying(id)
end


local function getVolume(id)
  return audio.getVolume(id)
end


function SoundPan(panning)
  pan = split(panning, "=")
  current = tonumber(pan[1])
  max = tonumber(pan[2])
  file = pan[3]
  Sound("pan=" .. (current * 200 / max) - 100)
  Sound(file)
  Sound("pan=0")
end


function split(str, pat)
  local t = {}
  local fpat = "(.-)" .. pat
  local last_end = 1
  local s, e, cap = str:find(fpat, 1)
  while s do
    if s ~= 1 or cap ~= "" then
      table.insert(t,cap)
    end
    last_end = e + 1
    s, e, cap = str:find(fpat, last_end)
  end
  if last_end <= #str then
    cap = str:sub(last_end)
    table.insert(t, cap)
  end
  return t
end


-- mapping of loops to ids
loops = {}
require "tprint"

function OnPluginPlaySound(file)
  if file == "" then
    audio.stop(0)
    return
  end -- if
  if file:find("=") then
    t = split(file, "=")
    if t[1] == "pan" then
      audio.pan(tonumber(t[2]))
    elseif t[1] == "volume" then
      audio.volume(tonumber(t[2]))
    elseif t[1] == "freq" then
      audio.freq(tonumber(t[2]))
    elseif t[1] == "loop" then
      file = t[2]
      local id = audio.play(file, 1)
      --Note(id)
      if id ~= 0 then
        loops[file] = id
      end -- If
    elseif t[1] == "stop" then
      if t[2] == "all" then
        for k, v in pairs(loops) do
          audio.stop(v)
        end
      elseif loops[t[2]] then
        audio.stop(loops[t[2]])
        loops[t[2]] = nil
      end
    end -- if t1
  else -- doesn't contain =
    id=audio.play(file,0)
    --Note(id)
    --if id==0 then
      --Sound(sound_path .. "error.ogg")
    --end
  end -- if contains =
end


function setPan(x, id)
  audio.pan(x, id)
end


function setPitch(x, id)
  audio.pitch(x, id)
end


function setVol(x, id)
  audio.volume(x,id)
end


function slideVol(x, id, time)
  audio.slideVol(x, id, time)
end


function fadeout(id, time)
  audio.fadeout(id, time)
end


function slidePan(x, id, time)
  audio.slidePan(x, id, time)
end


local function slidePitch(x, id, time)
  audio.slidePitch(x, id, time)
end


local function stop(id)
  audio.stop(id)
end


local function playDelay(file, time, pan, vol)
  id = audio.playDelay(file, time, pan, vol)
  --if id==0 then
    --Sound(sound_path .. "error.ogg")
    return id
  --end
end


local function playDelayLooped(file, time, pan, vol)
  id = audio.playDelayLooped(file, time, pan, vol)
  --if id == 0 then
    --Sound(sound_path .. "error.ogg")
    return id
  --end
end


local function playLooped(file)
  id = audio.play(file, 1)
  --Note(id)
  --if id == 0 then
    --Sound(sound_path .. "error.ogg")
  --end
  return id
end


local function play(file, loop, pan, vol)
  id = audio.play(file, loop, pan, vol)
  if vol ~= nil then
    if vol > 100 then
      vol = 100
    end
  end
  --Note(id)
  --if id==0 then
    --Sound(sound_path .. "error.ogg")
  --end
  return id
end


ppi.Expose("setPitch", setPitch)
ppi.Expose("slidePitch", slidePitch)

ppi.Expose("isPlaying", isPlaying)
ppi.Expose("getVolume", getVolume)

ppi.Expose("stop", stop)
ppi.Expose("setPan", setPan)
ppi.Expose("play", play)
ppi.Expose("playDelay", playDelay)
ppi.Expose("playDelayLooped", playDelayLooped)
ppi.Expose("setVol", setVol)
ppi.Expose("slideVol", slideVol)
ppi.Expose("fadeout", fadeout)
ppi.Expose("slidePan", slidePan)
ppi.Expose("playLooped", playLooped)


function OnPluginClose()
  audio.free()
end



-- aliases

function toggle_sound()
  if (sounds == 0) then
    sounds = 1
    Note("Sounds on.")
    audio.volume(vol, 0)
    --Sound(sound_pathsound_path .. "on.ogg")
    return
  else
    sounds = 0
    --Sound(sound_path .. "off.ogg")
    Note("Sounds off.")
    vol = audio.getVolume()
    DoAfterSpecial(0.3, 'Sound("volume=0")', 12)
    return
  end
end


function turn_volume_down()
  if (sounds == 0) then
    Execute("tts_interrupt You're not supposed to use this function while sounds are off you weird person.")
    --Sound(sound_path .. "error2.ogg")
    return
  end
  if (volume_changed == 1) then
    if (vol == 0) then
      Note("It's muted you noob.")
    else
      vol = vol - 5
      SetVariable("vol", vol)
      SaveState()
      Sound("volume=" .. vol .. "")
      --Sound(sound_path .. "down.ogg")
    end --volume changed 0
  else
    volume_changed = 1
    if (GetVariable("vol") == nil) then
      vol = 100
      vol = vol - 5
      SetVariable("vol", vol)
      SaveState()
      Sound("volume=" .. vol .. "")
      --Sound(sound_path .. "down.ogg")
    else --if it is not nil
      vol = tonumber(GetVariable("vol"))
      if (vol == 0) then
        Note("It's muted you noob.")
      else
        vol = vol - 5
        SetVariable("vol", vol)
        SaveState()
        Sound("volume="..vol.."")
        --Sound(sound_path .. "up.ogg")
      end --not 0
    end --not nil
  end --changed not changed
end


function turn_volume_up()
  if (sounds == 0) then
    Execute("tts_interrupt You're not supposed to use this function while sounds are off you weird person.")
    return
  end
  if (volume_changed == 1) then
    if (vol >= 100) then
      Note("Volume range can't be greater than 100.")
      --Sound(sound_path .. "error.ogg")
    else
      vol = vol + 5
      SetVariable("vol", vol)
      SaveState()
      Sound("volume=" .. vol .. "")
      --Sound(sound_path .. "up.ogg")
    end --volume changed 100
  else
    volume_changed = 1
    if (GetVariable("vol") == nil) then
      vol = 100
      SetVariable("vol", 100)
      Note("Volume range can't be greater than 100.")
      --Sound(sound_path .. "error.ogg")
      SaveState()
    else --if it is not nil
      vol = tonumber(GetVariable("vol"))
      if (vol >= 100) then
        Note("Volume range can't be greater than 100.")
        --Sound(sound_path .. "error.ogg")
      else
        vol = vol + 5
        SetVariable("vol", vol)
        SaveState()
        Sound("volume=" .. vol .. "")
        --Sound(sound_path .. "up.ogg")
      end --not 100
    end --not nil
  end --changed not changed
end


function show_stuff()
  Note(vol)
  Note(GetVariable("vol"))
  Note(sounds)
end


-- interface with accelerators

function is_accelerators_present()
  local plugin_name = GetPluginInfo("f99134f19ea994a0cc0888d1", 1)

  local res = false

  if (plugin_name == "accelerators") then
    if (GetPluginInfo("f99134f19ea994a0cc0888d1", 17)) then
      res = true
    end
  end

  return res
end


function add_accelerator(keystroke, command, override)
  local res, val

  res, val = CallPlugin("f99134f19ea994a0cc0888d1", "add_accelerator", keystroke, command, override)

  if (res ~= 0) then
    val = false
  end

  return val
end


]]>

</script>

</muclient>
