<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, January 09, 2012, 8:35 AM -->
<!-- MuClient version 4.73 -->

<!-- Plugin "kills_tnl" generated by Plugin Wizard -->

<muclient>

<plugin
   name="kills_tnl"
   author="Ruthgul"
   id="164db33914b912da8aac6ecc"
   language="Lua"
   purpose="kills / actions to next level"
   date_written="2012-01-09 08:30:37"
   date_modified="2014-02-17 15:27:58"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.-------------.
 | kills_tnl |
`-------------'

Will show how many similar kills or actions you need to level-up.
It works passively (triggers on changes to your exp to next level.)


** REQUIRES **

- MXP must be ON, to auto-detect the exp to next level [ Client setting: Game, Configure, MXP / Pueblo... > Use MXP / Pueblo: On command (or Yes - always). ]


Syntax:

* reset exp stats  - resets the stats counters
* exp stats  - shows avg exp per hour


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^reset[ ]+exp[ ]+stats$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>reset_exp_stats()
</send>
  </alias>

  <alias
   enabled="y"
   match="^exp[ ]+stats$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_exp_stats()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^kills_tnl(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- gained exp -->

  <trigger
   enabled="y"
   group="script-tnl"
   keep_evaluating="y"
   match="^(Lord|Lady) (.+) tells you\, \'As a reward for thy valor\, I am awarding you(.*?) (?P&lt;exp&gt;[0-9\,]+) experience point(|s)(.*?)\.\'$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>got_exp("%&lt;exp&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-tnl"
   keep_evaluating="y"
   match="^You (gain|receive) (?P&lt;exp&gt;.+) experience point(|s)(\.|\!)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>got_exp("%&lt;exp&gt;")
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    init_stuff()

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  use_sapi = sapi_plugin_present()
  reader_present = reader_plugin_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/kills_tnl.xml",
  }
  return (table.concat(t, ";"))
end



-------------------
-- initialization
-------------------

function init_stuff()
  exp = nil

  reset_exp_stats()
end


function reset_exp_stats()
  texp = {}
end



-----------------------
-- MXP exp and exptnl
-----------------------

function OnPluginMXPsetEntity(value)
  if (string.find(value, "exptnl")) then
    exptnl = string.match(value, "exptnl=(%d+)")
    exptnl = tonumber(exptnl)
--    Note("exptnl: " .. exptnl)

    process_exp()
  end
end



------------
-- exp tnl
------------

function got_exp(my_exp)
  if (my_exp) and (my_exp ~= "") and (my_exp ~= "0") then
    exp = tonum(my_exp)
  end
end


function tonum(num)
  local aux = string.gsub(num, ",", "")
  aux = tonumber(aux)
  return(aux)
end


function process_exp()
  if (exp) then
    texp[#texp + 1] = {
      time = os.time(),
      experience = exp,
    }

    local i, f = math.modf(exptnl / exp)
    if (f == 0) then
      do_show(i)
    else
      do_show(i + 1)
    end

    exp = nil
  end
end


function do_show(txt)
  if (reader_present) and (use_sapi) then
    sapi_say(txt .. " actions to level")

  else
    Tell("Similar actions to next level: ")
    ColourNote("silver", "black", txt)
    show_exp_stats()
  end
end



--------------
-- exp stats
--------------

function show_exp_stats()
  local current_time = os.time()

  -- avg exp during the last hour
  local totexp = 0
  local totkills = 0
  local start_time = current_time

  if (#texp > 1) then
    for i = 1, #texp do
      if ((current_time - texp[i].time) <= (60 * 60)) then
        start_time = math.min(start_time, texp[i].time)
        totexp = totexp + texp[i].experience
        totkills = totkills + 1
      end
    end

    -- elapsed time in minutes
    local etime = (current_time - start_time) / 60

    -- avg over 1 hour, or since we restarted counting
    if (etime >= 1) then
      Tell("(last ")
      ColourTell("silver", "black", string.format("%.1f", etime))
      Tell(" min... total exp: ")
      ColourTell("silver", "black", totexp)
      Tell(" - total kills: ")
      ColourTell("silver", "black", totkills)
      Tell(" - avg exp per min: ")
      ColourTell("silver", "black", string.format("%.0f", totexp / etime))
      Tell(" - should level in: ~")
      ColourTell("silver", "black", string.format("%.1f", exptnl / (totexp / etime)))
      Note(" min)")
    end
  end
end



------------------------
-- sapi / reader stuff
------------------------

function sapi_say(text)
  local res = CallPlugin("463242566069ebfd1b379ec1", "say", text)

  return res
end


function sapi_plugin_present()
  return is_plugin_present("Sapi_speaker", "463242566069ebfd1b379ec1") or is_plugin_present("Text_To_Speech", "463242566069ebfd1b379ec1")
end


function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end


]]>

</script>

</muclient>
