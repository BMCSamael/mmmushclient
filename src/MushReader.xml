<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, December 09, 2008, 2:04 PM -->
<!-- MuClient version 4.37 -->

<!-- Plugin "tts_NVDA" generated by Plugin Wizard -->

<muclient>

<plugin
  name="MushReader"
  author="Tyler Spivey, Ruthgul"
  id="925cdd0331023d9f0b8f05a7"
  language="Lua"
  purpose="Plugin for multiple screen readers"
  save_state="y"
  date_written="2009-11-06 17:00:34"
  date_modified="2014-01-03 18:34:40"
  requires="4.60"
  version="1.1"
>

<description trim="y">
<![CDATA[

~ MushReader ~

Keystrokes:
Ctrl + Shift + F12  =  tts

Aliases:
tts
tts_note <text>
tts_interrupt <text>
tts_stop

subst on
subst off
subst list
subst clear
subst add <text1>==<text2>
subst remove <text>

Authors: Tyler Spivey, Ruthgul

Changes added by Ruthgul:
- added this help screen
- modified the code that specifically tried to load Alter Aeon's substitutions
- turned substitutions off by default
- made it use accelerators to add the keystroke, if that plugin is present
- made interrupt() callable from other plugins
- made it compatible with plugins_updater
- gave it a low sequence number, to make it load evaluate than other plugins

]]>

</description>

</plugin>



<aliases>

  <alias
   match="tts_stop"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>stop()
</send>
  </alias>

  <alias
   match="subst *"
   enabled="y"
   script="substfunc"
   sequence="100"
  >
  </alias>

  <alias
   match="tts_interrupt *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>interrupt("%1")
</send>
  </alias>

  <alias
   match="tts_note *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>say("%1")
</send>
  </alias>

  <alias
   match="tts"
   enabled="y"
   group="TTS"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   script="TTSToggle"
   sequence="100"
  >
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^MushReader(|( |\:)help)$"
   regexp="y"
   ignore_case="y"
   script="OnHelp"
   sequence="100"
  >
  </alias>

</aliases>



<!--  Get our standard constants -->

<include name="constants.lua"/>



<script>

<![CDATA[

require "serialize"

tts_enabled = true


-- substitutions

subst = {}
subst.status = 1
subst_path = GetInfo(66) .. "substitutions.mush"


function FileExists(filename)
  local file = io.open(filename)
  if file then
    io.close(file)
    return true
  else
    return false
  end
end


if (FileExists(subst_path) == true) then
  dofile(subst_path)
end


function split(str, pat)
  local t = {}
  local fpat = "(.-)" .. pat
  local last_end = 1
  local s, e, cap = str:find(fpat, 1)
  while s do
    if s ~= 1 or cap ~= "" then
      table.insert(t, cap)
    end
    last_end = e + 1
    s, e, cap = str:find(fpat, last_end)
  end
  if last_end <= #str then
    cap = str:sub(last_end)
    table.insert(t, cap)
  end
  return t
end


function substfunc(n, l, w)
  act = split(w[1], " ")
  if act[1] == "on" then
    subst.status = 1
    tnote("Substitutions on.")
  elseif act[1] == "off" then
    tnote("Substitutions off.")
    subst.status = 0
  elseif (act[1] == "remove") then
    w[1] = string.sub(w[1], 8)
    if subst[w[1]] == nil then
      Note("No substitution found for the entered text.")
    else
      subst[w[1]] = nil
      Note("Substitution removed!")
      Execute("subst save")
    end
  elseif act[1] == "add" then
    wc = split(w[1], "==")
    wc[1] = string.sub(wc[1], 5)
    if wc[2] == nil then
      Note("You must specify a substitution replacement by including 2 equal signs in your command (line==substitute).")
      return
    end
    tnote("OK, substitution added.")
    wc1 = wc[1]
    wc2 = wc[2]
    subst[wc1] = wc2
    Execute("subst save")
  elseif act[1] == "clear" then
    tnote("cleared!")
    subst = {}
    subst.status = 1
    Execute("subst save")
  elseif act[1] == "list" then
    require "tprint"
    tprint(subst)
  elseif act[1] == "save" then
    tnote("Saved!")
    if not (subst == nil) then
      local vars = subst_path
      local exfw = assert(io.open(vars, "w"))
      exfc = serialize.save_simple(subst)
      assert(exfw:write ("subst=" .. exfc))
      exfw:close()
    end
  else
    tnote("Unrecognized substitutions command. Possible commands are: clear, list, add, remove, on, off")
  end
end



-- plugin stuff

function OnPluginInstall()
  assert(package.loadlib("MushReader.dll", "luaopen_audio"))()
  stop()
  say("mush reader initialized")

  Note(GetPluginInfo(GetPluginID(), 1) .. ": type " .. GetPluginInfo(GetPluginID(), 1) .. " help to see info about this plugin")

  if (is_accelerators_present()) then
    add_accelerator("ctrl + shift + f12", "tts", "no")
  else
    Accelerator("ctrl + shift + f12", "tts")
  end
end


function OnPluginTabComplete(word)
  if tts_enabled then
    say(word)
  end
end


function OnHelp()
  world.Note(world.GetPluginInfo(world.GetPluginID(), 3))
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/MushReader.xml",
  }
  return (table.concat(t, ";"))
end


function onLoseFocus()
  tts_enabled = false
  Note("Lost focus!")
end


function onGetFocus()
  tts_enabled = true
  Note("Got focus!")
end



-- read stuff

function say(str)
  nvda.say("       " .. str)
end


function stop()
  nvda.stop()
end


function tnote(what)
  Execute("tts_note " .. what)
end


function interrupt(text)
  if jfwobject and nvda.jaws_running() then
    jfwobject:SayString(text, 1)
  else
    stop()
    say(text)
  end
end


function OnPluginScreendraw(t, log, line)
--  ColourNote("red", "black", "MR: " .. line)
  if not tts_enabled then
    return
  end --tts off
  -- checking for an empty string, or a string composed only of spaces.
  -- If we don't, NVDA says blank.
  if (t == 0 or t == 1) and not line:find("^%s*$") then
    if subst.status == 0 then
      return
    end
    if subst[line] == nil then
      say(line)
    else
      if (subst[line] == "!skip") then
        return
      else
        say(subst[line])
      end
    end
  end
end --function



-- toggle

function TTSToggle(name, line, wc)
  if tts_enabled then
    tts_enabled = false
    stop()
    say("speech off")
  else
    tts_enabled = true
    stop()
    say("speech on")
  end
end



-- interface with accelerators

function is_accelerators_present()
  local plugin_name = GetPluginInfo("f99134f19ea994a0cc0888d1", 1)

  local res = false

  if (plugin_name == "accelerators") then
    if (GetPluginInfo("f99134f19ea994a0cc0888d1", 17)) then
      res = true
    end
  end

  return res
end


function add_accelerator(keystroke, command, override)
  local res, val

  res, val = CallPlugin("f99134f19ea994a0cc0888d1", "add_accelerator", keystroke, command, override)

  if (res ~= 0) then
    val = false
  end

  return val
end


]]>

</script>

</muclient>
