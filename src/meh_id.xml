<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, April 18, 2012, 8:47 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "meh_id" generated by Plugin Wizard -->

<muclient>

<plugin
   name="meh_id"
   author="Ruthgul"
   id="4df60011beba94a6b9e41859"
   language="Lua"
   purpose="subtitles for several things"
   save_state="y"
   date_written="2012-04-18 08:45:49"
   date_modified="2014-01-04 22:38:53"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.----------.
 | meh_id |
`----------'

Names most scrolls, sprigs, mixes, Pendant of Lord Maldra lights, and surveyed locations; shows open worldgates, Wandering Sidhe location.


Notes:

* it will auto-subtitle scrolls, sprigs, mixes, surveyed locations, and Pendant of Lord Maldra lights on sight

* type time with a clock in your inventory, or look at a public clock, to see the wandering sidhe location

* type time to see the open worldgates (if moons are visible)


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Triggers  -->

<triggers>

  <trigger
   enabled="y"
   group="script-mixid"
   ignore_case="y"
   keep_evaluating="y"
   match="*herbal mixture*"
   send_to="12"
   sequence="100"
  >
  <send>mix_id("%0")
</send>
  </trigger>


  <trigger
   enabled="y"
   group="script-scrollid"
   ignore_case="y"
   keep_evaluating="y"
   match="*scroll*"
   send_to="12"
   sequence="100"
  >
  <send>scroll_id("%0")
</send>
  </trigger>


  <trigger
   enabled="y"
   group="script-surveyid"
   ignore_case="y"
   keep_evaluating="y"
   match="^[ ]+(?P&lt;distance&gt;(Right here|Close by|Not far off|A brief walk away|Rather far off|In the distance|Almost out of sight))(| to the (?P&lt;direction&gt;.+))\, you see (?P&lt;survey_string&gt;.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>survey_id("%&lt;distance&gt;", "%&lt;direction&gt;", "%&lt;survey_string&gt;")
</send>
  </trigger>


  <trigger
   group="script-wgs"
   keep_evaluating="y"
   match="^The sun is currently eclipsed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>eclipse = "yes"</send>
  </trigger>


  <trigger
   enabled="y"
   group="script-wgs"
   keep_evaluating="y"
   match="^Trigael\: \((?P&lt;tri&gt;.+?)\)  Marabah\: \((?P&lt;mar&gt;.+?)\)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_wgs("%&lt;tri&gt;", "%&lt;mar&gt;")
</send>
  </trigger>


  <trigger
   enabled="y"
   group="script-wsidhe"
   keep_evaluating="y"
   match="^It is([ \[(Day|Night)\]]*) (?P&lt;hour&gt;.+?)\:(.+?) (?P&lt;ampm&gt;(am|pm)) on (.+?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_wsidhe("%&lt;hour&gt;", "%&lt;ampm&gt;")
</send>
  </trigger>


  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^The Pendant of Lord Maldra shines briefly with a soft (?P&lt;color&gt;.+) light\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_maldra("%&lt;color&gt;")
</send>
  </trigger>


  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^([ ]+|\([ ]*[0-9]+\)) a sprig of (?P&lt;sprig&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_sprig_power("%&lt;sprig&gt;")
</send>
  </trigger>

</triggers>



<!--  Aliases  -->

<aliases>

<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^meh\_id(|(\:| )help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  -- open database on disk
  local path = GetInfo(66)
  local filename = "meh_id.db"

  local res = 0

  if (not file_exists(path .. filename)) then
    local res = get_database(path, filename)

    if (res ~= 0) then
      Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": error downloading database --")
    end
  end

  if (res == 0) then
    db = assert(sqlite3.open(path .. filename))
  end
end


function OnHelp()
  ColourNote("silver", "black", GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/meh_id.xml",
  }
  return (table.concat(t, ";"))
end



-------------------
-- database stuff
-------------------

function dbcheck(code)
 if code ~= sqlite3.OK and    -- no error
    code ~= sqlite3.ROW and   -- completed OK with another row of data
    code ~= sqlite3.DONE then -- completed OK, no more rows
    local err = db:errmsg()   -- the rollback will change the error message
    db:exec("ROLLBACK")       -- rollback any transaction to unlock the database
    error(err, 2)             -- show error in caller's context
  end
end


function fixsql(s)
  if s then
    return "'" .. (string.gsub(s, "'", "''")) .. "'" -- replace single quotes with two lots of single quotes
  else
    return "NULL"
  end
end


function file_exists(path)
  local f = io.open(path, "r")

  if (f) then
    io.close(f)
    return true

  else
    return false
  end
end



----------------------------
-- download database stuff
----------------------------

function get_database(path, filename)
  Note("-- " ..  GetPluginInfo(GetPluginID(), 1) .. ": downloading database --")

  local res = 0
  local url = "raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/" .. filename

  SetStatus ("Downloading file: " .. url .. " to: " .. path .. filename .. "...")

  res = res + download_file(url, path .. filename)

  SetStatus ("Ready")
  return res
end


function download_file(url, lpath)
  local http = require "socket.http"
  local file, res, header
  file, res, header = http.request(url)
  if (res ~= 200) then
    Note("error accessing " .. url .. " - code: " .. res)
    return -1
  end

  res = save_file(lpath, file)
  return res
end


function save_file(lpath, file)
  local f, res, rescode

  -- (re)create the file
  f, res, rescode = io.open(lpath, "wb")
  if (f == nil) then
    Note("error creating file: " .. res .. " - code: " .. rescode)
    return -1
  end

  -- save the contents
  f:write(file)
  f:flush()
  f:close()

  return 0
end



----------
-- mixes
----------

function mix_id(line)
  if (db) then
    for row in db:nrows(string.format("SELECT * FROM mixes")) do
      if (string.find(string.lower(line), row.color, 0, true) ~= nil) then
        Note("(" .. row.spell .. ")")
        break
      end
    end
  end
end



------------
-- scrolls
------------

function scroll_id(line)
  if (db) then
    local scroll

    for row in db:nrows(string.format("SELECT * FROM scrolls")) do
      scroll = string.gsub(row.color, "%-", "%%-")
      if (string.find(string.lower(line), scroll)) then
        if (string.find(string.lower(line), "a swamp green scroll covered with pus")) then
          Note("(pustulate)")
        else
          Note ("(" .. row.spell .. ")")
        end
        break
      end
    end

    if (not scroll) then
      Note("")
    end
  end
end



-----------
-- survey
-----------

distances = {
  ["Right here"] = "0-3",
  ["Close by"] = "4-11",
  ["Not far off"] = "12-26",
  ["A brief walk away"] = "27-41",
  ["Rather far off"] = "42-61",
  ["In the distance"] = "62-81",
  ["Almost out of sight"] = "82-101",
}


short_dir = {
  ["north"] = "N",
  ["northeast"] = "NE",
  ["east"] = "E",
  ["southeast"] = "SE",
  ["south"] = "S",
  ["southwest"] = "SW",
  ["west"] = "W",
  ["northwest"] = "NW",
  ["up"] = "U",
  ["down"] = "D",
}


function survey_id(distance, direction, survey_string)
  if (db) then
    local location

    for row in db:nrows(string.format("SELECT * FROM survey")) do
      if (row.desc == survey_string) then
        location = row.place
        break
      end
    end

    if (not location) then
      location = "?????"
    end

    if (location) then
      distance = distances[distance]
      if (direction ~= "") then
        direction = short_dir[direction]
      end

      if (distance) and (direction) then
        if (direction ~= "") then
          Note("(" .. distance .. " rooms to the " .. direction .. ": " .. location .. ")")

        else
          Note("(" .. distance .. " rooms away: " .. location .. ")")
        end
      end
    end
  end
end



--------------------
-- wandering sidhe
--------------------

wsidhe = {
  "irda",     -- 00:00
  "rahdiyr",  -- 04:00
  "arcane",   -- 08:00
  "lowangen", -- 12:00
  "rune",     -- 16:00
  "sigil"     -- 20:00
}

function show_wsidhe(hour, ampm)
  local hour = tonumber(hour)
  if (ampm == "pm") and (hour ~= 12) then
    hour = hour + 12
  elseif (ampm == "am") and (hour == 12) then
    hour = 0
  end

  local i = math.modf (hour / 4) + 1

  local where = wsidhe[i]
  local next
  if (i < 6) then
    next = wsidhe[i+1]
  else
    next = wsidhe[1]
  end

  Note("wandering sidhe is in: " .. where .. " - next stop: " .. next)
end



---------------
-- worldgates
---------------

function show_wgs(tri, mar)
  if (eclipse == "yes") then
    Note("Open worldgates: Rune - Ethereal Void")
    eclipse = nil

  elseif (db) then
    local wgs

    for row in db:nrows(string.format("SELECT * FROM worldgates WHERE trigael = %s AND marabah = %s", fixsql(tri), fixsql(mar))) do
      wgs = row.wgs
    end

    if (wgs) then
      Note("Open worldgates: " .. wgs)
    end
  end
end



---------------------------
-- Pendant of Lord Maldra
---------------------------

maldra_pendant = {
  ["amber"] = "something is buried",
  ["indigo"] = "illusionary exit",
  ["ochre"] = "something is hidden",
  ["purple"] = "buried exit",
  ["violet"] = "hidden or pass-through exit",
}

function show_maldra(color)
  Note("(" .. maldra_pendant[color] .. ")")
end


----------------
-- sprig power
----------------

function show_sprig_power(sprig)
  if (db) then
    local power

    for row in db:nrows(string.format("SELECT * FROM sprigs WHERE sprig = %s", fixsql(sprig))) do
      power = row.power
      break
    end

    if (power) then
      Note("(power: " .. power .. ")")
    end
  end
end


]]>

</script>

</muclient>
