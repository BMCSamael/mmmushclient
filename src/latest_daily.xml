<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, August 24, 2011, 7:17 AM -->
<!-- MuClient version 4.73 -->

<!-- Plugin "latest_daily" generated by Plugin Wizard -->

<muclient>

<plugin
   name="latest_daily"
   author="Ruthgul"
   id="29aff4e19e96d79f40ffcbd6"
   language="Lua"
   purpose="Shows you the time when you collected your latest daily rewards."
   save_state="y"
   date_written="2011-08-24 07:15:00"
   date_modified="2014-04-11 09:06:52"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.----------------.
 | latest_daily |
`----------------'

Shows you the time when you collected your latest daily rewards.


** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- detect_globals (plugin id="d900cb999816b1f6f2d4bdc5") must be installed and enabled.
- global_vars (plugin id="97784abf5f30629a0d7e7307") must be installed and enabled.


Syntax:

* daily  - shows the date/time of latest dailies

* daily totals  - shows global daily stats
* daily subtotals <city>  - shows daily stats for a particular city

* daily reset stats  - resets the above stats


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

<!-- date / time -->

  <alias
   enabled="y"
   match="^daily$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  show_dailies()
else
  plugin_not_initialized()
end
</send>
  </alias>


<!-- stats -->

  <alias
   enabled="y"
   match="^daily reset stats$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  reset_stats()
else
  plugin_not_initialized()
end
</send>
  </alias>

  <alias
   enabled="y"
   match="^daily totals$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  show_stats("totals")
else
  plugin_not_initialized()
end
</send>
  </alias>

  <alias
   enabled="y"
   match="^daily subtotals (?&lt;city&gt;(New Rigel|Sigil|Tellerium|Xaventry))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  show_stats("%&lt;city&gt;")
else
  plugin_not_initialized()
end
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^latest\_daily(|( |\:)help)$"
   regexp="y"
   ignore_case="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>


<!-- save a daily -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^A representative from the (.+) Tourism Board nods at you\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>reset_bj_vouchers()
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^A representative from the (?P&lt;place&gt;.+) Tourism Board gives you (?P&lt;item&gt;.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>save_daily("%&lt;place&gt;")
update_stats("%&lt;place&gt;", "%&lt;item&gt;")
set_unique_countdown(24, 0, 0, "%&lt;place&gt; daily reward", "latest_daily plugin")
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "serialize"
require "wait"


-----------
-- plugin
-----------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID (), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID (), 1) .. " help")
    Note(" to see info about this plugin --")

    EnableTrigger("first_prompt", true)
    name = nil

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginConnect()
  EnableTrigger("first_prompt", true)
  name = nil
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  meh_timers_present = meh_timers_plugin_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo (GetPluginID(), 14)) .. ")")
end


function plugin_not_initialized()
  Note("-- " .. GetPluginInfo(GetPluginID (), 1) .. ": plugin initialization unfinished --")
  Note("please wait 5 seconds and try again")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/latest_daily.xml",
  }
  return (table.concat(t, ";"))
end



------------
-- general
------------

function capitalize(name)
  if (not name) then
    return
  end

  if (name == "") then
    return ""
  end

  local tname = utils.split(string.lower(name), " ")

  for i = 1, #tname do
    local c = string.upper(string.sub(tname[i], 1,  1))

    if (string.len(name) == 1) then
      tname[i] = c

    else
      tname[i] = c .. string.sub(tname[i], 2, string.len(tname[i]))
    end
  end

  local res = table.concat(tname, " ")

  return res
end


function get_global_var(name)
  local res, val

  res, val = CallPlugin("97784abf5f30629a0d7e7307", "get_global_var", name)

  if (res ~= 0) then
    val = nil
  end

  return val
end


function find_index(t, item)
  local res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end



---------
-- name
---------

function on_first_prompt()
  wait.make(function()
    EnableTrigger("first_prompt", false)

    -- give the plugins time to initialize
    wait.time(3)

    do_get_name()
  end)
end


function OnPluginBroadcast(msg, id, pname, text)
  if (id =="97784abf5f30629a0d7e7307")
  and (pname == "global_vars") then -- global_vars
    if (msg == 1) and (text == "name") then
      -- name broadcasted
      do_get_name()
    end
  end
end


function do_get_name()
  name = get_global_var("name")

  if (name) then
    load_stats()
  end
end



-------------------------
-- dailies, date + time
-------------------------

function save_daily(place)
  if (name) then
    place = string.gsub(string.lower(place), " ", "_")
    SetVariable(name .. "_" .. place, os.time())
    SaveState()

  else
    plugin_not_initialized()
  end
end


local places = { "new_rigel", "sigil", "tellerium", "xaventry" }


function show_dailies()
  Note("-- Latest daily rewards --")

  local place, when

  for i = 1, #places do
    place = places[i]
    when = get_time(place)

    Tell("* " .. capitalize(string.gsub(place, "_", " ")) .. ": ")

    ColourTell("silver", "black", time_as_string(when))

    if ((when) and ((when + (24 * 60 * 60)) <= os.time()))
    or (not when) then
      ColourNote("lime", "black", " *")
    else
      Note("")
    end
  end
end


function get_time(place)
  local time = GetVariable(name .. "_" .. place) or "-"

  if (tonumber(time)) then
    time = tonumber(time)

  else
    local ttime = {}

    ttime.month, ttime.day, ttime.year, ttime.hour, ttime.min, ttime.sec = string.match(time, "(%d+)/(%d+)/(%d+) (%d+):(%d+):(%d+)")

    if (ttime.year) then
      ttime.year = 2000 + tonumber(ttime.year)
      ttime.month = tonumber(ttime.month)
      ttime.day = tonumber(ttime.day)
      ttime.hour = tonumber(ttime.hour)
      ttime.min = tonumber(ttime.min)
      ttime.sec = tonumber(ttime.sec)

      time = os.time(ttime)

    else
      time = nil
    end
  end

  return time
end


function time_as_string(when)
  local whenstr

  if (when) then
    whenstr = os.date("%Y-%m-%d %X", when)
  else
    whenstr = "(never)"
  end

  return whenstr
end



-------------------
-- dailies, stats
-------------------

function load_stats()
  if (name) then
    daily_totals = {}
    dailies_per_city = {}

    assert(loadstring(GetVariable(name .. "_daily_totals") or ""))()
    assert(loadstring(GetVariable(name .. "_dailies_per_city") or ""))()

    stats_since = GetVariable(name .. "_daily_stats_since")
  end
end


function save_stats()
  if (name) then
    SetVariable(name .. "_daily_totals", "daily_totals = " .. serialize.save_simple(daily_totals or ""))

    SetVariable(name .. "_dailies_per_city", "dailies_per_city = " .. serialize.save_simple(dailies_per_city or ""))

    if (not stats_since) then
      stats_since = os.time()
    end

    SetVariable(name .. "_daily_stats_since", stats_since)

    SaveState()
  end
end


function reset_stats()
  if (name) then
    DeleteVariable(name .. "_daily_totals")
    DeleteVariable(name .. "_dailies_per_city")
    DeleteVariable(name .. "_daily_stats_since")

    daily_totals = {}
    dailies_per_city = {}

    stats_since = nil

    SaveState()
  end
end


function reset_bj_vouchers()
  got_bj_vouchers = {}
end


function update_stats(where, what)
  if (name) then
    if (not daily_totals) or (not dailies_per_city) then
      load_stats()
    end

    local where = Trim(where)
    local what = Trim(what)

    if (where) and (what) then
      what = shorten_item_name(what)

      if (what) then
        -- add to totals and subtotals
        daily_totals[what] = (daily_totals[what] or 0) + 1

        if (not dailies_per_city[where]) then
          dailies_per_city[where] = {}
        end

        dailies_per_city[where][what] = (dailies_per_city[where][what] or 0) + 1
      end
    end

    save_stats()
  end
end


function shorten_item_name(what)
  -- shorten stuff
  if (string.find(what, "a blackjack voucher notated")) then
    what = string.match(what, "a blackjack voucher notated with a little '(.+)'")
    what = "blackjack vouchers x " .. what .. " gp"

    if (got_bj_vouchers[what]) then
      what = nil
    else
      got_bj_vouchers[what] = "x"
    end

  elseif (string.find(what, "Building Points voucher")) then
    what = string.match(what, "a (.+) Building Points voucher")
    what = "a voucher x " .. what .. " bp"

  elseif (string.find(what, "a chipped orb of Vandemaar")) then
    what = "a chipped orb"

  elseif (string.find(what, "a decorative plate depicting")) then
    what = "a decorative plate"

  elseif (string.find(what, "a fragment of an orb of Vandemaar")) then
    what = "a fragment of an orb"

  elseif (string.find(what, "a garish coupon from Tad Thaodoara")) then
    what = "a garish coupon"

  elseif (string.find(what, "an IOU on Bazaar stationery")) then
    what = string.match(what, "an IOU on Bazaar stationery for (.+) gold")
    what = "a bazaar IOU x " .. what .. " gp"

  elseif (string.find(what, "a manual of")) then
    what = "a manual"

  elseif (string.find(what, "a non%-existent payroll stub")) then
    what = string.match(what, "a non%-existent payroll stub with a scribbled '(.+)' at the bottom")
    what = "a payroll stub x " .. what .. " gp"

  elseif (string.find(what, "plushie$")) then
    what = "a plushie"

  elseif (string.find(what, "a stamp commemorating")) then
    what = "a stamp"
  end

  return what
end


function show_stats(where)
  if (name) then
    if (not daily_totals) or (not dailies_per_city) then
      load_stats()
    end

    local t

    if (where == "totals") then
      t = daily_totals
    else
      t = dailies_per_city[where]
    end

    -- calc %s
    local total = 0
    local totals_per_percent = {}
    local percents = {}

    for what, amount in pairs(t) do
      total = total + amount

      if (not totals_per_percent[amount]) then
        totals_per_percent[amount] = what
      else
        totals_per_percent[amount] = totals_per_percent[amount] .. ", " .. what
      end

      if (not find_index(percents, amount)) then
        percents[#percents + 1] = amount
      end
    end

    -- sort results
    table.sort(percents)

    -- show results
    Tell("Totals since " .. os.date("%x %X", stats_since))

    if (where ~= "totals") then
      Tell(" for " .. where)
    end

    Note(", sorted by %: ")

    for i = #percents, 1, -1 do
      ColourTell("silver", "black", string.format("%5.1f", percents[i] * 100 / total) .. "%")
      Tell(" :  ")
      ColourNote("silver", "black", totals_per_percent[percents[i]])
    end
  end
end



------------------------------
-- interface with meh_timers
------------------------------

function set_unique_countdown(hh, mm, ss, text, owner)
  if (meh_timers_present) then
    local res = CallPlugin("a11c9d4e484b5fc428a49941", "set_unique_countdown", hh, mm, ss, text, owner)
    nagged = false

  else
    if (not nagged) then
      ColourNote("tomato", "black", "-- quests - warning: meh_timers not installed / enabled! --")

      nagged = true
    end
  end
end


function meh_timers_plugin_present()
  return is_plugin_present("meh_timers", "a11c9d4e484b5fc428a49941")
end


]]>

</script>

</muclient>
