<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, August 24, 2011, 7:36 AM -->
<!-- MuClient version 4.73 -->

<!-- Plugin "affects_by_name" generated by Plugin Wizard -->

<muclient>

<plugin
   name="affects_by_name"
   author="Ruthgul"
   id="6010f6bda5ebf2210998613d"
   language="Lua"
   purpose="Subtitles affects. Not all of them. :x"
   date_written="2011-08-24 07:35:19"
   date_modified="2020-10-01 10:22:11"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.-------------------.
 | affects_by_name |
`-------------------'

- Adds names for most buffs/debuffs as they are resisted/land/deal damage on tick/are dispelled/wear off/etc.

- It doesn't show names for positive affects "landing" (eg, when you successfully cast shadow armor).

- It works passively.


** REQUIRES **

- Client setting: Game, Configure, Output > [x] Convert IAC EOR/GA to new line (must be checked).
- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled (to detect affect applications).
- Game settings: SHOW-AFFECT-SPOILERS must be ON (to detect affects turning off).


** HELP NEEDED **

This plugin is missing stuff for classes I haven't played yet (witch, ranger, bard, etc.), and some older stuff which I haven't been able to figure out yet.

If you find an affect that isn't included in this plugin, or should be moved to a different category, please send Ruthgul a tell, or a parchment (including the full string and what it does, if possible), and I'll update the plugin.


Author: Ruthgul


Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

</variables>



<!--  Triggers  -->

<triggers>

<!-- generic spelloff capture -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="\[Off\: You lose (?<spell>.+)\] (?<text>.+)\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_generic_off"
  >
  </trigger>

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="\[Off\: (?<who>(@!char_name)) loses (?<spell>.+)\] (?<text>.+)\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_generic_off"
  >
  </trigger>


<!-- special cases -->

<!-- siphon, timepieces ... are they still needed? -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name)( has siphoned the spell effect of|(|\'s) (the legendary timepiece \'(.+)\'|Redemption from the Darkness) glows brightly as it strips) \'(?<spell>.+)\' (from|off of) (?<who>.+)\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_siphon_or_tpdispel"
  >
  </trigger>

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)\, the Archon Hunter) focuses\, purging \'(?<spell>.+)\' from (her|him)self with a roar\!$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_siphon_or_tpdispel"
  >
  </trigger>

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name)\, the Archon Hunter\'s magic goes haywire\, tearing \'(?<spell>.+)\' from you\!$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_siphon_or_tpdispel"
  >
  </trigger>


<!-- blindness -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   match="^(A brilliant flare of white light erupts in front of|(A dense black|Black) smoke(| rises from nowhere and) swirls (in front of|about)) (?<who>.+)(\'s eyes\, but (.+) shuts them just in time|\, but nothing else seems to happen)\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_blindness_resist"
  >
  </trigger>

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) totters suddenly\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_disrupt_sight_resist"
  >
  </trigger>


<!-- curse -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) glows with a dark crimson aura that swiftly vanishes\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_curse_resist"
  >
  </trigger>


<!-- energy orb -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   match="^Electrical energy pulses(| and arcs) through(|out) your body\!$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_energy_orb_tick"
  >
  </trigger>

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   match="^Electrical energy pulses(| and arcs) through(|out) (?<who>.+)\'s body\!$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_energy_orb_tick"
  >
  </trigger>


<!-- extinction -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   match="^You turn pale(| and shudder) as dark magic burns away some of your life force\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_extinction_tick"
  >
  </trigger>

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) turns pale and shudders\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_extinction_tick"
  >
  </trigger>


<!-- hex -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) glows with an ominous crimson aura\, but it fades too quickly\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_hex_resist"
  >
  </trigger>


<!-- jinx -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) glows with a malevolent mauve aura\, but it fades too quickly\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_jinx_resist"
  >
  </trigger>


<!-- malignancy -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   match="^A sickly glow surges around (?<who>.+) only to fade out of existence just as quick\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_malignancy_resist"
  >
  </trigger>


<!-- mental disruption - needs strings -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="(?<who>(@!char_name)) staggers suddenly."
   omit_from_output="y"
   sequence="100"
   script="on_mental_disruption_resist"
  >
  </trigger>


<!-- plague -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) seems to resist (.+) magical plague\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_plague_resist"
  >
  </trigger>


<!-- poison -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   match="^A noxious cloud of green gas swirls from (.+) fingertips to (?<who>.+) for a moment\, but nothing else seems to happen\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_poison_resist"
  >
  </trigger>


<!-- slow ... needs to be separated from hinder, help required -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) seems to resist your enchantment\!$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_slow_resist"
  >
  </trigger>


<!-- soothing nocturne - needs strings -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) falters momentarily\, as though distracted by the soothing song$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_soothing_nocturne_resist"
  >
  </trigger>


<!-- web - needs new mesmerize wear off strings -->

  <trigger
   enabled="y"
   group="affects"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?<who>(@!char_name)) (dodges out of the way of your vines|manages to brush the spiders off (him|her) just in time)\!$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   script="on_web_resist"
  >
  </trigger>

</triggers>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^clear events$"
   regexp="y"
   sequence="100"
   script="clear_events"
  >
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^affects\_by\_name(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

debug = false

require "wait"
require "gmcphelper"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  use_sapi = sapi_plugin_present()
  reader_present = reader_plugin_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/affects_by_name.xml",
  }
  return (table.concat(t, ";"))
end


---------------
-- GMCP stuff
---------------

function OnPluginBroadcast(msg, id, name, text)
  if (id =="f67c4339ed0591a5b010d05b") then -- GMCP message
    if (text == "char.affect_application_msg") then
      on_gmcp_generic_on()
    elseif (text == "char.affect_removal_msg") then
      on_gmcp_generic_off()
    end
  end
end


function on_gmcp_generic_on()
  get_affect_application()
  who = gmcpval("target")
  spell = gmcpval("skill"):upper()
  categorize_and_show_affect("", who, spell, "on")
end


function on_gmcp_generic_off()
  get_affect_application()
  who = gmcpval("target")
  spell = gmcpval("skill"):upper()
  categorize_and_show_affect("", who, spell, "off")
end


function get_affect_application()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char.affect_application_msg")
  luastmt = "gmcpdata = " .. gmcparg
  assert(loadstring(luastmt or ""))()
end



---------------------
-- general captures
---------------------

function on_generic_off(name, line, wildcards)
  local who = wildcards.who or "you"
  local spell = wildcards.spell
  local text = wildcards.text
  categorize_and_show_affect(text, who, spell, "off")
end


function categorize_and_show_affect(line, who, spell, onoff)
  local affect = spell .. " " .. onoff
  if (is_lethal(affect, who)) then
    show_lethal_stuff(who, affect, line)
  elseif (is_critical(affect, who)) then
    show_critical_stuff(who, affect, line)
  elseif (is_handicap(affect, who)) then
    show_handicap_stuff(who, affect, line)
  elseif (is_important(affect, who)) then
    show_important_stuff(who, affect, line)
  else
    show_other_stuff(who, affect, line)
  end
end


t_lethal_stuff = {
  ["fire invocation off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["sanctuary off"] = {
    ["self"] = true,
    ["others"] = true,
  },
}
function is_lethal(affect, who)
  return is_category(t_lethal_stuff, affect, who)
end


t_critical_stuff = {
  ["energy orb on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["extinction on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["paralysis on"] = {
    ["self"] = true,
    ["others"] = true,
  },
}
function is_critical(affect, who)
  return is_category(t_critical_stuff, affect, who)
end


t_handicap_stuff = {
  ["blindness on"] = {
    ["self"] = true,
  },
  ["confusion on"] = {
    ["self"] = true,
  },
  ["deafen on"] = {
    ["self"] = true,
  },
  ["disrupt sight on"] = {
    ["self"] = true,
  },
  ["earth evocation on"] = {
    ["self"] = true,
  },
  ["etheric pollution on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["hinder magic on"] = {
    ["self"] = true,
  },
  ["mental disruption on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["mesmerize on"] = {
    ["self"] = true,
  },
  ["pestilence on"] = {
    ["self"] = true,
  },
  ["silence on"] = {
    ["self"] = true,
  },
  ["sleep on"] = {
    ["self"] = true,
  },
  ["sleep on"] = {
    ["self"] = true,
  },
  ["slow magic on"] = {
    ["self"] = true,
  },
  ["smoke evocation on"] = {
    ["self"] = true,
  },
  ["stone curse on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["web on"] = {
    ["self"] = true,
  },
}
function is_handicap(affect, who)
  return is_category(t_handicap_stuff, affect, who)
end


t_important_stuff = {
  ["aegis off"] = {
    ["self"] = true,
  },
  ["air invocation off"] = {
    ["self"] = true,
  },
  ["armor off"] = {
    ["self"] = true,
  },
  ["ash invocation off"] = {
    ["self"] = true,
  },
  ["augment aura off"] = {
    ["self"] = true,
  },
  ["blindness on"] = {
    ["others"] = true,
  },
  ["blindness off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["bubble cluster off"] = {
    ["self"] = true,
  },
  ["combat blink off"] = {
    ["self"] = true,
  },
  ["detect illusion off"] = {
    ["self"] = true,
  },
  ["detect invisibility off"] = {
    ["self"] = true,
  },
  ["disrupt sight on"] = {
    ["others"] = true,
  },
  ["disrupt sight off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["dust invocation off"] = {
    ["self"] = true,
  },
  ["earth evocation on"] = {
    ["others"] = true,
  },
  ["earth evocation off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["elemental shield off"] = {
    ["self"] = true,
  },
  ["etheric pollution off"] = {
    ["self"] = true,
  },
  ["float off"] = {
    ["self"] = true,
  },
  ["force field off"] = {
    ["self"] = true,
  },
  ["haste off"] = {
    ["self"] = true,
  },
  ["hinder on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["hinder off"] = {
    ["others"] = true,
  },
  ["hinder magic on"] = {
    ["others"] = true,
  },
  ["hinder magic off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["ice invocation off"] = {
    ["self"] = true,
  },
  ["improved invisibility off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["invisibility off"] = {
    ["self"] = true,
  },
  ["irritation"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["irritation off"] = {
    ["others"] = true,
  },
  ["lava walk off"] = {
    ["self"] = true,
  },
  ["levitation off"] = {
    ["self"] = true,
  },
  ["lightning invocation off"] = {
    ["self"] = true,
  },
  ["memory drain on"] = {
    ["self"] = true,
  },
  ["mesmerize on"] = {
    ["others"] = true,
  },
  ["mesmerize off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["mind shield off"] = {
    ["self"] = true,
  },
  ["ooze invocation off"] = {
    ["self"] = true,
  },
  ["phalanx off"] = {
    ["self"] = true,
  },
  ["plague on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["plague off"] = {
    ["others"] = true,
  },
  ["poison on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["poison off"] = {
    ["others"] = true,
  },
  ["radiance invocation off"] = {
    ["self"] = true,
  },
  ["shadow armor off"] = {
    ["self"] = true,
  },
  ["shape shifting off"] = {
    ["self"] = true,
  },
  ["shield off"] = {
    ["self"] = true,
  },
  ["silence on"] = {
    ["others"] = true,
  },
  ["silence off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["sleep off"] = {
    ["self"] = true,
  },
  ["slow on"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["slow off"] = {
    ["others"] = true,
  },
  ["slow magic on"] = {
    ["others"] = true,
  },
  ["slow magic off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["smoke invocation off"] = {
    ["self"] = true,
  },
  ["stone skin off"] = {
    ["self"] = true,
  },
  ["telekinetic shield off"] = {
    ["self"] = true,
  },
  ["underwater breathing off"] = {
    ["self"] = true,
  },
  ["water invocation off"] = {
    ["self"] = true,
  },
  ["web on"] = {
    ["others"] = true,
  },
  ["web off"] = {
    ["self"] = true,
    ["others"] = true,
  },
  ["whirlwind off"] = {
    ["self"] = true,
  },
}
function is_important(affect, who)
  return is_category(t_important_stuff, affect, who)
end


function is_category(t, affect, who)
  local target = "others"
  if (who == "you") then
    target = "self"
  end
  local item = t[affect:lower()]
  if (item) then
    return item[target]
  else
    return false
  end
end



---------------------
-- special captures
---------------------

function on_siphon_or_tpdispel(name, line, wildcards)
  local who = wildcards.who or "you"
  local spell = wildcards.spell

  categorize_and_show_affect(line, who, spell, "off")
end


function on_blindness_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "BLINDNESS resisted", line)
end


function on_curse_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "CURSE resisted", line)
end


function on_disrupt_sight_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "DISRUPT SIGHT resisted", line)
end


function on_energy_orb_tick(name, line, wildcards)
  local who = wildcards.who or "you"
  show_critical_stuff(who, "ENERGY ORB tick", line)
end


function on_extinction_tick(name, line, wildcards)
  local who = wildcards.who or "you"
  show_critical_stuff(who, "EXTINCTION tick", line)
end


function on_hex_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "HEX resisted", line)
end


function on_jinx_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "JINX resisted", line)
end


function on_malignancy_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "MALIGNANCY resisted", line)
end


function on_mental_disruption_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "MENTAL DISRUPTION resisted", line)
end


function on_plague_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "PLAGUE resisted", line)
end


function on_poison_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "POISON resisted", line)
end


function on_slow_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "SLOW resisted", line)
end


function on_soothing_nocturne_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "SOOTHING NOCTURNE resisted", line)
end


function on_web_resist(name, line, wildcards)
  local who = wildcards.who
  show_other_stuff(who, "WEB resisted", line)
end



-------------------------------------------
-- show specific stuff, by type of affect
-------------------------------------------

function show_other_stuff(who, subtitle, line)
  -- colors we'll use to show it
  local fgcolor = "blue"
  local bgcolor = "black"

  show_affect(who, fgcolor, bgcolor, subtitle, line)
end


function show_important_stuff(who, subtitle, line)
  -- an affect that I can/should do something about (re-cast, re-equip, cure, etc.)
  -- an affect that is ok to land on opponents (eg, blindness, poison), but is bad on form members

  -- colors we'll use to show it
  local fgcolor = "white"
  local bgcolor = "mediumblue"

  show_affect(who, fgcolor, bgcolor, subtitle, line)
end


function show_handicap_stuff(who, subtitle, line)
  -- an affect that disables me somehow (eg, silence, paralysis, sleep, slow), and there's nothing I can do about it

  -- colors we'll use to show it
  local fgcolor = "white"
  local bgcolor = "dimgray"

  show_affect(who, fgcolor, bgcolor, subtitle, line)
end


function show_critical_stuff(who, subtitle, line)
  -- an affect that needs full attention (eg, extinction, paralysis on form members, energy orb)

  -- colors we'll use to show it
  local fgcolor = "white"
  local bgcolor = "green"

  show_affect(who, fgcolor, bgcolor, subtitle, line)
end


function show_lethal_stuff(who, subtitle, line)
  -- an affect LOSS that can kill us if we don't take care of it (eg, sanctuary off!)

  -- colors we'll use to show it
  local fgcolor = "white"
  local bgcolor = "red"

  show_affect(who, fgcolor, bgcolor, subtitle, line)
end



------------
-- general
------------

function show_affect(who, fgcolor, bgcolor, subtitle, line)
  if (not reader_present) then
    -- if MushReader isn't present, show subtitles + the affects line
    if (string.lower(who) ~= "you") then
      ColourTell("whitesmoke", "black", who .. ": ")
    end

    ColourTell(fgcolor, bgcolor, subtitle)
    ColourTell("darkgray", "black", " > ")
    if (line) and (line ~= "") then
      ColourNote("silver", "black", line)
    end

  else
    -- if MushReader is present, SAPI say the subtitles
    local txt = ""
    if (string.lower(who) ~= "you") then
      txt = who .. ": "
    end
    txt = txt .. subtitle

    if (who == "you") and (fgcolor == "white") and (bgcolor == "red") then
    -- lethal stuff, so we need to inform immediately
      local res = sapi_interrupt(txt)

      if (res ~= 0) then
      -- speak_interrupt() not present in the plugin
        sapi_say(txt)
      end

    else
      sapi_say(txt)
    end
  end

  -- add to events mini, if it's present
  add_to_events_world(who, fgcolor, bgcolor, subtitle)

  -- broadcast the info, for events_mini and similar plugins
  local t = {
    [1] = who,
    [2] = fgcolor,
    [3] = bgcolor,
    [4] = subtitle,
  }
  BroadcastPlugin(1, table.concat(t, ";"))

  if (debug)
  and ((string.find(subtitle, "off"))
  or (string.find(subtitle, "tick"))) then
    AppendToNotepad("tick", "\r\n[" .. os.date("%H:%M:%S") .. "] " .. subtitle .. " ", "\r\n")
  end
end



-----------------------
-- events world stuff
-----------------------

function add_to_events_world(who, fgcol, bgcol, subtitle)
  local events = GetWorld("events")
  -- gotta check every time in case they close it

  if (events) then
    if (string.lower(who) ~= "you") then
      events:ColourTell("silver", "black", who .. ": ")
    end

    --events:ColourNote(fgcol, bgcol, subtitle)
    events:ColourNote("silver", "black", subtitle)
  end
end


function clear_events()
  local events = GetWorld("events")
  if (events) then
    events:DeleteOutput()
    events:Pause(false)
  end
end



------------------------
-- sapi / reader stuff
------------------------

function sapi_say(text)
  local res

  if (use_sapi) then
    res = CallPlugin("463242566069ebfd1b379ec1", "say", text)
  end

  return res
end


function sapi_interrupt(text)
  local res

  if (use_sapi) then
    res = CallPlugin("463242566069ebfd1b379ec1", "speak_interrupt", text)
  end

  return res
end


function sapi_plugin_present()
  return is_plugin_present("Sapi_speaker", "463242566069ebfd1b379ec1") or is_plugin_present("Text_To_Speech", "463242566069ebfd1b379ec1")
end


function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end


]]>

</script>

</muclient>
