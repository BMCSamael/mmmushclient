<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on July 31, 2024, 6:48 AM -->
<!-- MuClient version 4.91 -->

<!-- Plugin "mosaicsolver" generated by Plugin Wizard -->

<muclient>

<plugin
   name="mosaicsolver"
   author="Tamlin"
   id="0d85c0ab3ab1503d1eb12345"
   language="Lua"
   purpose="Solver for the Mosaic Sentry House Puzzle"
   date_written="2024-07-31 06:47:39"
   date_modified="2024-07-31 18:52:02"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

~ Mosaic Sentry ~

Solver for the SUG Mosaic House Puzzle 


Syntax:

* mosaic <initial state> 


Authors: Tamlin

]]>

</description>

</plugin>

<!--  Aliases  -->

<aliases>

  <alias
   match="^mosaic[ ]+(?<istate>[a-zA-Z0-9 \,\.\'\-]+)"
   enabled="y"
   regexp="y"
   sequence="100"
   script="OnPluginCommand"
  >
  </alias>
  
  <alias
   enabled="y"
   match="^mosaic( |\:)help$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>

<script>

<![CDATA[

-----------------
-- plugin stuff
-----------------
function OnPluginInstall()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type " .. GetPluginInfo(GetPluginID(), 1) .. " help to see info about this plugin --")
end

function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end

function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/BMCSamael/mmmush_vi/master/src/mosaicsolver.xml",
  }
  return (table.concat(t, ";"))
end

-----------------
-- puzzle solver
-----------------

function toggle_switches(state, button, toggle_map)
    local new_state = {}
    for i = 1, #state do
        new_state[i] = state[i]
    end
    for _, switch in ipairs(toggle_map[button].switches) do
        new_state[switch] = 1 - new_state[switch]
    end
    return new_state
end

function is_solved(state)
    for _, s in ipairs(state) do
        if s == 0 then
            return false
        end
    end
    return true
end

function find_solution(initial_state, toggle_map)
    local queue = {{initial_state, {}}}
    local visited = {}
    local function state_to_string(state)
        return table.concat(state, "")
    end
    visited[state_to_string(initial_state)] = true
    
    while #queue > 0 do
        local current_state, path = unpack(table.remove(queue, 1))
        
        if is_solved(current_state) then
            return path
        end
        
        for button in pairs(toggle_map) do
            local new_state = toggle_switches(current_state, button, toggle_map)
            local new_state_str = state_to_string(new_state)
            if not visited[new_state_str] then
                visited[new_state_str] = true
                local new_path = {unpack(path)}
                table.insert(new_path, {toggle_map[button].room, button})
                table.insert(queue, {new_state, new_path})
            end
        end
    end
    return nil
end


function OnPluginCommand(name, line, wildcards)
    if not wildcards then
        return
    end

    local input = wildcards.istate
    if not input then
        ColourNote("red", "", "Error: No input state provided.")
        return
    end

    -- Debugging: Show the input state
    ColourNote("blue", "", "Input state: " .. input)

    -- Ensure the initial state is exactly 10 elements
    if #input ~= 10 then
        ColourNote("red", "", "Invalid initial state. Please provide exactly 10 binary digits.")
        return
    end

    local initial_state = {}
    for i = 1, #input do
        initial_state[i] = tonumber(input:sub(i, i))
    end

    -- Debugging: Show the initial state array
    ColourNote("blue", "", "Initial state array: " .. table.concat(initial_state, ", "))

    local toggle_map = {
        [1] = {room = 80802, switches = {2}},  -- Button 1 in room 80802 toggles switch 2
        [2] = {room = 80806, switches = {2, 4, 6}},  -- Button 2 in room 80806 toggles switches 2, 4, 6
        [3] = {room = 80785, switches = {7, 8}},  -- Button 3 in room 80785 toggles switches 7 and 8
        [4] = {room = 80805, switches = {1, 3, 4}},  -- Button 4 in room 80805 toggles switches 1, 3, and 4
        [5] = {room = 80792, switches = {3, 7}},  -- Button 5 in room 80792 toggles switches 3 and 7
        [6] = {room = 80795, switches = {9}},  -- Button 6 in room 80795 toggles switch 9
        [7] = {room = 80797, switches = {4, 6, 9}},  -- Button 7 in room 80797 toggles switches 4, 6, 9
        [8] = {room = 80796, switches = {6, 9}},  -- Button 8 in room 80796 toggles switches 6 and 9
        [9] = {room = 80804, switches = {3, 5, 7, 8}},  -- Button 9 in room 80804 toggles switches 3, 5, 7, 8
    }

    local solution = find_solution(initial_state, toggle_map)
    if solution then
        local solution_text = ""
        for _, action in ipairs(solution) do
            solution_text = solution_text .. string.format("Room %d: Press Button %d\n", action[1], action[2])
        end
        ColourNote("green", "", "Solution found:\n" .. solution_text)
    else
        ColourNote("red", "", "No solution found.")
    end
end



]]>
</script>

</muclient>
