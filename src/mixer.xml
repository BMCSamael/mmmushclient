<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, July 23, 2012, 10:58 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mixer" generated by Plugin Wizard -->

<muclient>

<plugin
   name="mixer"
   author="Ruthgul"
   id="84cc0397252aec0dbd589eaa"
   language="Lua"
   purpose="calculates mixes"
   save_state="y"
   date_written="2012-07-23 10:56:56"
   date_modified="2013-09-18 12:30:37"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.---------.
 | mixer |
`---------'

Tries to find combinations of sprigs, to achieve the desired mix.


Syntax:

* list mixes  - shows the list of game mixes

* container mixer <container_name>  - picks a container for sprigs

* container sedum <container_name>  - picks a(n optional) container for sedum sprigs (if none is specified, it defaults to the same container picked with container mixer)

* show sprigs <mix> [r] [s] - tries to find a way to mix <mix> with the sprigs in the chosen container (eg: show sprigs flame wind)
  - by default it uses high power sprigs first; add r to force reverse order (eg: show sprigs cure poison r)
  - by default it doesn't include sedum rosea in mixes; add s to add sedum, if available (eg, show sprigs fatigue s)


Note: You can edit these variables
- total_results: controls the max number of results to be retrieved (default: 5)
- total_time: controls the max time to be spent searching for mixes, in seconds (default: 3)


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="total_results">5</variable>

  <variable name="total_time">3</variable>

</variables>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^list mixes$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_mixes()
</send>
  </alias>

  <alias
   enabled="y"
   match="^container (?P&lt;type&gt;(mixer|sedum)) (?P&lt;container&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_container("%&lt;type&gt;", "%&lt;container&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^show sprigs (?P&lt;param&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_recipes("%&lt;param&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^domix (?P&lt;commands&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>domix("%&lt;commands&gt;")
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^mixer(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

  <trigger
   name="container_continue"
   keep_evaluating="y"
   match="^\[C\]ontinue \[R\]edraw \[B\]ack \[E\]xit\: $"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>auto_cont()
</send>
  </trigger>

  <trigger
   name="container_start"
   keep_evaluating="y"
   match="^(.+) contains\:$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>start_counting()
</send>
  </trigger>

  <trigger
   name="container_line"
   keep_evaluating="y"
   match="^([ ]+|\([ ]*(?P&lt;num&gt;[0-9]+)\)) (?P&lt;sprig&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "%&lt;sprig&gt;")
</send>
  </trigger>

  <trigger
   name="container_end"
   keep_evaluating="y"
   match="^A total of (.+) \((.+) max\) item(|s) weighing (.+) st(|s)\, (.+) pb(|s) \((.+) st(|s)\, (.+) pb(|s) max\)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>end_counting()
</send>
  </trigger>

  <trigger
   name="container_abort"
   keep_evaluating="y"
   match="^You do not see that here\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>abort_counting()
</send>
  </trigger>

  <trigger
   name="container_empty"
   keep_evaluating="y"
   match="^[ ]+Nothing\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>empty_container()
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "serialize"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  init_containers() -- edit this function if you wanna set default containers!
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/mixer.xml",
  }
  return (table.concat(t, ";"))
end



-----------
-- tables
-----------

sprig_values = {
  ["sedum rosea"] = -1,
  ["celidonia"] = 1,
  ["centaures"] = 4,
  ["eliotropia"] = 8,
  ["jusquianus"] = 10,
  ["lillium"] = 14,
  ["lingua canis"] = 18,
  ["queri"] = 23,
  ["mepeta"] = 25,
  ["milisopholos"] = 32,
  ["verbena"] = 33,
  ["provinca"] = 41,
  ["rosa"] = 50,
  ["salvia"] = 64,
  ["virga pastoris"] = 72,
  ["serpentina"] = 88,
  ["urtica"] = 92,
  ["usicur"] = 99,
}


sprigs_by_power = { "usicur", "urtica", "serpentina", "virga pastoris", "salvia", "rosa", "provinca", "verbena", "milisopholos", "mepeta", "queri", "lingua canis", "lillium", "jusquianus", "eliotropia", "centaures", "celidonia", "sedum rosea" }


mixes = {
  ["awaken"] = { minp = 1, maxp = 10 },
  ["cause light"] = { minp = 11, maxp = 20 },
  ["detect invisibility"] = { minp = 21, maxp = 30 },
  ["essence of youth"] = { minp = 31, maxp = 40 },
  ["cure light"] = { minp = 41, maxp = 50 },
  ["refresh"] = { minp = 51, maxp = 60 },
  ["alchemical attunement"] = { minp = 61, maxp = 70 },
  ["sense life"] = { minp = 71, maxp = 85 },
  ["calm"] = { minp = 86, maxp = 105 },
  ["cure poison"] = { minp = 106, maxp = 115 },
  ["blindness"] = { minp = 116, maxp = 135 },
  ["golem empathy"] = { minp = 136, maxp = 145 },
  ["fatigue"] = { minp = 146, maxp = 155 },
  ["cure disease"] = { minp = 156, maxp = 170 },
  ["battle prowess"] = { minp = 171, maxp = 185 },
  ["flame wind"] = { minp = 186, maxp = 200 },
  ["high explosive"] = { minp = 201, maxp = 220 },
  ["magic bomb"] = { minp = 221, maxp = 240 },
}


function list_mixes()
  local t = {}
  for name, range in pairs(mixes) do
    t[#t + 1] = name .. ": " .. range.minp .. "-" .. range.maxp
  end

  table.sort(t) -- alphabetical list

  for i = 1, #t do
    Note(t[i])
  end
end


function find_index(t, item)
  res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end



---------------------
-- pick a container
---------------------

function init_containers()
  -- edit these to set default containers, eg  mycontainer = "gnomish"
  mycontainer = nil
  mysedumcontainer = nil
end


function set_container(type, name)
  Note("")
  Tell("-- mixer: container for " .. type .. " set to: '")

  if (type == "mixer") then
    mycontainer = name
    ColourTell("silver", "black", mycontainer)

  else -- type is sedum
    mysedumcontainer = name
    ColourTell("silver", "black", mysedumcontainer)
  end

  Note("' --")
end



-----------------
-- calc recipes
-----------------

function show_recipes(param)
  if (mycontainer) then
    param = Trim(string.lower(param))

    local done = false
    reverse = false
    sedum = false

    while (not done) do
      if (string.find(param, " r$")) then
        param = string.match(param, "(.+) r$")
        reverse = true

      elseif (string.find(param, " s$")) then
        param = string.match(param, "(.+) s$")
        sedum = true

      else
        done = true
      end
    end

    if (reverse) then
      Note("-- mixer: will use low power sprigs first --")
    else
      Note("-- mixer: will use high power sprigs first --")
    end

    if (sedum) then
      Note("-- mixer: will add sedum to the mix --")
    end

    mymix = param

    if (mixes[mymix]) then -- we know the mix's power boundaries
      sedum_counted = true
      if (sedum) then -- we're going to use sedum
        if (mysedumcontainer) then -- sedum's in a separate container
          if (mysedumcontainer ~= mycontainer) then
            sedum_counted = false -- => got to count them separately
          end

        else -- sedum's in the same container
          mysedumcontainer = mycontainer
        end
      end

      have_sprigs = {}
      have_sedum = 0
      no_sprigs = true

      count_sprigs(mycontainer)
      --fake_sprigs()

    else
      Note("")
      Tell("-- mixer: I don't know how to mix ")
      ColourTell("silver", "black", mymix)
      Note(" --")
    end

  else
    Note("")
    Tell("-- mixer: you must set a container for sprigs first, using ")
    ColourTell("silver", "black", "container mixer <container_name>")
    Note(" --")
  end
end


function count_sprigs(container)
-- this is the real script
  EnableTrigger("container_start", true)
  EnableTrigger("container_continue", true)
  EnableTrigger("container_abort", true)

  Send("look in '" .. container .. "'")
end


function fake_sprigs()
-- this is for testing
  have_sprigs = {
    ["rosa"] = 19,
    ["provinca"] = 7,
    ["usicur"] = 16,
    ["centaures"] = 7,
    ["verbena"] = 10,
    ["sedum rosea"] = 1,
  }

  no_sprigs = false

  calc_recipes(mymix)
end


function start_counting()
  EnableTrigger("container_start", false)
  EnableTrigger("container_abort", false)
  EnableTrigger("container_empty", true)
  EnableTrigger("container_line", true)
  EnableTrigger("container_end", true)
end


function count_line(num, sprig)
  if (num == "") then
    num = 1
  else
    num = tonumber(num)
  end

  sprig = string.gsub(sprig, "a sprig of ", "")

  if (sprig_values[sprig]) then -- it's a sprig
    if (sprig == "sedum rosea") then
      have_sedum = num
--      have_sedum = (have_sedum or 0) + num

    else
      have_sprigs[sprig] = num
--      have_sprigs[sprig] = (have_sprigs[sprig] or 0) + num
      no_sprigs = false
    end
  end
end


function end_counting()
  EnableTrigger("container_continue", false)
  EnableTrigger("container_empty", false)
  EnableTrigger("container_line", false)
  EnableTrigger("container_end", false)

  --show_container_totals()

  if (sedum) and (not sedum_counted) then
    sedum_counted = true
    count_sprigs(mysedumcontainer)

  else
    calc_recipes(mymix)
  end
end


function abort_counting()
  EnableTrigger("container_continue", false)
  EnableTrigger("container_start", false)
  EnableTrigger("container_abort", false)

  Note("")
  Tell("-- mixer: I can't find the container '")
  ColourTell("silver", "black", mycontainer)
  Note("' --")
end


function empty_container()
  EnableTrigger("container_continue", false)
  EnableTrigger("container_empty", false)
  EnableTrigger("container_line", false)
  EnableTrigger("container_end", false)
end


function auto_cont()
  SendNoEcho("C")
end


function calc_recipes(mix)
  if (not no_sprigs) then
    ArrayDelete("amixes")
    ArrayCreate("amixes")
    ArrayClear("amixes")

    -- 7 is the max # of sprigs that can be used in a mix,
    -- (or 6 if we're already including sedum)
    max_sprigs = 7
    local lmix = ""

    if (sedum) then
      if (have_sedum > 0) then
        lmix = "sedum rosea"
        max_sprigs = 6

      else
        Note("-- mixer: no sedum sprigs available, will show recipes without it --")
      end
    end

    local minp, maxp = find_power(mix)

    total = 0

    res_done = false
    start_time = os.time()

    rec_mixes(sort_by_power(have_sprigs), lmix, minp, maxp)

    SetStatus("Ready")
    list_results()

  else
    Note("")
    Tell("-- mixer: there aren't any sprigs in the container '")
    ColourTell("silver", "black", mycontainer)
    Note("' --")
  end
end


function find_power(mix)
  local minp, maxp

  if (mixes[mix]) then
    minp = mixes[mix].minp
    maxp = mixes[mix].maxp
  end

  return minp, maxp
end


function rec_mixes(lhave, lmix, minp, maxp)
  local power = calc_power(lmix)

  if (is_right_range(power, minp, maxp))
  and (ok_sprigs(lmix)) then
    lmix = sort_list(lmix)

    local same_power_mixes = ArrayGet("amixes", power)

    if (not already_added(same_power_mixes, lmix)) then
      if (not same_power_mixes) then
        same_power_mixes = lmix
      else
        same_power_mixes = same_power_mixes .. ";" .. lmix
      end

      ArraySet("amixes", power, same_power_mixes)
      total = total + 1
    end

  elseif (power < minp) then
    local tmix = utils.split(lmix, ",")

    if (#tmix < max_sprigs) then
      total_results = tonumber(GetVariable("total_results") or 5)
      total_time = tonumber(GetVariable("total_time") or 3)

      if (total < total_results) then
        local thave = utils.split(Trim(lhave), ",")

        for i = 1, #thave do
          if (os.time() >= (start_time + total_time)) then
          -- we ran out of time
            res_done = true
            break
          end

          if (thave[i] ~= "") and (not res_done) then
            local new_lhave, new_lmix

            new_lhave, new_lmix = add_sprig_to_mix(lhave, lmix, thave[i])

            SetStatus("trying: " .. new_lmix)

            rec_mixes(new_lhave, new_lmix, minp, maxp)
          end
        end

      else
        res_done = true
      end
    end
  end
end


function is_right_range(power, minp, maxp)
  local res = (power >= minp) and (power <= maxp)
  return res
end


function ok_sprigs(lmix)
-- returns true if the mix uses at least 2 different sprigs
  local res = false

  if (lmix ~= "") then
    local tmix = utils.split(lmix, ",")

    for i = 1, #tmix do
      for j = i + 1, #tmix do
        if (tmix[j] ~= tmix[i]) then
          res = true
          break
        end

        if (res) then
          break
        end
      end
    end
  end

  return res
end


function already_added(smixes, lmix)
  local res = false

  if (smixes) then
    local tmixes = utils.split(smixes, ";")

    res = find_index(tmixes, lmix)
  end

  return res
end


function calc_power(lmix)
  local power = 0

  if (lmix ~= "") then
    tmix = utils.split(lmix, ",")

    for i = 1, #tmix do
      power = power + sprig_values[tmix[i]]
    end
  end

  return power
end


function sort_list(lmix)
  if (lmix ~= "") then
    local tmix = utils.split(lmix, ",")

    table.sort(tmix) -- alphabetical list

    return table.concat(tmix, ",")

  else
    return ""
  end
end


function sort_by_power(t)
  local taux = {}

  local tstart, tend, tstep

  if (not reverse) then -- use high power sprigs first...
    tstart = 1
    tend = #sprigs_by_power
    tstep = 1

  else -- use low power sprigs first...
    tstart = #sprigs_by_power
    tend = 1
    tstep = -1
  end

  for i = tstart, tend, tstep do
    if (t[sprigs_by_power[i]]) then
      for j = 1, t[sprigs_by_power[i]] do
        taux[#taux + 1] = sprigs_by_power[i]
      end
    end
  end

  return(table.concat(taux, ","))
end


function add_sprig_to_mix(lhave, lmix, sprig)
  local new_lhave, new_lmix

  local thave = utils.split(lhave, ",")

  local i = find_index(thave, sprig)

  if (i) then
    table.remove(thave, i)
  end

  new_lhave = table.concat(thave, ",")

  if (lmix ~= "") then
    local tmix = utils.split(lmix, ",")

    tmix[#tmix + 1] = sprig

    table.sort(tmix)

    new_lmix = table.concat(tmix, ",")

  else
    new_lmix = sprig
  end

  return new_lhave, new_lmix
end


function list_results()
  local smixes, tmixes, lmix, tmix, fmix, short_name

  Note("")
  if (ArrayListKeys("amixes")) then

    Tell("I found these ways to mix ")
    ColourTell("silver", "black", mymix)
    Note(" (sorted by power): ")
    for key, power in pairs(ArrayListKeys("amixes")) do
      smixes = ArrayGet("amixes", power)

      tmixes = utils.split(smixes, ";")

      for i = 1, #tmixes do
        lmix = tmixes[i]

        for i = 1, #sprigs_by_power do
          lmix = string.gsub(lmix, sprigs_by_power[i], string.match(sprigs_by_power[i], "(%a+)"))
        end

        tmix = utils.split(lmix, ",")

        for i = 1, #tmix do
          tmix[i] = "get " .. tmix[i] .. " '" .. mycontainer .. "'"
        end

        lmix = string.gsub(lmix, ",", " ")
        tmix[#tmix + 1] = "mix " .. lmix

        lmix = table.concat(tmix, ",")

        fmix = format_output(tmixes[i])

        fmix = string.gsub(fmix, ",", " + ")

        Tell("* mix: ")
        Hyperlink("domix " .. lmix, fmix, "", "silver", "black", false)
        Note(" - power: " .. power .. " - sprigs: " .. #tmix - 1)
      end
    end

  else
    Tell("No results found for ")
    ColourTell("silver", "black", mymix)
    Note(" within ~" .. total_time .. " seconds.")
  end
end


function format_output(lmix)
  local taux = {}

  local tmix = utils.split(lmix, ",")

  for i = 1, #tmix do
    taux[tmix[i]] = (taux[tmix[i]] or 0) + 1  -- counting
  end

  local formatted = {}
  for k, v in pairs(taux) do
    formatted[#formatted + 1] = v .. " " .. k
    -- making it into a list <num> <sprig>
  end

  return table.concat(formatted, ",")
end


function domix(commands)
  local tcommands = utils.split(commands, ",")

  for i = 1, #tcommands do
    Execute(tcommands[i])
  end
end


function show_container_totals()
  Note("container totals:")
  for k, v in pairs(have_sprigs) do
    Note(k .. ": " .. v)
  end
end


]]>

</script>

</muclient>
