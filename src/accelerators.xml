<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, February 23, 2012, 5:38 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "accelerators" generated by Plugin Wizard -->

<muclient>

<plugin
   name="accelerators"
   author="Ruthgul"
   id="f99134f19ea994a0cc0888d1"
   language="Lua"
   purpose="adds ctrl+dir for open, alt+dir for look, and ctrl+alt+dir for flee"
   save_state="y"
   date_written="2012-02-23 17:36:43"
   date_modified="2013-12-06 09:50:27"
   requires="4.71"
   version="1.0"
   sequence="100"
   >

<description trim="y">

<![CDATA[

.----------------.
 | accelerators |
`----------------'

Adds default keypad accelerators for:

* <numpad_direction> = move
* ctrl + <numpad_direction> = open
* alt + <numpad_direction> = look
* ctrl + alt + <numpad_direction> = flee

And lets you add your own accelerators, which will be loaded every time you open your world.


*** REQUIRES ***

- MUSHclient _must_ have write access to its folder.


Syntax:

* accel [on|off]  - toggles accelerators on/off

* add accel <keystroke> <command>  - adds an accelerator (eg, add accel Alt+F2 peer)
* del accel <keystroke>  - removes an accelerator (eg, del accel Alt+F2)

* restore default accel  - removes all accelerators except the default ones

* list accel  - shows a list of all accelerators handled by this plugin

* export accel  - exports all accelerators handled by this plugin to a notepad

* accel keystrokes help  - shows the MUSHclient help for accelerator keystrokes


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^accel(|[ ]+(?P&lt;status&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_accelerators("%&lt;status&gt;")
</send>
  </alias>


  <alias
   enabled="y"
   match="^add[ ]+accel[ ]+(?P&lt;keystroke&gt;[^ ]+)[ ]+(?P&lt;command&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_accelerator("%&lt;keystroke&gt;", "%&lt;command&gt;", "no")
</send>
  </alias>

  <alias
   enabled="y"
   match="^del[ ]+accel[ ]+(?P&lt;keystroke&gt;[^ ]+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>del_accelerator("%&lt;keystroke&gt;", "no")
</send>
  </alias>


  <alias
   enabled="y"
   match="^list[ ]+accel$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_accelerators_list()
</send>
  </alias>

  <alias
   enabled="y"
   match="^export[ ]+accel$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>export_accelerators_list()
</send>
  </alias>

  <alias
   enabled="y"
   match="^restore[ ]+default[ ]+accel$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>restore_default_accelerators()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^accelerators(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

  <alias
   enabled="y"
   match="^accel(|erators)[ ]+keystrokes[ ]+help$"
   regexp="y"
   script="show_default_help"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

require "serialize"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  load_accelerators()
  enable_accelerators(true)
end


function OnPluginClose()
  disable_accelerators(true)
end


function OnPluginEnable()
  enable_accelerators(true)
end


function OnPluginDisable()
  disable_accelerators(true)
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/accelerators.xml",
  }
  return (table.concat(t, ","))
end


function show_default_help()
  ColourNote("silver", "black", [[
(From the MUSHclient help, Accelerator function)

The keystroke consists of this syntax:

CTRL + ALT + SHIFT + key

The modifiers CTRL, ALT and SHIFT are all optional, and are not case-sensitive. They can appear in any order.

The key can be one of the following:

0 1 2 3 4 5 6 7 8 9
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

Accept Add Apps Attn Backspace Cancel Capital Clear Control Convert Crsel Decimal Delete Divide Down End Enter Ereof Esc Execute Exsel F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24 Final Hangeul Hangul Hanja Help Home Insert Junja Kana Kanji LButton LControl LMenu LShift LWin Left MButton Menu ModeChange Multiply NonConvert Noname Numlock Numpad0 Numpad1 Numpad2 Numpad3 Numpad4 Numpad5 Numpad6 Numpad7 Numpad8 Numpad9 Oem_clear Pa1 PageDown PageUp Pause Play Print ProcessKey RButton RControl RMenu RShift RWin Right Scroll Select Separator Snapshot Space Subtract Tab Up Zoom

They are not all guaranteed to work in the way you might expect. These names were obtained from the Windows include files. Some keys may be trapped by the operating system, or not be available on your PC.

(To check if a given keystroke is available, use Input, Key Name...)
]] )

end



------------------------------------------------------------------
-- accelerators list init / load / save / restore default / show
------------------------------------------------------------------

default_list = {
  ["numpad8"] = "north",
  ["numpad9"] = "northeast",
  ["numpad6"] = "east",
  ["numpad3"] = "southeast",
  ["numpad2"] = "south",
  ["numpad1"] = "southwest",
  ["numpad4"] = "west",
  ["numpad7"] = "northwest",
  ["subtract"] = "up",
  ["add"] = "down",

  ["alt+numpad8"] = "look north",
  ["alt+numpad9"] = "look northeast",
  ["alt+numpad6"] = "look east",
  ["alt+numpad3"] = "look southeast",
  ["alt+numpad2"] = "look south",
  ["alt+numpad1"] = "look southwest",
  ["alt+numpad4"] = "look west",
  ["alt+numpad7"] = "look northwest",
  ["alt+subtract"] = "look up",
  ["alt+add"] = "look down",

  ["ctrl+numpad8"] = "open north door",
  ["ctrl+numpad9"] = "open northeast door",
  ["ctrl+numpad6"] = "open east door",
  ["ctrl+numpad3"] = "open southeast door",
  ["ctrl+numpad2"] = "open south door",
  ["ctrl+numpad1"] = "open southwest door",
  ["ctrl+numpad4"] = "open west door",
  ["ctrl+numpad7"] = "open northwest door",
  ["ctrl+subtract"] = "open up door",
  ["ctrl+add"] = "open down door",

  ["ctrl+alt+numpad8"] = "flee north",
  ["ctrl+alt+numpad9"] = "flee northeast",
  ["ctrl+alt+numpad6"] = "flee east",
  ["ctrl+alt+numpad3"] = "flee southeast",
  ["ctrl+alt+numpad2"] = "flee south",
  ["ctrl+alt+numpad1"] = "flee southwest",
  ["ctrl+alt+numpad4"] = "flee west",
  ["ctrl+alt+numpad7"] = "flee northwest",
  ["ctrl+alt+subtract"] = "flee up",
  ["ctrl+alt+add"] = "flee down",

  ["ctrl+alt+numpad5"] = "flee", -- directionless
}


function load_accelerators()
  use_keystrokes = {}

  assert(loadstring(GetVariable("use_keystrokes") or ""))()

  for keystroke, command in pairs(default_list) do
    use_keystrokes[keystroke] = use_keystrokes[keystroke] or command
  end
end


function save_accelerators()
  SetVariable("use_keystrokes", "use_keystrokes = " .. serialize.save_simple(use_keystrokes))
  SaveState()
end


function restore_default_accelerators()
  if (using_accel) then
    disable_accelerators(false)
  end

  use_keystrokes = default_list
  save_accelerators()

  if (using_accel) then
    enable_accelerators(false)
  end

  Note("-- accelerators: default keystrokes restored --")
end


function show_accelerators_list()
  Note("-- accelerators: list of keystrokes handled by this plugin --")

  -- sort list
  local ks = {}

  for keystroke, _ in pairs(use_keystrokes) do
    ks[#ks + 1] = keystroke
  end

  table.sort(ks)

  for i = 1, #ks do
    Tell("* ")
    ColourTell("silver", "black", ks[i])
    Tell(": ")
    ColourNote("silver", "black", use_keystrokes[ks[i]])
  end
end


function export_accelerators_list()
  local line

  for ks, cmd in pairs(use_keystrokes) do
    line = "add accel " .. ks .. " " .. cmd
    AppendToNotepad("exported keystrokes", line .. "\r\n")
  end

  NotepadSaveMethod ("exported keystrokes", 2)
end



-----------------------------------------------------
-- backup / restore for ship_kp and similar plugins
-----------------------------------------------------

function backup_accelerator(keystroke)
  keystroke = string.lower(keystroke)

  -- get backed up keystrokes
  backup_keystrokes = {}

  assert(loadstring(GetVariable("backup_keystrokes") or ""))()

--  Tell("backup_accelerator - loaded backup_keystrokes: ")
--  Note(serialize.save_simple(backup_keystrokes))

  -- update the keystroke, only if there isn't a previous backup
  if (not backup_keystrokes[keystroke]) then
    backup_keystrokes[keystroke] = use_keystrokes[keystroke]

    SetVariable("backup_keystrokes", "backup_keystrokes = " .. serialize.save_simple(backup_keystrokes))
    SaveState()
  end

--  Tell("backed up keystrokes: ")
--  Note(serialize.save_simple(backup_keystrokes))
end


function restore_accelerator(keystroke, override)
  keystroke = string.lower(keystroke)

  -- get backed up keystrokes
  backup_keystrokes = {}

  assert(loadstring(GetVariable("backup_keystrokes") or ""))()

--  Tell("restore_accelerator - loaded backup_keystrokes: ")
--  Note(serialize.save_simple(backup_keystrokes))

--  Note("restore_keystroke: " .. keystroke .. " -> " .. (backup_keystrokes[keystroke] or "nil"))

  -- update the keystroke
  if (backup_keystrokes[keystroke]) then
    add_accelerator(keystroke, backup_keystrokes[keystroke], override)

    backup_keystrokes[keystroke] = nil

    SetVariable("backup_keystrokes", "backup_keystrokes = " .. serialize.save_simple(backup_keystrokes))
    SaveState()

  else
    del_accelerator(keystroke, override)
  end

--  Tell("fixed backup_keystrokes: ")
--  Note(serialize.save_simple(backup_keystrokes))
end



------------------------------
-- add / delete accelerators
------------------------------

-- list of "reserved" keystrokes that we won't let the user modify via aliases
-- (they will be modifiable by calling the functions with override = "force")
reserved_keystrokes = {
  -- numbers and letters
  "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",

  -- keys needed to write, etc.
  "backspace", "enter", "esc", "numlock", "space",
}

-- list of "reserved" keystrokes that we won't let the user modify via aliases
-- (they will be modifiable by calling the functions with override = "yes")
semi_reserved_keystrokes = {
  -- numpad
  "numpad1", "numpad2", "numpad3", "numpad4", "numpad6", "numpad7", "numpad8", "numpad9", "subtract", "add",

  -- alt+numpad
  "alt+numpad1", "alt+numpad2", "alt+numpad3", "alt+numpad4", "alt+numpad6", "alt+numpad7", "alt+numpad8", "alt+numpad9", "alt+subtract", "alt+add",

  -- ctrl+numpad
  "ctrl+numpad1", "ctrl+numpad2", "ctrl+numpad3", "ctrl+numpad4", "ctrl+numpad6", "ctrl+numpad7", "ctrl+numpad8", "ctrl+numpad9", "ctrl+subtract", "ctrl+add",

  -- add+ctrl+numpad
  "alt+ctrl+numpad1", "alt+ctrl+numpad2", "alt+ctrl+numpad3", "alt+ctrl+numpad4", "alt+ctrl+numpad5", "alt+ctrl+numpad6", "alt+ctrl+numpad7", "alt+ctrl+numpad8", "alt+ctrl+numpad9", "alt+ctrl+subtract", "alt+ctrl+add",

  -- ctrl+add+numpad
  "ctrl+alt+numpad1", "ctrl+alt+numpad2", "ctrl+alt+numpad3", "ctrl+alt+numpad4", "ctrl+alt+numpad5", "ctrl+alt+numpad6", "ctrl+alt+numpad7", "ctrl+alt+numpad8", "ctrl+alt+numpad9", "ctrl+alt+subtract", "ctrl+alt+add",
}


function add_accelerator(keystroke, command, override)
  keystroke = string.lower(keystroke)

  local allowed_keystroke = is_allowed_keystroke(keystroke, override)

  local success

  if (allowed_keystroke) then
    -- try to load the new accelerator
    local res = Accelerator(keystroke, command)

    success = (res == 0)

    -- if successfully added, then update the table
    if (success) then
      use_keystrokes[keystroke] = command
      save_accelerators()

    else
      ColourNote("tomato", "black", "-- accelerators: error loading the keystroke '" .. keystroke .. "' --")
    end

  else
    success = false
    ColourNote("tomato", "black", "-- accelerators: the keystroke '" .. keystroke .. "' is reserved --")
  end

  return success
end


function del_accelerator(keystroke, override)
  keystroke = string.lower(keystroke)

  local allowed_keystroke = is_allowed_keystroke(keystroke, override)

  local success

  if (allowed_keystroke) then
    -- try to remove the accelerator
    local res = AcceleratorTo(keystroke, " ", sendto.script)

    success = (res == 0)

    -- if successfully removed, then update the table
    if (success) then
      use_keystrokes[keystroke] = nil
      save_accelerators()

    else
      ColourNote("tomato", "black", "-- accelerators: error removing the keystroke '" .. keystroke .. "' --")
    end

  else
    success = false
    ColourNote("tomato", "black", "-- accelerators: the keystroke '" .. keystroke .. "' is reserved --")
  end

  return success
end


function is_allowed_keystroke(keystroke, override)
  local allowed_keystroke = true

  -- if we're not overriding reserved keystrokes, check if it's allowed
  if (override == "no") then -- check vs semi_ and reserved_keystrokes
    if ((find_index(reserved_keystrokes, keystroke))
    or (find_index(semi_reserved_keystrokes, keystroke))) then
      allowed_keystroke = false
    end

  elseif (override == "yes") then -- only check vs reserved_keystrokes
    if (find_index(reserved_keystrokes, keystroke)) then
      allowed_keystroke = false
    end
  end

  return allowed_keystroke
end


function find_index(t, item)
  local res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end



------------------------
-- toggle accelerators
------------------------

function toggle_accelerators(status)
  if (status == "on") then
    using_accel = true
  elseif (status == "off") then
    using_accel = false
  else
    using_accel = not using_accel
  end

  if (using_accel) then
    Note("-- accelerators: ON --")
    enable_accelerators(false)

  else
    Note("-- accelerators: OFF --")
    disable_accelerators(false)
  end
end



--------------------------------
-- load / disable accelerators
--------------------------------

function enable_accelerators(notify)
  for keystroke, command in pairs(use_keystrokes) do
    Accelerator(keystroke, command)
  end

  if (notify) then
    using_accel = true
    Note("-- accelerators: ON --")
  end
end


function disable_accelerators(notify)
  for keystroke, _ in pairs(use_keystrokes) do
    AcceleratorTo(keystroke, " ", sendto.script)
  end

  if (notify) then
    using_accel = false
    Note("-- accelerators: OFF --")
  end
end


]]>

</script>

</muclient>
