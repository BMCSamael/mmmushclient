<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, December 17, 2013, 12:32 PM -->
<!-- MuClient version 4.91 -->

<!-- Plugin "meh_filters" generated by Plugin Wizard -->

<muclient>

<plugin
   name="meh_filters"
   author="Ruthgul"
   id="6e79c67fd99121b8b383e377"
   language="Lua"
   purpose="Gags the score, skills, spells, marks, and personal log output, and shows only what's required."
   date_written="2013-12-17 12:28:14"
   date_modified="2016-08-12 17:20:29"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

~ meh_filters ~

Lets you check specific data from your score, skills, spells, marks, and personal log, gagging everything else.

If GMCP is enabled, it also lets you check specific data from the GMCP char package.


** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled for you to be able to access the GMCP char package.
- For 'show score name' to work, set show-honorifics off.


Syntax:

* show score <key>  - sends the 'score' command, gags its output, and then shows the values matching the request
* list score keys  - shows a list of keys to be used with show score

* show skills <key>  - sends the 'skills proficiencies' command, gags its output, and then shows the skills matching the request

* show spells <key>  - sends the 'skills spells' command, gags its output, and then shows the spells matching the request

* show marks <key>  - sends the 'score marks' command, gags its output, and then shows the marks matching the request

* show log <key>  - sends the 'use log' command, gags its output, and then it shows the values matching the request
* list log keys  - shows a list of keys to be used with show log

* gmcp char {<group>|<key>|<group>.<key>}  - requests the GMCP char package, waits for it to be updated, then it shows the values matching the request
* list gmcp char groups  - shows a list of groups to be used with gmcp char

* show scan <what>  - sends the 'scan' command, gags its output, and then it shows the results matching the request


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

</variables>



<!--  Aliases  -->

<aliases>

<!-- show key: value -->

  <alias
   enabled="y"
   match="^show[ ]+score[ ]+(?P&lt;key&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_score("%&lt;key&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^show[ ]+skills[ ]+(?P&lt;key&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_skills("%&lt;key&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^show[ ]+spells[ ]+(?P&lt;key&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_spells("%&lt;key&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^show[ ]+marks[ ]+(?P&lt;key&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_marks("%&lt;key&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^show[ ]+log[ ]+(?P&lt;key&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_log("%&lt;key&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^show[ ]+scan[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_scan("%&lt;what&gt;")
</send>
  </alias>


<!-- list keys -->

  <alias
   enabled="y"
   match="^list[ ]+score[ ]+keys$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_score_keys()
</send>
  </alias>

  <alias
   enabled="y"
   match="^list[ ]+log[ ]+keys$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_log_keys()
</send>
  </alias>

  <alias
   enabled="y"
   match="^list[ ]+gmcp[ ]+char[ ]+groups$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_gmcp_char_groups()
</send>
  </alias>



<!-- GMCP char -->

  <alias
   enabled="y"
   match="^gmcp[ ]+char[ ]+(?P&lt;key&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>check_gmcp_char("%&lt;key&gt;")
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^meh\_filters(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- generic -->

  <trigger
   name="continue"
   keep_evaluating="y"
   match="^\[C\]ontinue \[R\]edraw \[B\]ack \[E\]xit\: $"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>auto_cont()
</send>
  </trigger>


<!-- on prompt -->

  <trigger
   name="a_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_prompt()
</send>
  </trigger>


<!-- score -->

  <trigger
   group="score"
   keep_evaluating="y"
   match="^Player Information for\: (?&lt;name&gt;[A-Za-z]+)(|.+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("name", "%&lt;name&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Hours Played\:[ ]+(?P&lt;hours&gt;[^ ]+)[ ]+Age\:[ ]+(?P&lt;age&gt;[^ ]+) years[ ]+\(Born (?P&lt;bdate&gt;[^ ]+)\)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("hours", "%&lt;hours&gt;")
add_to_score("age", "%&lt;age&gt;")
add_to_score("birth date", "%&lt;born&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Class Level\:[ ]+(?P&lt;clev&gt;[^ ]+)[ ]+Total Level\:[ ]+(?P&lt;tlev&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("class level", "%&lt;clev&gt;")
add_to_score("total level", "%&lt;tlev&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Race\:[ ]+(?P&lt;race&gt;[^ ]+)[ ]+Gender\:[ ]+(?P&lt;gender&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("race", "%&lt;race&gt;")
add_to_score("gender", "%&lt;gender&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Class\:[ ]+(?&lt;class&gt;[^ ]+)[ ]+Alignment\:[ ]+(?P&lt;align&gt;[^ ]+)[ ]+\((?P&lt;trending&gt;[^ ]+)\)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("class", "%&lt;class&gt;")
add_to_score("alignment", "%&lt;align&gt;")
add_to_score("alignment trending", "%&lt;trending&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Hit Points\:[ ]+(?P&lt;chp&gt;[^ ]+)\/(?P&lt;thp&gt;[^ ]+)[ ]+Practices\:[ ]+(?P&lt;pp&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("hp", "%&lt;chp&gt;")
add_to_score("total hp", "%&lt;thp&gt;")
add_to_score("pp", "%&lt;pp&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Spell Points\:[ ]+(?P&lt;csp&gt;[^ ]+)\/(?P&lt;tsp&gt;[^ ]+)[ ]+Quest Points\:[ ]+(?P&lt;qp&gt;[^ ]+) \((?P&lt;quests&gt;[^ ]+) quests\)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("sp", "%&lt;csp&gt;")
add_to_score("total sp", "%&lt;tsp&gt;")
add_to_score("qp", "%&lt;qp&gt;")
add_to_score("quests", "%&lt;quests&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Stamina\:[ ]+(?P&lt;cst&gt;[^ ]+)\/(?P&lt;tst&gt;[^ ]+)[ ]+Reputation\:[ ]+(?P&lt;repnum&gt;[^ ]+) \((?P&lt;repname&gt;[^ ]+)\)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("st", "%&lt;cst&gt;")
add_to_score("total st", "%&lt;tst&gt;")
add_to_score("reputation", "%&lt;repnum&gt;")
add_to_score("reputation title", "%&lt;repname&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Strength\:[ ]+(?P&lt;cstr&gt;[^ ]+)\/(?P&lt;tstr&gt;[^ ]+)[ ]+Vitality\:[ ]+(?P&lt;cvit&gt;[^ ]+)\/(?P&lt;tvit&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("strength", "%&lt;cstr&gt;")
add_to_score("max strength", "%&lt;tstr&gt;")
add_to_score("vitality", "%&lt;cvit&gt;")
add_to_score("max vitality", "%&lt;tvit&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Knowledge\:[ ]+(?P&lt;ckno&gt;[^ ]+)\/(?P&lt;tkno&gt;[^ ]+)[ ]+Luck\:[ ]+(?P&lt;cluck&gt;[^ ]+)\/(?P&lt;tluck&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("knowledge", "%&lt;ckno&gt;")
add_to_score("max knowledge", "%&lt;tkno&gt;")
add_to_score("luck", "%&lt;cluck&gt;")
add_to_score("max luck", "%&lt;tluck&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Wisdom\:[ ]+(?P&lt;cwis&gt;[^ ]+)\/(?P&lt;twis&gt;[^ ]+)[ ]+Courage\:[ ]+(?P&lt;ccou&gt;[^ ]+)\/(?P&lt;tcou&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("wisdom", "%&lt;cwis&gt;")
add_to_score("max wisdom", "%&lt;twis&gt;")
add_to_score("courage", "%&lt;ccou&gt;")
add_to_score("max courage", "%&lt;tcou&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Agility\:[ ]+(?P&lt;cagi&gt;[^ ]+)\/(?P&lt;tagi&gt;[^ ]+)[ ]+Sanity\:[ ]+(?P&lt;csan&gt;[^ ]+)\/(?P&lt;tsan&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("agility", "%&lt;cagi&gt;")
add_to_score("max agility", "%&lt;tagi&gt;")
add_to_score("sanity", "%&lt;csan&gt;")
add_to_score("max sanity", "%&lt;tsan&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Personality\:[ ]+(?P&lt;cpers&gt;[^ ]+)\/(?P&lt;tpers&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("personality", "%&lt;cpers&gt;")
add_to_score("max personality", "%&lt;tpers&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Spell Complexity Comprehension \(SCC\)\:[ ]+(?P&lt;scc&gt;[^ ]+)\%$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("scc", "%&lt;scc&gt;%")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Proficiency Complexity Comprehension \(PCC\)\:$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Wea\:[ ]+(?P&lt;wea&gt;[^ ]+)\%[ ]+Def\:[ ]+(?P&lt;def&gt;[^ ]+)\%[ ]+Com\:[ ]+(?P&lt;com&gt;[^ ]+)\%[ ]+Tek\:[ ]+(?P&lt;tek&gt;[^ ]+)\%[ ]+Mys\:[ ]+(?P&lt;mys&gt;[^ ]+)\%$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("pcc weaponry", "%&lt;wea&gt;%")
add_to_score("pcc defense", "%&lt;def&gt;%")
add_to_score("pcc combat", "%&lt;com&gt;%")
add_to_score("pcc technical", "%&lt;tek&gt;%")
add_to_score("pcc mystical", "%&lt;mys&gt;%")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^[ ]+Class Path\: 1st\: (?P&lt;first&gt;[^ ]+)[ ]+2nd\: (?P&lt;second&gt;[^ ]+)[ ]+3rd\: (?P&lt;third&gt;[^ ]+)[ ]+4th\: (?P&lt;fourth&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("first class", "%&lt;first&gt;")
add_to_score("second class", "%&lt;second&gt;")
add_to_score("third class", "%&lt;third&gt;")
add_to_score("fourth class", "%&lt;fourth&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You have (?P&lt;exp&gt;[^ ]+) experience point(|s) and need (?P&lt;req_exp&gt;[^ ]+) to advance\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("experience", "%&lt;exp&gt;")
add_to_score("experience tnl", "%&lt;req_exp&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You have (?P&lt;ap&gt;[^ ]+) archon point(|s) and need (?P&lt;req_ap&gt;[^ ]+) to advance\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("ap", "%&lt;ap&gt;")
add_to_score("ap tnl", "%&lt;req_ap&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You have killed (?P&lt;npcs&gt;[^ ]+) creature(|s) and (?P&lt;pcs&gt;[^ ]+) player(|s) in combat\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("npc kills", "%&lt;npcs&gt;")
add_to_score("pk kills", "%&lt;pcs&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You have been killed (?P&lt;tot&gt;[^ ]+) time(|s)\, (?P&lt;pk&gt;[^ ]+) in player kill combat\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("total deaths", "%&lt;tot&gt;")
add_to_score("pk deaths", "%&lt;pk&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You have defeated (?P&lt;wins&gt;[^ ]+) player(|s) and lost (?P&lt;losses&gt;[^ ]+) time(|s) in arena combat\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("arena wins", "%&lt;wins&gt;")
add_to_score("arena losses", "%&lt;losses&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You are carrying (?P&lt;num&gt;[^ ]+) item(|s) weighing (?P&lt;stones&gt;[^ ]+) stone(|s) and (?P&lt;pebbles&gt;[^ ]+) pebble(|s)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("items carried", "%&lt;num&gt;")
add_to_score("weight carried", "%&lt;stones&gt; st %&lt;pebbles&gt; pb")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You have attained (?P&lt;marks&gt;[^ ]+) mark(|s)\, (?P&lt;honors&gt;[^ ]+) honor(|s)\, and (?P&lt;rels&gt;[^ ]+) relationship(|s)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("marks", "%&lt;marks&gt;")
add_to_score("honors", "%&lt;honors&gt;")
add_to_score("relationships", "%&lt;rels&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You are a follower of (?P&lt;deity&gt;.+)\. \((?P&lt;piety&gt;[^ ]+) Piety\)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("deity", "%&lt;deity&gt;")
add_to_score("piety", "%&lt;piety&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You have (?P&lt;bp&gt;[^ ]+) building point(|s) and (?P&lt;ru&gt;[^ ]+) reward unit(|s)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("bp", "%&lt;bp&gt;")
add_to_score("ru", "%&lt;ru&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* Crystal Guild quests completed\: (?P&lt;crystals&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("crystal quests", "%&lt;crystals&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* Number of y\'Goths slain\: (?P&lt;ygoths&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("y'goths", "%&lt;ygoths&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* Your PK rating is\: (?P&lt;pkrat&gt;[^ ]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("pk rating", "%&lt;pkrat&gt;")
</send>
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You are currently (resting|asleep)\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You are on the quest\: \'(.+)\'$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   group="score"
   keep_evaluating="y"
   match="^\* You are currently marked as \'away\'\. Message\: (?P&lt;msg&gt;.+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_score("away message", "%&lt;msg&gt;")
</send>
  </trigger>


<!-- skills and spells -->

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^\[ \# \] \[[ ]+Proficiency Name[ ]+\] \[ Type \] \[ Cmplx \] \[ Lrnd \]$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^\[ \# \] \[[ ]+Spell Name[ ]+\] \[ School \] \[ SP \] \[ Cmplx \] \[ Lrnd \]$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^[ ]+(?P&lt;num&gt;[0-9]+)[ ]+(?P&lt;name&gt;.+)[ ]+(?&lt;type&gt;(WEA|TEK|COM|DEF|MYS))[ ]+(?P&lt;cmplx&gt;[0-9]+)\%[ ]+(?P&lt;lrnd&gt;[0-9]+)\%[ ]*$"
   match_text_colour="y"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
   text_colour="15"
  >
  <send>add_skill(Trim("%&lt;name&gt;"), "%&lt;type&gt;", "%&lt;cmplx&gt;", "%&lt;lrnd&gt;")
</send>
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^[ ]+(?P&lt;num&gt;[0-9]+)[ ]+(?P&lt;name&gt;.+)[ ]+(?P&lt;school&gt;(ABJ|ALT|CHA|CON|DIV|ELE|ENC|EVO|FUN|ILL|INV|NEC|SUM|THO))[ ]+(?P&lt;sp&gt;[0-9]+)[ ]+(?P&lt;cmplx&gt;[0-9]+)\%[ ]+(?P&lt;lrnd&gt;[0-9]+)\%[ ]*$"
   match_text_colour="y"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
   text_colour="15"
  >
  <send>add_spell(Trim("%&lt;name&gt;"), "%&lt;school&gt;", "%&lt;sp&gt;", "%&lt;cmplx&gt;", "%&lt;lrnd&gt;")
</send>
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^Color Key\: \[Active\] \[Inactive\] \[Altered \+\] \[Altered \-\] \[Unavailable\]$"
   match_text_colour="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   text_colour="15"
  >
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^[ ]+\[(.*?)\] Indicates a recommended class skill to practice\.$"
   match_text_colour="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   text_colour="15"
  >
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^You have the ability to learn \[(?P&lt;can_learn&gt;[^ ]+)\] proficiencies\.$"
   match_text_colour="y"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
   text_colour="15"
  >
  <send>skills_total = "%&lt;can_learn&gt;"
</send>
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^You have the ability to learn \[(?P&lt;can_learn&gt;[^ ]+)\] magical spells\.$"
   match_text_colour="y"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
   text_colour="15"
  >
  <send>spells_total = "%&lt;can_learn&gt;"
</send>
  </trigger>

  <trigger
   group="skillspell"
   keep_evaluating="y"
   match="^You have \[(.+)\] practice session(|s)\.$"
   match_text_colour="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   text_colour="15"
  >
  </trigger>


<!-- marks -->

  <trigger
   group="marks"
   keep_evaluating="y"
   match="^You have obtained the following Marks\:$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   group="marks"
   keep_evaluating="y"
   match="^(?P&lt;mark1&gt;[^ ]+)[ ]+(|(?P&lt;mark2&gt;[^ ]+)[ ]+(|(?P&lt;mark3&gt;[^ ]+)[ ]+))$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_marks("%&lt;mark1&gt;", "%&lt;mark2&gt;", "%&lt;mark3&gt;")
</send>
  </trigger>

  <trigger
   group="marks"
   keep_evaluating="y"
   match="^You have (?P&lt;marks&gt;[^ ]+) of (?P&lt;total&gt;[^ ]+) available Marks\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>achieved_marks = "%&lt;marks&gt;"
total_marks = "%&lt;total&gt;"
</send>
  </trigger>


<!-- personal log -->

  <trigger
   group="log"
   keep_evaluating="y"
   match="^You aren\'t holding anything you know how to use properly\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>not_holding_log()
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have returned (?P&lt;crystals&gt;[^ ]+) crystals to the Crystal Guild\, earning (?P&lt;qp&gt;[^ ]+) quest point(|s)\, (?P&lt;pp&gt;[^ ]+) practice(|s) and (?P&lt;exp&gt;[^ ]+) experience\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("crystal quests", "%&lt;crystals&gt;")
add_to_log("crystals - qp earned", "%&lt;qp&gt;")
add_to_log("crystals - pp earned", "%&lt;pp&gt;")
add_to_log("crystals - experience earned", "%&lt;exp&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have bought (?P&lt;num&gt;[^ ]+) piece(|s) of neverwhen equipment for (?P&lt;gold&gt;[^ ]+) gold\, and repaired (?P&lt;repaired&gt;[^ ]+) piece(|s) of neverwhen equipment\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("neverwhen - pieces bought", "%&lt;num&gt;")
add_to_log("neverwhen - gold spent", "%&lt;gold&gt;")
add_to_log("neverwhen - pieces repaired", "%&lt;repaired&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have returned (?P&lt;ygoths&gt;[^ ]+) y\'Goth heads to the y\'Goth hunter in Decara\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("y'goths", "%&lt;ygoths&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have brought (?P&lt;pursuer&gt;[^ ]+) heads to the orc pursuer in Dungeon Wroth\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("orc pursuer quests", "%&lt;pursuer&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have brought (?P&lt;num&gt;[^ ]+) pebble(|s) of tubers to Ahab in Pirate\'s Cove\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("Ahab tubers", "%&lt;num&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have assembled (?P&lt;num&gt;[^ ]+) Orb(|s) of Vandemaar\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("orbs of Vandemaar", "%&lt;num&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have assembled (?P&lt;num&gt;[^ ]+) stat manual(|s) with didactic parchments\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("stat manuals", "&lt;%num&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have won hangman (?P&lt;wins&gt;[^ ]+) time(|s) and lost hangman (?P&lt;losses&gt;[^ ]+) times\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("hangman wins", "&lt;%wins&gt;")
add_to_log("hangman losses", "&lt;%losses&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have (?P&lt;num&gt;[^ ]+) folklore\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("folklore", "&lt;%num&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have a pk rating of (?P&lt;pkrat&gt;[^ ]+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("pk rating", "&lt;%pkrat&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have completed (?P&lt;num&gt;[^ ]+) quests for Luzzardo Malvenu\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("luzzardo quests", "&lt;%num&gt;")
</send>
  </trigger>

 <trigger
   group="log"
   keep_evaluating="y"
   match="^\* To see which bosses you have killed\, \&quot;use log bosses\&quot;\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You are completed currently retrieving (?P&lt;what&gt;.+) for a lithe woman wearing a thousand bits of cloth loosely sewn together\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("Black Lodge next", "&lt;%what&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have Last received a daily reward from Xaventry at (?P&lt;when&gt;.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("last daily Xaventry", "%&lt;when&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have Last received a daily reward from New Rigel at (?P&lt;when&gt;.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("last daily New Rigel", "%&lt;when&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have Last received a daily reward from Tellerium at (?P&lt;when&gt;.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("last daily Tellerium", "%&lt;when&gt;")
</send>
  </trigger>

  <trigger
   group="log"
   keep_evaluating="y"
   match="^\* You have Last received a daily reward from Sigil at (?P&lt;when&gt;.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>add_to_log("last daily Sigil", "%&lt;when&gt;")
</send>
  </trigger>


<!-- scan -->

<!-- empty directions -->

  <trigger
   group="scan"
   keep_evaluating="y"
   match="^You don\'t see anything (to the (.+)|upwards|downwards)\.$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

<!-- non-empty line -->

  <trigger
   group="scan"
   expand_variables="y"
   match="^(|\* )(?P&lt;what&gt;(@!char_name)) (|\[Player\] )(|is )(?P&lt;dist&gt;(right here|close by|not far off|a brief walk away|rather far off|in the distance|almost out of sight)) (to the (.+)|upwards|downwards)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>process_scan("%0", "%&lt;what&gt;", "%&lt;dist&gt;")
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  checking = nil
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/meh_filters.xml",
  }
  return (table.concat(t, ";"))
end



------------------
-- generic stuff
------------------

function auto_cont()
  SendNoEcho("C")
end


function on_prompt()
  EnableTrigger("a_prompt", false)

  if (checking == "score") then
    end_score_capture()
    show_score()

  elseif (checking == "skills") then
    end_skills_capture()
    show_skills()

  elseif (checking == "spells") then
    end_spells_capture()
    show_spells()

  elseif (checking == "marks") then
    end_marks_capture()
    show_marks()

  elseif (checking == "log") then
    end_log_capture()
    show_log()

  elseif (checking == "scan") then
    end_scan()
  end

  checking = nil
end


function search_items(t, s)
  local taux = {}

  for key, value in pairs(t) do
    if string.find(string.lower(key), string.lower(s)) then
      taux[key] = value
    end
  end

  return taux
end


function show_htable(t)
  local tres = {}

  for key, value in pairs(t) do
    if (type(value) ~= "table") then
      tres[#tres + 1] = key .. ": " .. value
    else
      tres[#tres + 1] = key .. ": [" .. subht_as_string(value) .. "]"
    end
  end

  table.sort(tres)

  for i = 1, #tres do
    Note(tres[i])
  end

  return (#tres > 0)
end


function subht_as_string(t)
  local tres = {}

  for k, v in pairs(t) do
    tres[#tres + 1] = k .. ": " .. v
  end

  table.sort(tres)

  local s = table.concat(tres, ",")
  s = string.gsub(s, ",", ", ")

  return Trim(s)
end



----------
-- score
----------

function check_score(name)
  score_checking = Trim(name)
  init_score_capture()
  SendNoEcho("score")
end


function init_score_capture()
  checking = "score"
  tscore = {}
  EnableTrigger("continue", true)
  EnableTrigger("a_prompt", true)
  EnableTriggerGroup("score", true)
end


function add_to_score(name, value)
  tscore[name] = value
end


function end_score_capture()
  EnableTrigger("continue", false)
  EnableTriggerGroup("score", false)
end


function show_score()
  local t = search_items(tscore, score_checking)
  local res = show_htable(t)

  if (not res) then
    Note("No matches. Type 'list score keys' to see the list of options.")
  end

  tscore = nil
  score_checking = nil
end


function list_score_keys()
  Note("Score keys: age, agility, alignment, alignment trending, arena losses, arena wins, away message, birth date, bp, class, class level, courage, crystal quests, deity, experience, experience tnl, first class, fourth class, gender, honors, hours, hp, items carried, knowledge, luck, marks, max agility, max courage, max knowledge, max luck, max personality, max sanity, max strength, max vitality, max wisdom, name, npc kills, pcc combat, pcc defense, pcc mystical, pcc technical, pcc weaponry, personality, piety, pk deaths, pk kills, pk rating, pp, qp, quests, race, relationships, reputation, reputation title, ru, sanity, scc, second class, sp, st, strength, third class, total deaths, total hp, total level, total sp, total st, vitality, weight carried, wisdom.")
end



-----------
-- skills
-----------

function check_skills(name)
  skills_checking = Trim(name)
  init_skills_capture()
  SendNoEcho("skills proficiencies")
end


function init_skills_capture()
  checking = "skills"
  tskills = {}
  EnableTrigger("continue", true)
  EnableTrigger("a_prompt", true)
  EnableTriggerGroup("skillspell", true)
end


function add_skill(name, t, cmplx, lrnd)
  tskills[name] = {
    type = t,
    complexity = cmplx .. "%",
    learned = lrnd .. "%",
  }
end


function end_skills_capture()
  EnableTrigger("continue", false)
  EnableTriggerGroup("skillspell", false)
end


function show_skills()
  local t = search_items(tskills, skills_checking)
  local res = show_htable(t)

  if (string.find("skills total", string.lower(skills_checking))) then
    Note("skills total: " .. skills_total)
    res = true
  end

  if (not res) then
    Note("No matches.")
  end

  tskills = nil
  skills_checking = nil
  skills_total = nil
end



-----------
-- spells
-----------

function check_spells(name)
  spells_checking = Trim(name)
  init_spells_capture()
  SendNoEcho("skills spells")
end


function init_spells_capture()
  checking = "spells"
  tspells = {}
  EnableTrigger("continue", true)
  EnableTrigger("a_prompt", true)
  EnableTriggerGroup("skillspell", true)
end


function add_spell(name, sch, spell_points, cmplx, lrnd)
  tspells[name] = {
    school = sch,
    sp = spell_points,
    complexity = cmplx .. "%",
    learned = lrnd .. "%",
  }
end


function end_spells_capture()
  EnableTrigger("continue", false)
  EnableTriggerGroup("skillspell", false)
end


function show_spells()
  local t = search_items(tspells, spells_checking)
  local res = show_htable(t)

  if (string.find("spells total", string.lower(spells_checking))) then
    Note("spells total: " .. spells_total)
    res = true
  end

  if (not res) then
    Note("No matches.")
  end

  tspells = nil
  soells_checking = nil
  spells_total = nil
end



----------
-- marks
----------

function check_marks(name)
  marks_checking = Trim(name)
  init_marks_capture()
  SendNoEcho("score marks")
end


function init_marks_capture()
  checking = "marks"
  tmarks = {}
  EnableTrigger("continue", true)
  EnableTrigger("a_prompt", true)
  EnableTriggerGroup("marks", true)
end


function add_marks(mark1, mark2, mark3)
  tmarks[#tmarks + 1] = mark1

  if (mark2 ~= "") then
    tmarks[#tmarks + 1] = mark2
  end

  if (mark3 ~= "") then
    tmarks[#tmarks + 1] = mark3
  end
end


function end_marks_capture()
  EnableTrigger("continue", false)
  EnableTriggerGroup("marks", false)
end


function show_marks()
  local s = matching_items_as_string(tmarks, marks_checking)

  if (s ~= "") then
    Note(s)
  end

  res = (s ~= "")

  if (string.find("achieved marks", string.lower(marks_checking))) then
    Note("achieved marks: " .. achieved_marks)
    res = true
  end

  if (string.find("total marks", string.lower(marks_checking))) then
    Note("total marks: " .. total_marks)
    res = true
  end

  if (not res) then
    Note("No matches.")
  end

  tmarks = nil
  marks_checking = nil
  achieved_marks = nil
  total_marks = nil
end


function matching_items_as_string(t, s)
  local tres = {}

  for i = 1, #t do
    if (string.find(string.lower(t[i]), string.lower(s))) then
      tres[#tres + 1] = t[i]
    end
  end

  table.sort(tres)

  local res = table.concat(tres, ",")
  res = string.gsub(res, ",", ", ")

  return Trim(res)
end



-----------------
-- personal log
-----------------

function check_log(name)
  log_checking = Trim(name)
  init_log_capture()
  SendNoEcho("use log")
end


function init_log_capture()
  checking = "log"
  tlog = {}
  EnableTrigger("continue", true)
  EnableTrigger("a_prompt", true)
  EnableTriggerGroup("log", true)
end


function not_holding_log()
  checking = nil
  end_log_capture()
  Note("Hold your personal log before you use this command!")
end


function add_to_log(name, value)
  tlog[name] = value
end


function end_log_capture()
  EnableTrigger("continue", false)
  EnableTriggerGroup("log", false)
end


function show_log()
  local t = search_items(tlog, log_checking)
  local res = show_htable(t)

  if (not res) then
    Note("No matches. Type 'list log keys' to see the list of options.")
  end

  tlog = nil
  log_checking = nil
end


function list_log_keys()
  Note("Log keys: Ahab tubers, Black Lodge next, crystal quests, crystals - experience earned, crystals - pp earned, crystals - qp earned, folklore, hangman losses, hangman wins, last daily New Rigel, last daily Sigil, last daily Tellerium, last daily Xaventry, luzzardo quests, neverwhen - gold spent, neverwhen - pieces bought, neverwhen - pieces repaired, orbs of Vandemaar, orc pursuer quests, pk rating, stat manuals, y'goths.")
end



--------------
-- GMCP char
--------------

function check_gmcp_char(name)
  wait.make(function()
    Execute("sendgmcp char.base")
    Execute("sendgmcp char.clan")
    Execute("sendgmcp char.maxstats")
    Execute("sendgmcp char.stats")
    Execute("sendgmcp char.status")
    Execute("sendgmcp char.vitals")
    Execute("sendgmcp char.worth")

    gmcpdata = nil

    while (not gmcpdata) do
      wait.time(.5)
      get_gmcp_char()
    end

    local param = string.lower(Trim(name))

    local res = false

    for group, keys in pairs(gmcpdata) do
      for key, value in pairs(keys) do
        if (string.find(group .. "." .. key, param)) then
          if (value == "_empty") then
            value = "-"
          end
          Note(group .. "." .. key .. ": " .. value)

          res = true
        end
      end
    end

    if (not res) then
      Note("No matches. Type 'list gmcp char groups' to see the list of groups.")
    end

    DeleteVariable("gmcpchar")
    tchar = nil
  end)
end


function get_gmcp_char()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char")
  luastmt = "gmcpdata = " .. gmcparg

  assert(loadstring(luastmt or ""))()
end


function list_gmcp_char_groups()
  Note("GMCP char groups: base, clan, form, maxstats, stats, status, vitals, worth.")
end



---------
-- scan
---------

function check_scan(what)
  scan_checking = string.lower(Trim(what))
  checking = "scan"
  EnableTrigger("continue", true)
  EnableTrigger("a_prompt", true)
  EnableTriggerGroup("scan", true)
  SendNoEcho("scan")
end


function process_scan(line, what, dist)
  local scan_dist ={
    ["right here"] = "1",
    ["close by"] = "2",
    ["not far off"] = "3",
    ["a brief walk away"] = "4",
    ["rather far off"] = "5",
    ["in the distance"] = "6",
    ["almost out of sight"] = "7"
  }

  local dist_as_num, desc

  if (string.find(string.lower(what), scan_checking)) then
    local dist_as_num = tonumber(scan_dist[dist] or "")
    if (dist_as_num) then
      if (dist_as_num == 1) then
        desc = " room away"
      else
        desc = " rooms away"
      end

      line = string.gsub(line, dist, dist_as_num .. desc)
    end

    Note(line)
  end
end


function end_scan()
  EnableTrigger("continue", false)
  EnableTriggerGroup("scan", false)
end


]]>

</script>

</muclient>

