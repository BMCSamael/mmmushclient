<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Saved on Friday, November 3, 2023, 6:47% PM -->
<!-- MuClient version 4.81 -->

<muclient>

<plugin
   name="Curio_Altars"
   author="Tamlin"
   id="e677af093e715dece34dc47f"
   language="Lua"
   purpose="Captures and processes altar data from game output"
   save_state="n"
   date_written="2024-09-12"
   date_modified="2024-09-15"
   requires="4.81"
   version="1.1"
   >

<description trim="y">

<![CDATA[

.-------------.
| CurioAltars |
-------------'

This plugin captures altar data from the game and processes it to track active and inactive altars, including their effects and expiration dates. 

Author: Tamlin

Syntax:
CurioAltars <on/off>
CurioAltars show_active

]]>

</description>

</plugin>
<!-- Aliases -->

<aliases>
  <alias
    name="CurioAltars"
    match="^curioaltars[ ]+(?<status>on|off|show_active)$"
    regexp="y"
    enabled="y"
    script="toggle_plugin"
    >
  </alias>
</aliases>
<!-- Script Aliases -->

<!-- Triggers -->

<triggers>
<trigger
    enabled="y"
    match="^(?<altar_name>[A-Za-z ]*(Altar|Alta|Alte|Alt|A|Al))(?::)?\s+(?<altar_effect>\d+\s*\w[\w\s\-]*|altar\s+not\s+active\.)$"
    group="altar_data"
    keep_evaluating="n"
    regexp="y"
    omit_from_output="y"
    sequence="100"
    script="capture_altar_data"
 />
 
 <trigger
    enabled="y"
    match="^Expires on\s+(?<expire_date>[\w\s:]+ \d{4})\.$"
    group="altar_data"
    keep_evaluating="n"
    regexp="y"
    omit_from_output="y"
    sequence="101"
    script="capture_expiration_data"
 />

	<trigger
	enabled="y"
    match="^Type 'HELP CURIO' for more information\.$"
    group="altar_data"
    keep_evaluating="n"
    omit_from_output="y"
    regexp="y"
    sequence="101"
    script="curio_complete"
	/>
</triggers>

<!-- Script -->

<script>

<![CDATA[
-- Define a flag to check if header has been printed
local header_printed = false
local last_altar = "Curious"

-- Queue for altar updates
local update_queue = {}

-- Define column widths for alignment
local name_width = 15
local effect_width = 20
local expire_width = 13
local area_width = 30
local room_no_width = 10
--local coin_width = 7
local affects_width = 55

-- Called when the plugin is first installed
function OnPluginInstall()
    Note("CurioAltars plugin installed and ready to capture altar data.")
end

function plugin_update_url()
    local t = {"https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/src/curio_altar.xml",  }
    return (table.concat(t, ";"))
end

function plugin_update_aux_url()
    local t = {}
    return (table.concat(t, ";"))
end
		
function OnHelp()
	ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
	Note("")
	ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end
		
-- Table to store altar data
local altar_data = {
    ["Curious Altar"] = {
        effect = "",
        area = "Rune Forest (Misty Path)",
        room_no = 946163,
        affects = {"3 STR", "3 SAN", "3 AGI"},
        coins = 1,
        expire_date = "",
        name = "Curious"
    },
    ["Joyful Altar"] = {
        effect = "",
        area = "Diocletian",
        room_no = 28952,
        affects = {"3 KNOW", "3 PER", "3 WIS"},
        coins = 1,
        expire_date = "",
        name = "Joyful"
    },
    ["Angry Altar"] = {
        effect = "",
        area = "Tellerium",
        room_no = 41205,
        affects = {"3 LUCK", "3 COUR", "3 VIT"},
        coins = 1,
        expire_date = "",
        name = "Angry"
    },
    ["Sad Altar"] = {
        effect = "",
        area = "Jalur",
        room_no = 336837,
        affects = {"10 BASE STAM RG", "10 BASE HP REG", "10 BASE SP REG"},
        coins = 1,
        expire_date = "",
        name = "Sad"
    },
    ["Fearful Altar"] = {
        effect = "",
        area = "Sigil",
        room_no = 28042,
        affects = {"5% HEAL OTHERS", "4 AR", "3% SPELLDMG"},
        coins = 1,
        expire_date = "",
        name = "Fearful"
    },
    ["Serene Altar"] = {
        effect = "",
        area = "Deceit (Yourb)",
        room_no = 17833,
        affects = {"3% FIRE RES", "3% WATER RES", " 3% AIR RES"},
        coins = 1,
        expire_date = "",
        name = "Serene"
    },
    ["Envious Altar"] = {
        effect = "",
        area = "Lonely Dragon",
        room_no = 155235,
        affects = {"3 STR", "3 SAN", "3 AGI"},
        coins = 1,
        expire_date = "",
        name = "Envious"
    },
    ["Loving Altar"] = {
        effect = "",
        area = "Twin Moons",
        room_no = 154884,
        affects = {"3 KNOW", "3 PER", "3 WIS"},
        coins = 1,
        expire_date = "",
        name = "Loving"
    },
    ["Confused Altar"] = {
        effect = "",
        area = "Boar Tavern",
        room_no = 7998,
        affects = {"3 LUCK", "3 COUR", "3 VIT"},
        coins = 1,
        expire_date = "",
        name = "Confused"
    },
    ["Hopeful Altar"] = {
        effect = "",
        area = "Ogre Village (Bent)",
        room_no = 167051,
        affects = {"3% PIERCE RES", "3% SLASH RES", "3% BASH RES"},
        coins = 1,
        expire_date = "",
        name = "Hopeful"
    },
    ["Bored Altar"] = {
        effect = "",
        area = "Manticore",
        room_no = 27697,
        affects = {"3% POI RES", "3% ACID RES", "3% DIS RES"},
        coins = 1,
        expire_date = "",
        name = "Bored"
    },
    ["Chemically Alte"] = {
        effect = "",
        area = "Not Yet Implemented",
        room_no = 0,
        affects = {},
        coins = 1,
        expire_date = "",
        name = "Chemically"
    },
    ["Triumphant Alta"] = {
        effect = "",
        area = "Avarice (Draco)",
        room_no = 13958,
        affects = {"3% MENTAL RES", "3% SURPRISE RES", "3% HOLY RES"},
        coins = 1,
        expire_date = "",
        name = "Triumphant"
    },
    ["Mischievous Alt"] = {
        effect = "",
        area = "Beyonder",
        room_no = 3146848,
        affects = {"3% NEG RES", "3% CORRUPTION RES", "3% ENERGY RES"},
        coins = 1,
        expire_date = "",
        name = "Mischievous"
    },
    ["Determined Alta"] = {
        effect = "",
        area = "Sea Hag (Damy)",
        room_no = 152944,
        affects = {"3% MOON RES", "3% SUN RES", "3% TIME RES"},
        coins = 1,
        expire_date = "",
        name = "Determined"
    },
    ["Jealous Altar"] = {
        effect = "",
        area = "Wroth Portal Room",
        room_no = 7920,
        affects = {"3% EMO RES", "3% FEAR RES", "3% HARM RES", "3% PAIN RES"},
        coins = 1,
        expire_date = "",
        name = "Jealous"
    },
    ["Content Altar"] = {
        effect = "",
        area = "PC (Kraken)",
        room_no = 30301,
        affects = {"3% COLD RES", "3% DROWN RES", "3% LIGHTNING RES"},
        coins = 1,
        expire_date = "",
        name = "Content"
    },
    ["Ambitious Altar"] = {
        effect = "",
        area = "Vyst",
        room_no = 40721,
        affects = {"50 Weight Mod", "1% attack chance", "1% defense chance"},
        coins = 2,
        expire_date = "",
        name = "Ambitious"
    },
    ["Lonely Altar"] = {
        effect = "",
        area = "Waylander's",
        room_no = 33869,
        affects = {"2% Crit Chance", "+10 Crit DMG", "7% Inventory Cap"},
        coins = 2,
        expire_date = "",
        name = "Lonely"
    },
    ["Excited Altar"] = {
        effect = "",
        area = "Focault",
        room_no = 15298,
        affects = {"1 Sold Use", "1 Wiz Use", "1 Shaman Use"},
        coins = 2,
        expire_date = "",
        name = "Excited"
    },
    ["Nostalgic Altar"] = {
        effect = "",
        area = "Aequtus",
        room_no = 195862,
        affects = {"7% Cold Res", "7% Lightning Res", "7% Drown Res"},
        coins = 2,
        expire_date = "",
        name = "Nostalgic"
    },
    ["Proud Altar"] = {
        effect = "",
        area = "Kings Chamber (Seelie)",
        room_no = 32109,
        affects = {"7% summon res", "7% charm res", "7% necro res"},
        coins = 2,
        expire_date = "",
        name = "Proud"
    },
    ["Peaceful Altar"] = {
        effect = "",
        area = "Scientist Lathimus (Rahdiyr)",
        room_no = 199930,
        affects = {"7% Time Resist", "7% Lightbeam Res", "7% Sound Res"},
        coins = 3,
        expire_date = "",
        name = "Peaceful"
    },
    ["Vengeful Altar"] = {
        effect = "",
        area = "Deragaz (Vir)",
        room_no = 146915,
        affects = {"7% Pierce Res", "7% Bash Res", "7% Slash Res"},
        coins = 3,
        expire_date = "",
        name = "Vengeful"
    },
    ["Compassionate A"] = {
        effect = "",
        area = "Avarice Succubus Sacrifice",
        room_no = 13957,
        affects = {"7% fire res", "7% earth res", "7% air res", "7% water res"},
        coins = 3,
        expire_date = "",
        name = "Compassionate"
    },
    ["Rebellious Alta"] = {
        effect = "",
        area = "Spymaster",
        room_no = 32505,
        affects = {"7% poi res", "7% dis res", "7% acid res"},
        coins = 3,
        expire_date = "",
        name = "Rebellious"
    },
    ["Frustrated Alta"] = {
        effect = "",
        area = "Ariend'yth",
        room_no = 151274,
        affects = {"7% Surprise Res", "7% Mental Res", "7% Holy Res"},
        coins = 3,
        expire_date = "",
        name = "Frustrated"
    },
    ["Grateful Altar"] = {
        effect = "",
        area = "Tirona",
        room_no = 33099,
        affects = {"7% Neg Resist", "7% Corrupt Resist", "7% Energy Res"},
        coins = 3,
        expire_date = "",
        name = "Grateful"
    },
    ["Regretful Altar"] = {
        effect = "",
        area = "Future Anguish",
        room_no = 34091,
        affects = {"7% moonlight res", "7% sunlight res", "7% time-para res"},
        coins = 3,
        expire_date = "",
        name = "Regretful"
    },
    ["Inspired Altar"] = {
        effect = "",
        area = "Begora Sanctuary",
        room_no = 96034,
        affects = {"7% EMO Res", "7% Fear Res", "7% Harm Res"},
        coins = 3,
        expire_date = "",
        name = "Inspired"
    },
	 ["Suspicous Altar"] = {
        effect = "",
        area = "Swivelling Hooks Red ~",
        room_no = 12336,
        affects = {"8 Inventory Capacity", "5% attack chance"},
        coins = 3,
        expire_date = "",
        name = "Suspicious"
    },
    ["Overwhelmed Alt"] = {
        effect = "",
        area = "The Coven of Kalywak",
        room_no = 153834,
        affects = {"+5% attack chance", "+5% defense chance"},
        coins = 3,
        expire_date = "",
        name = "Overwhelmed"
    },
    ["Tranquil Altar"] = {
        effect = "",
        area = "HBNT Manifest - Hidden Alcove",
        room_no = 107297,
        affects = {"+5% defense chance", "100 weight modifier"},
        coins = 3,
        expire_date = "",
        name = "Tranquil"
    }, 
	["Breathtaking Al"] = {
        effect = "",
        area = "Rune Van Pelt (RU)",
        room_no = 353834,
        affects = {"7% Necro", "7% Cold", "7% Fire", "7% Lightning", "7% Mental"},
        coins = 1,
        expire_date = "PERM",
        name = "Breathtaking"
    },
	["Priceless Altar"] = {
        effect = "ALL",
        area = "Rune Van Pelt (RU)",
        room_no = 353849,
        affects = {"35 SP, 5 Sp-R, 25 RfSpl, 3 Orien, 5 Dig, 4 Dmg, 50 Hp"},
        coins = 1,
        expire_date = "PERM",
        name = "Priceless"
    }
}


-- Function to queue altar updates
function queue_altar_update(altar_name, altar_effect, expire_date_str)
	local existing_data = altar_data[altar_name]
    if existing_data then
        -- Update altar data
        existing_data.effect = altar_effect
	        		
		-- Determine expiration date
		local expire_date = parse_date(expire_date_str)
        if not expire_date then
            expire_date_str = "N/A"
        end
        
        if altar_effect:match("altar not active") then
            existing_data.expire_date = "N/A"
        else
            existing_data.expire_date = expire_date_str
        end

        -- Ensure unique entries in the update queue
        local already_in_queue = false
        for _, item in ipairs(update_queue) do
            if item.name == existing_data.name then
                already_in_queue = true
                break
            end
        end

        if not already_in_queue then
            -- Queue the updated altar data
            table.insert(update_queue, existing_data)
        end
    else
        Note("No existing data found for altar: " .. altar_name)
    end
end

-- Function to process the update queue
function process_update_queue()

 -- Ensure header is printed before processing the queue
 if not header_printed then 
	        -- Print the header
        ColourTell("cyan", "black", string.format("%-" .. name_width .. "s", "Altar Name"))
        ColourTell("cyan", "black", string.format("%-" .. effect_width .. "s", "Effects"))
		ColourTell("cyan", "black", string.format("%-" .. expire_width .. "s", "Expires"))
       -- ColourTell("cyan", "black", string.format("%-" .. coin_width .. "s", "Cost"))
		ColourTell("cyan", "black", string.format("%-" .. affects_width .. "s", "Potential Affects"))
		ColourTell("cyan", "black", string.format("%-" .. area_width .. "s", "Area"))
        ColourTell("cyan", "black", string.format("%-" .. room_no_width .. "s", "Room No"))
		Note("\r\n")
		ColourTell("cyan", "black", string.rep("-", name_width + effect_width + expire_width + affects_width + area_width + room_no_width))
		Note("\r\n")
        header_printed = true
    end
	
    while #update_queue > 0 do
        local altar_info = table.remove(update_queue, 1)
        output_altar_info(altar_info)
    end
end

-- Function to capture altar data
function capture_altar_data(name, line, wildcards)
    local altar_name = wildcards.altar_name
    local altar_effect = wildcards.altar_effect
	if altar_name == "Priceless Altar" then 
		altar_effect = "All"
	end
    last_altar = altar_name

    -- Normalize altar_name by trimming extra spaces
    altar_name = altar_name:gsub("%s+$", "")

    -- Queue altar data with placeholder expiration
    queue_altar_update(altar_name, altar_effect, "Placeholder")
end

-- Function to output the combined altar information
function output_altar_info(altar_info)
    -- Determine the altar name from the altar_info's room number (or any unique key)
    local altar_name = nil
    for name, data in pairs(altar_data) do
        if data.name == altar_info.name then
            altar_name = name
            break
        end
    end

    if not altar_name then
        altar_name = "Unknown"
    else
        -- Extract the first word of the altar_name
        altar_name = altar_name:match("^[^%s]+")
    end

local color = "green"	
	if not altar_info.effect:match("altar not active") then 
		local fmt_expire_date = parse_date(altar_info.expire_date)
		local current_time = os.time()
		local seconds_in_a_day = 60 * 60 * 24
		local days_remaining = 0
		if fmt_expire_date then
			days_remaining = math.ceil((fmt_expire_date - current_time) / seconds_in_a_day)
		end
		if days_remaining <= 15 then
			color = "red"
		elseif days_remaining <= 30 and days_remaining >= 1 then
			color = "yellow"
		end
	else 
		color = "grey"
	end

    -- Format each column with padding and alignment
    local formatted_name = string.format("%-" .. name_width .. "s", altar_name or "Unknown")
    local formatted_effect = string.format("%-" .. effect_width .. "s", altar_info.effect or "N/A")
    local formatted_expires = string.format("%-" .. expire_width .. "s", format_expire_date(altar_info.expire_date) or "N/A")
	if altar_name == "Breathtaking" or altar_name == "Priceless" then
		color = "orange"
		formatted_expires = string.format("%-" .. expire_width .. "s", "PERM")
	end
    local formatted_area = string.format("%-" .. area_width .. "s", altar_info.area or "N/A")
    local formatted_room_no = string.format("%-" .. room_no_width .. "s", altar_info.room_no > 0 and altar_info.room_no or "Unknown")
    --local formatted_coins = string.format("%-" .. coin_width .. "s", altar_info.coins or 0)
    local formatted_affects = table.concat(altar_info.affects or {}, ", ")
    local formatted_affects_list = string.format("%-" .. affects_width .. "s", formatted_affects)

    -- Display the information with colors
    ColourTell("cyan", "black", formatted_name)
    if altar_info.effect:match("altar not active") then
        ColourTell("grey", "black", formatted_effect)
    else
        ColourTell("white", "black", formatted_effect)
    end

    ColourTell(color, "black", formatted_expires)
    --ColourTell("white", "black", formatted_coins)
    ColourTell("magenta", "black", formatted_affects_list)
    ColourTell("yellow", "black", formatted_area)

    if altar_info.room_no > 0 then 
        ColourTell("white", "black", "# ")
        Hyperlink("mapper goto " .. altar_info.room_no, altar_info.room_no, "Click only when in area", "cyan", "black", false)
    else
        ColourTell("white", "black", formatted_room_no)
    end
	
	Note("\r\n")
end

function curio_complete(name, line, wildcards)
	header_printed = false
end

-- Function to format date as MM/DD HH:MM
function format_expire_date(expire_date_str)
    local timestamp = parse_date(expire_date_str)
    if not timestamp then
        return "N/A"
    end
    return os.date("%m/%d %H:%M", timestamp)
end

-- Function to parse the date string into a Lua time table
function parse_date(date_str)
    local pattern = "(%a+) (%a+) (%d+) (%d+):(%d+):(%d+) (%d+)"
    local weekday, month, day, hour, min, sec, year = date_str:match(pattern)
	local month_lookup = {
        Jan = 1, Feb = 2, Mar = 3, Apr = 4, May = 5, Jun = 6,
        Jul = 7, Aug = 8, Sep = 9, Oct = 10, Nov = 11, Dec = 12
    }

	if not (month_lookup[month] and day and hour and min and sec and year) then
		pattern = "(%a+) (%a+)  (%d+) (%d+):(%d+):(%d+) (%d+)"
		weekday, month, day, hour, min, sec, year = date_str:match(pattern)
	end
	
    if not (month_lookup[month] and day and hour and min and sec and year) then
        return nil -- Return nil if the date string doesn't match the expected format
    end

    return os.time({
        year = tonumber(year),
        month = month_lookup[month],
        day = tonumber(day),
        hour = tonumber(hour),
        min = tonumber(min),
        sec = tonumber(sec)
    })
end

-- Function to capture expiration data
function capture_expiration_data(name, line, wildcards)
    local expire_date_str = wildcards.expire_date
    
    -- Queue expiration data update
    queue_altar_update(last_altar, altar_data[last_altar].effect, expire_date_str)
	process_update_queue()
end


-- Called when the plugin is loaded
function OnPluginLoad()
    Note("CurioAltars plugin loaded.")
end

-- Called when the plugin is unloaded
function OnPluginUnload()
    Note("CurioAltars plugin unloaded.")
end

function toggle_plugin(name, line, wildcards)
	local status = wildcards.status
    if status == "on" then
        Note("CurioAltars plugin is now ON.")
        -- Enable triggers
        EnableTriggerGroup ("altar_data", true)
    elseif status == "off" then
        Note("CurioAltars plugin is now OFF.")
        -- Disable triggers
        EnableTriggerGroup ("altar_data", false)
    elseif status == "show_active" then
        -- Logic to show active altars
        Note("coming soon")
    else
        Note("Unknown command. Use 'CurioAltars <on/off>' or 'CurioAltars show_active'.")
    end
end
]]>
</script>

</muclient>
