<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, October 13, 2012, 3:45 PM -->
<!-- MuClient version 4.85 -->

<!-- Plugin "eq_slots" generated by Plugin Wizard -->

<muclient>

<plugin
   name="eq_slots"
   author="Ruthgul"
   id="94dbcac2c9633407655fdbfa"
   language="Lua"
   purpose="shows a list of empty equipment slots"
   date_written="2012-10-13 15:44:05"
   date_modified="2016-12-13 07:05:19"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.------------.
 | eq_slots |
`------------'

Shows a list of empty equipment slots.

** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- detect_globals (plugin id="d900cb999816b1f6f2d4bdc5") must be installed and enabled.
- global_vars (plugin id="97784abf5f30629a0d7e7307") must be installed and enabled.


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^eq\_slots(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>


<!-- detect gear -->

  <trigger
   enabled="y"
   match="^You are using\:$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>start_detect_gear()
</send>
  </trigger>


  <trigger
   group="capture_gear"
   match="^\&lt;used as light\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_light("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on finger\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_ring("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn around neck\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_neck("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;amulet around neck\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_amulet("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on body\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_on_body("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on head\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_head("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn over face\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_face("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on legs\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_legs("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on feet\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_feet("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on hands\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_hands("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on arms\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_arms("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn as shield\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_shield("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on left wing\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_left_wing("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on right wing\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_right_wing("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn over shoulder\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_shoulder("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn about body\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_about_body("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn around body\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_around_body("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn about waist\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_waist("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on hip\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_hip("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn on tail\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_tail("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;worn around wrist\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_wrist("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;right hand\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_right_hand("%&lt;what&gt;")
</send>
  </trigger>

  <trigger
   group="capture_gear"
   match="^\&lt;left hand\&gt;[ ]+(?P&lt;what&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_left_hand("%&lt;what&gt;")
</send>
  </trigger>


  <trigger
   group="capture_gear"
   match="^$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>end_capture_gear()
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID (), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID (), 1) .. " help")
  Note(" to see info about this plugin --")

  init_stuff()
end


function OnPluginConnect()
  init_stuff()
end


function OnHelp ()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo (GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/eq_slots.xml",
  }
  return (table.concat(t, ";"))
end



------------
-- general
------------

function get_global_var(name)
  local res, val

  res, val = CallPlugin("97784abf5f30629a0d7e7307", "get_global_var", name)

  if (res ~= 0) then
    val = nil
  end

  return val
end



-----------------
-- detect stuff
-----------------

function init_stuff()
  EnableTrigger("first_prompt", true)

  race = nil
end


function on_first_prompt()
  wait.make(function()
    EnableTrigger("first_prompt", false)

    -- give the plugins time to initialize
    wait.time(3)

    race = get_global_var("race")
  end)
end


function OnPluginBroadcast(msg, id, pname, text)
  if (id =="d900cb999816b1f6f2d4bdc5")
  and (pname == "detect_globals") then -- detect_globals
    if (msg == 1) and (text == "race") then
      race = get_global_var("race")
    end
  end
end


function start_detect_gear()
  EnableTriggerGroup("capture_gear", true)
  my_gear = {}
end


function capture_light(what)
  my_gear["light"] = what
end


function capture_ring(what)
  if (not my_gear["finger1"]) then
    my_gear["finger1"] = what
  elseif (not my_gear[finger2]) then
    my_gear["finger2"] = what
  else
    my_gear["finger3"] = what
  end
end


function capture_neck(what)
  if (not my_gear["neck1"]) then
    my_gear["neck1"] = what
  elseif (not my_gear["neck2"]) then
    my_gear["neck2"] = what
  end
end


function capture_amulet(what)
  if (not my_gear["amulet1"]) then
    my_gear["amulet1"] = what
  else --if (not my_gear["amulet2"]) then
    my_gear["amulet2"] = what
  end
end


function capture_on_body(what)
  my_gear["onbody"] = what
end


function capture_head(what)
  my_gear["head"] = what
end


function capture_face(what)
  my_gear["face"] = what
end


function capture_legs(what)
  my_gear["legs"] = what
end


function capture_feet(what)
  my_gear["feet"] = what
end


function capture_hands(what)
  my_gear["hands"] = what
end


function capture_arms(what)
  my_gear["arms"] = what
end


function capture_shield(what)
  my_gear["shield"] = what
end


function capture_left_wing(what)
  my_gear["lwing"] = what
end


function capture_right_wing(what)
  my_gear["rwing"] = what
end


function capture_shoulder(what)
  if (not my_gear["shoulder1"]) then
    my_gear["shoulder1"] = what
  else
    my_gear["shoulder2"] = what
  end
end


function capture_about_body(what)
  my_gear["abtbody"] = what
end


function capture_around_body(what)
  my_gear["rndbody"] = what
end


function capture_waist(what)
  my_gear["waist"] = what
end


function capture_hip(what)
  my_gear["hip"] = what
end


function capture_tail(what)
  my_gear["tail"] = what
end


function capture_wrist(what)
  if (not my_gear["wrist1"]) then
    my_gear["wrist1"] = what
  else
    my_gear["wrist2"] = what
  end
end


function capture_right_hand(what)
  my_gear["rhand"] = what
end


function capture_left_hand(what)
  my_gear["lhand"] = what
end


function end_capture_gear()
  EnableTriggerGroup("capture_gear", false)
  show_empty_slots()
end


function show_empty_slots()
  Note("")
  Tell("Empty equipment slots:")
  for i = 1, #normal_slots do
    if (not my_gear[normal_slots[i]]) then
      ColourTell("silver", "black", " " .. normal_slots[i])
    end
  end

  for i = 1, #extra_slots_races do
    if (race == extra_slots_races[i]) then
      for j = 1, #extra_slots[extra_slots_races[i]] do
        if (not my_gear[extra_slots[extra_slots_races[i]][j]]) then
          ColourTell("silver", "black", " " .. extra_slots[extra_slots_races[i]][j])
        end
      end
    end
  end

  Note("")
  Note("")
end



--------------------
-- eq slots tables
--------------------

normal_slots = {"light", "finger1", "finger2", "neck1", "neck2", "amulet1", "amulet2", "onbody", "head", "face", "legs", "feet", "hands", "arms", "shield", "shoulder1", "shoulder2", "abtbody", "rndbody", "waist", "wrist1", "wrist2", "rhand", "lhand"}

extra_slots_races = {"dracon", "fey", "minotaur", "sahuagin", "sidhe"}

extra_slots = {
  ["dracon"] = {"lwing", "rwing", "tail"},
  ["fey"] = {"lwing", "rwing"},
  ["minotaur"] = {"tail"},
  ["sahuagin"] = {"tail"},
  ["sidhe"] = {"lwing", "rwing"},
}


]]>

</script>

</muclient>
