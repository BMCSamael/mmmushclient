<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, October 04, 2013, 11:47 AM -->
<!-- MuClient version 4.90 -->

<!-- Plugin "meh_pirates" generated by Plugin Wizard -->

<muclient>

<plugin
   name="meh_pirates"
   author="Ruthgul"
   id="57ba85788195beece2a1a171"
   language="Lua"
   purpose="Stuff for beginner pirates"
   save_state="y"
   date_written="2011-11-05 08:55:47"
   date_modified="2021-01-19 13:30:37"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.---------------.
 | meh_pirates |
`---------------'

- Highlights or SAPI says for enemy ship shield collapsed, fire-launcher / harpoon missed, countown for fire-launcher recharged, etc.
- Shipyard helper: suggestions for dumping / restocking resource, latest (seen) prices for ingots / services / etc.
- Salvage helper: distance and direction to Xs.


** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- Sapi_speaker or Text-To-Speech (plugin id = 463242566069ebfd1b379ec1, by Nick Gammon) must be installed and enabled for the read * aliases to work.
- Client setting: Game, Configure, Output > [x] Convert IAC EOR/GA to new line (must be checked).


Syntax:

* meh highlights [on|off]  - toggles highlights & suggested commands on/off
* meh shipyard [on|off]  - toggles the shipyard helper on/off
* meh salvage [on|off]  - toggles the salvage helper on/off

> if the shipyard helper is ON:

* meh config resources  - opens a dialog to edit the wanted amount for each resource
* meh crew  - shows crewmember contract costs, sorted from max to min
* meh drydock  - shows dry docking costs, sorted from max to min
* meh ingots  - shows ingots prices, sorted from max to min
* meh ship where  - shows where you last disembarked from your ship

> sapi stuff

* read hull and shield  - says the current hull and shield using SAPI
* read salvage location  - says the latest salvage X location using SAPI


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

</variables>



<!--  Aliases  -->

<aliases>

<!-- toggles -->

  <alias
   enabled="y"
   match="^meh[ ]+highlights(|[ ]+(?P&lt;status&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_highlights("%&lt;status&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^meh[ ]+shipyard(|[ ]+(?P&lt;status&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_shipyard("%&lt;status&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^meh[ ]+salvage(|[ ]+(?P&lt;status&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_salvage("%&lt;status&gt;")
</send>
  </alias>


<!-- config wanted resources -->

  <alias
   group="ph_shipyard"
   match="^meh[ ]+config[ ]+resources$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>config_resources()
</send>
  </alias>


<!-- shipyard prices -->

  <alias
   group="ph_shipyard"
   match="^meh[ ]+crew(|men)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_n_show_crew_costs()
</send>
  </alias>

  <alias
   group="ph_shipyard"
   match="^meh[ ]+drydock$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_n_show_drydock_costs()
</send>
  </alias>

  <alias
   group="ph_shipyard"
   match="^meh[ ]+ingots$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_n_show_ingot_prices()
</send>
  </alias>


<!-- disembark -->

  <alias
   group="ph_shipyard"
   match="^meh[ ]+ship[ ]+where$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_ships_locations()
</send>
  </alias>


<!-- sapi -->

  <alias
   enabled="y"
   match="^read[ ]+hull[ ]+and[ ]+shield$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>read_hull_n_shield()
</send>
  </alias>

  <alias
   group="ph_salvage"
   match="^read[ ]+salvage[ ]+location(|s)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>read_salvage_locations()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   script="OnHelp"
   match="^meh\_pirates(|( |\:)help)$"
   regexp="y"
   enabled="y"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- highlights & suggested commands -->

  <trigger
   group="ph_highlights"
   keep_evaluating="y"
   match="You raise the ship's anchor."
   send_to="12"
   sequence="100"
  >
  <send>do_paste("ship rigging combat")
</send>
  </trigger>

  <trigger
   group="ph_highlights"
   custom_colour="17"
   keep_evaluating="y"
   match="Your ship resurfaces, having been sucked through the cyclonic center of the whirlpool."
   send_to="12"
   sequence="100"
   other_text_colour="white"
   other_back_colour="burlywood"
  >
  <send>sapi_say("you crossed the whirlpool")
</send>
  </trigger>

  <trigger
   group="ph_highlights"
   custom_colour="17"
   keep_evaluating="y"
   match="* to your * seems to have changed direction to intercept you."
   send_to="12"
   sequence="100"
   other_text_colour="white"
   other_back_colour="red"
  >
  <send>sapi_say("incoming pirate")
do_paste("ship target attacker")
</send>
  </trigger>

  <trigger
   group="ph_highlights"
   custom_colour="17"
   keep_evaluating="y"
   match="^FOOSH\! Your ship fires (one|two) harpoon round(|s) at (.+)\, and none land\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   other_text_colour="white"
   other_back_colour="gray"
  >
  <send>sapi_say("harpoon missed")
</send>
  </trigger>

  <trigger
   group="ph_highlights"
   custom_colour="17"
   keep_evaluating="y"
   match="^WHSST\! Your ship fires (one|two) fire\-launcher round(|s) at (.+)\, and none land\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   other_text_colour="white"
   other_back_colour="darkviolet"
  >
  <send>ship_firelauncher_failed()
</send>
  </trigger>

  <trigger
   group="ph_highlights"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;name&gt;(@!char_name))\'s shields (collapse|have collapsed) due to (extensive|the) (.+) damage\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>trigger_style_runs = TriggerStyleRuns
ship_shield_collapsed("%0", "%&lt;name&gt;")
</send>
  </trigger>


<!-- prompt reader -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(|\[(.+)\])\((?P&lt;hull&gt;[0-9]+)hull (.+)dir (.+) (.+)wind(| (?P&lt;shield&gt;[0-9]+)\%shld)(| [0-9]+\, [0-9]+)\) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>-- ship prompt
capture_hull_n_shield("%&lt;hull&gt;", "%&lt;shield&gt;")
</send>
  </trigger>


<!-- salvage helper -->

  <trigger
   group="ph_salvage"
   keep_evaluating="y"
   match="^(  Visible Exits\: (.+) |You climb up to the crow\'s nest of (.+) and look in every direction\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>start_salvage_capture()
</send>
  </trigger>

  <trigger
   group="capture_line"
   keep_evaluating="y"
   match="^[ \?\!\&quot;\#\%\(\)\*\+\-\.\/\:\=\?\@4AIOQTVXiov\\\^\_\{\~]+$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_salvage_line("%0")
</send>
  </trigger>

  <trigger
   group="capture_line"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>end_salvage_capture()
</send>
  </trigger>

  <trigger
   group="ph_salvage"
   keep_evaluating="y"
   match="^[ ]+A large cargo steamer trunk floats here\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>do_paste("ship salvage")
</send>
  </trigger>


<!-- buying resources -->

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^\#[ ]+Cargo Type[ ]+Amount[ ]+Weight$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>start_calc_resource()
</send>
  </trigger>

<!-- disabled -->
  <trigger
   keep_evaluating="y"
   match="^(?P&lt;num&gt;[0-9]+)[ ]+basic\-cannonball[ ]+(?P&lt;have&gt;[0-9]+)[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_resource("%&lt;num&gt;", "basic cannonball", "%&lt;have&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^(?P&lt;num&gt;[0-9]+)[ ]+black\-powder[ ]+(?P&lt;have&gt;[0-9]+)[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_resource("%&lt;num&gt;", "black powder", "%&lt;have&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^(?P&lt;num&gt;[0-9]+)[ ]+heavy\-ballista\-bolt[ ]+(?P&lt;have&gt;[0-9]+)[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_resource("%&lt;num&gt;", "heavy ballista bolt", "%&lt;have&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^(?P&lt;num&gt;[0-9]+)[ ]+heavy\-cannonball[ ]+(?P&lt;have&gt;[0-9]+)[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_resource("%&lt;num&gt;", "heavy cannonball", "%&lt;have&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^(?P&lt;num&gt;[0-9]+)[ ]+light\-ballista\-bolt[ ]+(?P&lt;have&gt;[0-9]+)[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_resource("%&lt;num&gt;", "light ballista bolt", "%&lt;have&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^(?P&lt;num&gt;[0-9]+)[ ]+medium\-cannonball[ ]+(?P&lt;have&gt;[0-9]+)[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_resource("%&lt;num&gt;", "medium cannonball", "%&lt;have&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^(?P&lt;num&gt;[0-9]+)[ ]+sulfur\-mix[ ]+(?P&lt;have&gt;[0-9]+)[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_resource("%&lt;num&gt;", "sulfur mix", "%&lt;have&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^A total of (.+) unit(|s) of (.+) resource(|s)\, weighing (?P&lt;cweight&gt;.+)st(|s)(| (.+) pb(|s))/(?P&lt;tweight&gt;.+)st(|s)(| 0 pb(|s)).$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>do_buy_resources("%&lt;cweight&gt;", "%&lt;tweight&gt;")
</send>
  </trigger>


<!-- ingots prices -->

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^[ ]+8\) An ingot of gold ore[ ]+1[ ]+(.+)\/(.+)\[[ ]+(?P&lt;sell&gt;[0-9]+)\/[ ]+(?P&lt;buy&gt;[0-9]+) gp\]$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>grab_ingot_prices("%&lt;sell&gt;", "%&lt;buy&gt;")
</send>
  </trigger>

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^[0-9]+[ ]+gold\-ingot[ ]+(?P&lt;num&gt;[0-9\,]+)(|\,(?P&lt;num2&gt;[0-9]+))[ ]+[0-9]+ st\, [0-9]+ pb\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>calc_n_show_expected_profit("%&lt;num&gt;")
</send>
  </trigger>


<!-- shipyard services -->

  <trigger
   group="ph_shipyard"
   keep_evaluating="y"
   match="^Welcome to (?P&lt;place&gt;(Decara|Lowangen|Pirate\'s Cove|Runic|(Northern|Southern) Sigil|Tellerium|Templeton)) Shipyards\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>start_shipyard_capture("%&lt;place&gt;")
</send>
  </trigger>

  <trigger
   group="shipyard_line"
   keep_evaluating="y"
   match="^Crewmen Contract Cost\:[ ]+\[[ ]*(?P&lt;cost&gt;[0-9\,]+)\] gp \(per crew member\)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_shipyard_crewmen("%&lt;cost&gt;")
</send>
  </trigger>

  <trigger
   group="shipyard_line"
   keep_evaluating="y"
   match="^Dry Docking Cost\:[ ]+\[[ ]*(?P&lt;cost&gt;[0-9\,]+)\] gp \(one time fee\)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_shipyard_drydock("%&lt;cost&gt;")
</send>
  </trigger>

  <trigger
   group="shipyard_line"
   keep_evaluating="y"
   match="^Type \'HELP SHIP\' for information on shipyard commands\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>end_shipyard_capture()
</send>
  </trigger>


<!-- board -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You board (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_salvage_if_wanted(true)
boarded()
</send>
  </trigger>


<!-- disembark -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You disembark from (?P&lt;name&gt;.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_salvage_if_wanted(false)
disembarked("%&lt;name&gt;")
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "serialize"
require "wait"
require "gmcphelper"


local debug = false


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    init_vars()
    load_resources()

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginSaveState()
  save_resources()
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  use_events_mini = events_mini_installed()
  use_sapi = sapi_plugin_present()
  reader_present = reader_plugin_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/meh_pirates.xml",
  }
  return (table.concat(t, ";"))
end



-------------------
-- vars & toggles
-------------------

function init_vars()
  gmcp_initialized = false

  config = {
    highlights = ((GetVariable("highlights") or "true") == "true"),
    shipyard = ((GetVariable("shipyard") or "true") == "true"),
    salvage = ((GetVariable("salvage") or "true") == "true"),
  }

  if (config.highlights) then
    EnableTriggerGroup("ph_highlights", true)
  end

  if (config.shipyard) then
    EnableGroup("ph_shipyard", true)
  end

  if (config.salvage) then
    EnableGroup("ph_salvage", true)
  end
end


function toggle_highlights(status)
  config.highlights = do_toggle(config.highlights, status)
  save_options()

  if (config.highlights) then
    EnableTriggerGroup("ph_highlights", true)
    Note("-- pirates_heper: highlights and commands suggestions ON --")

  else
    EnableTriggerGroup("ph_highlights", false)
    Note("-- pirates_heper: highlights and commands suggestions OFF --")
  end
end


function toggle_shipyard(status)
  config.shipyard = do_toggle(config.shipyard, status)
  save_options()

  if (config.shipyard) then
    EnableGroup("ph_shipyard", true)
    Note("-- pirates_heper: shipyard helper ON --")

  else
    EnableGroup("ph_shipyard", false)
    Note("-- pirates_heper: shipyard helper OFF --")
  end
end


function toggle_salvage(status)
  config.salvage = do_toggle(config.salvage, status)
  save_options()

  if (config.salvage) then
    EnableGroup("ph_salvage", true)
    Note("-- pirates_heper: salvage helper ON --")

  else
    EnableGroup("ph_salvage", false)
    Note("-- pirates_heper: salvage helper OFF --")
  end
end


function toggle_salvage_if_wanted(status)
  if (status) and (config.salvage) then
    EnableGroup("ph_salvage", true)
  else
    EnableGroup("ph_salvage", false)
  end
end


function do_toggle(var, status)
  if (status == "on") then
    var = true
  elseif (status == "off") then
    var = false
  else
    var = not var
  end

  return var
end


function save_options()
  SetVariable("highlights", tostring(config.highlights))
  SetVariable("shipyard", tostring(config.shipyard))
  SetVariable("salvage", tostring(config.salvage))

  SaveState()
end



-------------------
-- command window
-------------------

function do_paste(cmd)
  local res = SetCommand(cmd)
  if (res == 0) then
    SetCommandSelection(1, -1)
  end
end



-------------
-- cooldown
-------------

function show_cooldown_done(time, what)
  wait.make(function()
    if (time > 0) then
      wait.time(time)
    end

    sapi_say(what .. " ready")

    if (not reader_present) then
      Note("-- meh_pirates: can use " .. what .. " again --")
    end

    add_to_events("dodgerblue", "black", "-- can use " .. what .. " again --")
  end)
end



-------------
-- events
-------------

function add_to_events(fgcol, bgcol, txt)
  add_to_events_world(fgcol, bgcol, txt)
  add_to_events_mini(fgcol, bgcol, txt)
end


function add_to_events_world(fgcol, bgcol, txt)
  local events = GetWorld("events")

  if (events) then
    events:Note("")
    events:ColourTell("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    events:ColourNote(fgcol, bgcol, txt)
    events:Note("")
  end
end


function add_to_events_mini(fgcol, bgcol, txt)
  function add_style_to_events_mini(fgcol, bgcol, txt)
    CallPlugin("9ced43d0a7b4a60116794096", "add_to_mini", fgcol, bgcol, txt)
  end

  -- OnPluginListChanged() should keep 'use_events_mini' it updated

  if (use_events_mini) then
    add_style_to_events_mini("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    add_style_to_events_mini(fgcol, bgcol, txt)
    add_style_to_events_mini("silver", "black", "\r\n")
  end
end


function events_mini_installed()
  return is_plugin_present("events_mini", "9ced43d0a7b4a60116794096")
end



---------------
-- highlights
---------------

function ship_shield_collapsed(line, name)
  if (string.lower(name) ~= "the ship") then
    sapi_say("enemy's shields collapsed")
    ColourNote("white", "green", line)
    do_paste("ship fire fire-launcher")

  else
    show_original_line()
  end
end


function ship_firelauncher_failed()
  sapi_say("fire-launcher missed")
  do_paste("ship fire fire-launcher")
  show_cooldown_done(14, "firelauncher")
end


function show_original_line()
  for k, v in ipairs(trigger_style_runs) do
    ColourTell(RGBColourToName(v.textcolour),
               RGBColourToName(v.backcolour),
               v.text)
  end

  Note("")
end



-------------------
-- salvage helper
-------------------

function start_salvage_capture(rsensing)
  if (onboard) then
    EnableTriggerGroup("capture_line", true)
    toval = {}
  end
end


function capture_salvage_line(line)
  toval[#toval + 1] = line
end


function end_salvage_capture()
  EnableTriggerGroup("capture_line", false)

  if (#toval > 0) then
    -- find all 4's and all X's relative x, y
    local my_X = {}

    local maxx = 0

    for i = 1, #toval do
      -- find maxx
      if (string.len(toval[i]) > maxx) then
        maxx = string.len(toval[i])
      end

      -- find all Xs
      while (string.find(toval[i], "X")) do
        my_X[#my_X + 1] = {
          x = string.find(toval[i], "X"),
          y = i,
        }
        toval[i] = string.gsub(toval[i], "X", "", 1)
      end
    end

    local my_4 = {
      x = math.floor(maxx / 2) + 1,
      y = math.floor(#toval / 2) + 1,
    }

    salvage_locations = {}

    local dirs, coords

    for i = 1, #my_X do
      dirs, coords = get_distance(my_4, my_X[i])

      salvage_locations[#salvage_locations + 1] = dirs .. " - at " .. coords

      -- show results
      if (not reader_present) then
        Tell("-- meh_pirates - ")
        ColourTell("silver", "black", "salvage: " .. dirs .. " from here - at [" .. coords .. "]")
        Note(" --")

      else
        AppendToNotepad("salvage", coords .. "\r\n")
      end
    end
  end
end


function get_distance(my_4, my_X)
  -- relative position within the vmap portion
  local distx = my_X.x - my_4.x
  local disty = my_X.y - my_4.y

  local dirs = find_relative_distance(distx, disty)

  -- absolute position
  local coordx, coordy
  coordx, coordy = find_absolute_position(distx, disty)

  local coords = coordx .. ", " .. coordy

  return dirs, coords
end


function find_relative_distance(distx, disty)
  local dirx, diry, dirs

  if (distx > 0) then
    dirx = "E"
  elseif (distx < 0) then
    dirx = "W"
  end
  distx = math.abs(distx)

  if (disty > 0) then
    diry = "S"
  elseif (disty < 0) then
    diry = "N"
  end
  disty = math.abs(disty)

  dirs = ""

  -- use diagonals?
  if (distx > 0) and (disty > 0) then
    if (distx < disty) then
      dirs = distx .. " " .. diry .. dirx .. ", " .. (disty - distx) .. " " .. diry
    else
      dirs = disty .. " " .. diry .. dirx .. ", " .. (distx - disty) .. " " .. dirx
    end

  elseif (distx > 0) then
    dirs = distx .. " " .. dirx

  elseif (disty > 0) then
    dirs = disty .. " " .. diry
  end

  return dirs
end


function find_absolute_position(distx, disty)
  local coordx = gmcpval("coord.x")
  local coordy = gmcpval("coord.y")

  local planemaxx = 2299
  local planemaxy = 1499

  coordx = coordx + distx
  if (coordx < 0) then
    coordx = coordx + planemaxx
  end

  coordy = coordy + disty
  if (coordy < 0) then
    coordy = coordy + planemaxy
  end

  return coordx, coordy
end


function read_salvage_locations()
  if (salvage_locations) then
    for i = 1, #salvage_locations do
      sapi_say(salvage_locations[i])
    end
  end
end



---------------------
-- config resources
---------------------

resource_units = {
  ["black powder"] = 10,
  ["sulfur mix"] = 2,
  ["light ballista bolt"] = 10,
  ["heavy ballista bolt"] = 10,
  ["basic cannonball"] = 1,
  ["medium cannonball"] = 1,
  ["heavy cannonball"] = 1,
}

resource_shop_number = {
  ["black powder"] = 1,
  ["sulfur mix"] = 7,
  ["light ballista bolt"] = 5,
  ["heavy ballista bolt"] = 6,
  ["basic cannonball"] = 2,
  ["medium cannonball"] = 3,
  ["heavy cannonball"] = 4,
}

resource_defaults = {
  ["black powder"] = 800,
  ["sulfur mix"] = 46,
  ["light ballista bolt"] = 160,
  ["heavy ballista bolt"] = 90,
  ["basic cannonball"] = 500,
  ["medium cannonball"] = 0,
  ["heavy cannonball"] = 0,
}


function load_resources()
  resource_wanted = {}
  assert(loadstring(GetVariable("resource_wanted") or ""))()

  for resource, amount in pairs(resource_defaults) do
    resource_wanted[resource] = tonumber(resource_wanted[resource] or amount)
  end
end


function save_resources()
  SetVariable("resource_wanted", "resource_wanted = " .. serialize.save_simple(resource_wanted or ""))

  SaveState()
end


function config_resources()
  repeat
    local choices = {}

    -- build table of choices, with existing values
    for resource, amount in pairs(resource_wanted) do
      choices[resource] = resource .. " = " .. amount
    end

    -- choose one ...
    local result = utils.listbox("Choose a resource to edit.\r\n\r\nClick Cancel when done (any changes will be retained).", "Resources", choices)

    -- if not cancelled, update the amount
    if (result) then
      edit_amount(result)
    end -- if they chose something

  until not result  -- loop until dialog cancelled

  save_resources()
  SaveState()
end


function edit_amount(resource)
  local old_val = tonumber(resource_wanted[resource]) or 0

  local response = utils.inputbox(resource, "Change amount", old_val)

  -- if cancelled dialog, just return
  if not response then
    return
  end -- cancelled

  -- check numeric
  local new_val = tonumber(response)

  if (not new_val) then
    utils.msgbox("You must enter a number", "Incorrect input", "ok", "!", 1)
    return
  end

  -- notify them if value changed
  if (new_val ~= old_val) then
    resource_wanted[resource] = new_val

    Tell("-- meh_pirates: ")
    ColourTell("silver", "black", "resource '" .. resource .. "' changed from " .. old_val .. " to " .. new_val)
    Note(" --")
  end
end



-------------------------
-- buy / dump resources
-------------------------

function start_calc_resource()
  sequence_resources = {}
end


function calc_resource(number, name, have)
  local unit = resource_units[name]
  local want = resource_wanted[name]

  local have = string.gsub(have, ",", "")
  have = tonumber(have)

  local buy = math.modf((want - have) / unit)

  local cmd
  if (buy > 0) then
    if (resource ~= "basic cannonball") then
      if (debug) then
        Note("buy: " .. buy .. " " .. resource_shop_number[name])
      end
      cmd = "shop buy " .. buy .. " " .. resource_shop_number[name]
    end

  elseif (have > want) then
    if (debug) then
      Note("sell/dump: " .. number .. " " .. have - want)
    end
    cmd = "ship cargo dump " .. number .. " " .. (have - want)
  end

  if (not sequence_resources) then
    sequence_resources = {}
  end

  sequence_resources[#sequence_resources + 1] = cmd
end


function do_buy_resources(cweight, tweight)
  cweight = string.gsub(cweight, ",", "")
  tweight = string.gsub(tweight, ",", "")

  -- calc how many basic cannonballs to buy, if any
  local buy = tonumber(tweight) - tonumber(cweight) - 1

  if (buy > 0) then
    if (debug) then
      Note("buy: " .. buy .. " 2")
    end
    local cmd = "shop buy " .. buy .. " " .. resource_shop_number["basic cannonball"]
    sequence_resources[#sequence_resources + 1] = cmd
  end

  show_buy_resources()
end


function show_buy_resources()
  Note("")
  Note("-- meh_pirates: drop / sell / buy resources --")

  for i = 1, #sequence_resources do
    ColourNote("silver", "black", sequence_resources[i])
  end
end



---------------
-- GMCP stuff
---------------

function OnPluginBroadcast(msg, id, name, text)
  if (id =="f67c4339ed0591a5b010d05b") -- GMCP message
  and (text == "room.info") then -- room.info
    if (not gmcp_initialized) then
      gmcp_initialized = true
    end

    get_gmcp_room()
    check_if_trading_post()
  end
end


function get_gmcp_room()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "room.info")
  luastmt = "gmcpdata = " .. gmcparg

  assert(loadstring(luastmt or ""))()
end



------------------
-- ingots prices
------------------

local trading_posts = {
  ["10431"] = "Rune",
  ["16224"] = "Lowangen",
  ["28611"] = "Sigil N",
  ["28639"] = "Sigil S",
  ["30479"] = "Pirate's Cove",
  ["41973"] = "Tellerium",
  ["48189"] = "Templeton",
  ["116476"] = "Decara",
}


function check_if_trading_post()
  if (gmcp_initialized) then
    local num = gmcpval("num")

    local tp = trading_posts[num]

    if (tp) then
      set_trading_post(tp)
    end
  end
end


function set_trading_post(place)
  tpost = place
end


function grab_ingot_prices(sell, buy)
  local trader = tpost
  local price = buy

  if (debug) then
    Note("-- meh_pirates: " .. trader .. ": " .. price .. " --")
  end

  local old_time = GetVariable("when")
  if (not old_time) then
    old_time = 0
  else
    old_time = tonumber(old_time)
  end

  if ((os.time() - old_time) > 7200) then
    -- 2+ hours have passed since we last checked prices
    DeleteVariable("prices")
    DeleteVariable("maxprice")
    DeleteVariable("maxwhere")
  end

  prices = {}
  assert(loadstring(GetVariable("prices") or "")) ()

  prices[trader] = price

  SetVariable("prices", "prices = " .. serialize.save_simple(prices))

  SetVariable("when", os.time())
  SaveState()
end


function calc_n_show_expected_profit(num)
  num = string.gsub(num, ",", "")
  num = tonumber(num)

  local price = GetVariable("maxprice")

  if (price) then
    local price = tonumber(price)
    local where = GetVariable("maxwhere")
    local when = GetVariable("when")

    Note("-- meh_pirates: would sell for: " .. num * price .. " gp, in " .. where .. " - " .. os.date("%x %X", when) .. " --")
  end
end


function calc_n_show_ingot_prices()
  local prices_sorted, traders_by_price

  prices_sorted, traders_by_price = calc_ingot_prices()

  show_ingot_prices(prices_sorted, traders_by_price)
end


function calc_ingot_prices()
  prices = {}
  assert(loadstring(GetVariable("prices") or ""))()

  local prices_sorted = {}
  local traders_by_price = {}

  for trader, price in pairs(prices) do
    price = tonumber(price)

    if (not find_index(prices_sorted, price)) then
      prices_sorted[#prices_sorted + 1] = price
    end

    if (not traders_by_price[price]) then
      traders_by_price[price] = trader
    else
      traders_by_price[price] = traders_by_price[price] .. ", " .. trader
    end
  end

  table.sort(prices_sorted)

  return prices_sorted, traders_by_price
end


function show_ingot_prices(prices_sorted, traders_by_price)
  Tell("-- meh_pirates: ")

  local where

  if (#prices_sorted > 0) then
    Note("ingots prices, sorted --")

    for i = 1, #prices_sorted do
      where = traders_by_price[prices_sorted[i]]

      Tell("* ")
      ColourNote("silver", "black", prices_sorted[i] .. " gp: " .. where)

      SetVariable("maxprice", prices_sorted[i])
      SetVariable("maxwhere", where)
      SaveState()
    end

    local when = GetVariable("when")
    Note("last updated: " .. os.date("%x %X", when))

  else
    ColourTell("orange", "black", "add prices first")
    Note(" --")
    Note("(visit the different traders and type: shop list)")
  end
end


function find_index(t, item)
  local res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end



----------------------
-- shipyard services
----------------------

function start_shipyard_capture(place)
  EnableTriggerGroup("shipyard_line", true)

  local places = {
    ["Runic"] = "Rune",
    ["Northern Sigil"] = "Sigil N",
    ["Southern Sigil"] = "Sigil S",
  }

  trader = places[place] or place

  services = {}
  assert(loadstring(GetVariable("services") or "")) ()
end


function capture_shipyard_crewmen(cost)
  cost = string.gsub(cost, ",", "")
  cost = tonumber(cost)

  if (not services[trader]) then
    services[trader] = {}
  end

  services[trader].crewmen = cost
end


function capture_shipyard_drydock(cost)
  cost = string.gsub(cost, ",", "")
  cost = tonumber(cost)

  if (not services[trader]) then
    services[trader] = {}
  end

  services[trader].drydock = cost
end


function end_shipyard_capture()
  EnableTriggerGroup("shipyard_line", false)

  SetVariable("services", "services = " .. serialize.save_simple(services))
  SaveState()
end


function calc_n_show_crew_costs()
  local costs_sorted, traders_by_cost

  costs_sorted, traders_by_cost = calc_services_costs("crewmen")

  show_services_costs(costs_sorted, traders_by_cost, "crewmen")
end


function calc_n_show_drydock_costs()
  local costs_sorted, traders_by_cost

  costs_sorted, traders_by_cost = calc_services_costs("drydock")

  show_services_costs(costs_sorted, traders_by_cost, "drydock")
end


function calc_services_costs(what)
  services = {}
  assert(loadstring(GetVariable("services") or ""))()

  local costs_sorted = {}
  local traders_by_cost = {}
  local cost

  for trader, costs in pairs(services) do
    cost = tonumber(costs[what])

    if (not find_index(costs_sorted, cost)) then
      costs_sorted[#costs_sorted + 1] = cost
    end

    if (not traders_by_cost[cost]) then
      traders_by_cost[cost] = trader
    else
      traders_by_cost[cost] = traders_by_cost[cost] .. ", " .. trader
    end
  end

  table.sort(costs_sorted)

  return costs_sorted, traders_by_cost
end


function show_services_costs(costs_sorted, traders_by_cost, what)
  local where

  Tell("-- meh_pirates: ")

  if (#costs_sorted > 0) then
    Note(what .. " costs, sorted --")

    for i = 1, #costs_sorted do
      where = traders_by_cost[costs_sorted[i]]

      Tell("* ")
      ColourNote("silver", "black", costs_sorted[i] .. " gp: " .. string.gsub(where, ",", ", "))
    end

  else
    ColourTell("orange", "black", "add costs first")
    Note(" --")
    Note("(visit the different shipyards and type: shop yardinfo)")
  end
end



----------------
-- (dis)embark
----------------

function boarded()
  onboard = true
end


function disembarked(name)
  onboard = false

  if (gmcp_initialized) then
    local plane = gmcpval("coord.name")
    local posx = gmcpval("coord.x")
    local posy = gmcpval("coord.y")

    if (plane) and (posx) and (posy) then
      sh_locations = {}
      assert(loadstring(GetVariable("sh_locations") or ""))()

      local aux = ""
      for c in string.gmatch(name, "%P") do
        aux = aux .. c
      end

      sh_locations[aux] = plane .. ": " .. posx .. ", " .. posy

      SetVariable("sh_locations", "sh_locations = " .. serialize.save_simple(sh_locations))
      SaveState()
    end
  end
end


function show_ships_locations()
  sh_locations = {}
  assert(loadstring(GetVariable("sh_locations") or ""))()

  Note("-- meh_pirates: ships locations --")

  for name, location in pairs(sh_locations) do
    Tell("* ")
    ColourNote("silver", "black", name .. ": " .. location)
  end
end



------------------------
-- sapi / reader stuff
------------------------

function sapi_say(text)
  if (use_sapi) then
    local res = CallPlugin("463242566069ebfd1b379ec1", "say", text)
  end
end


function sapi_plugin_present()
  return is_plugin_present("Sapi_speaker", "463242566069ebfd1b379ec1") or is_plugin_present("Text_To_Speech", "463242566069ebfd1b379ec1")
end


function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end



------------------
-- prompt reader
------------------

function capture_hull_n_shield(hull, shield)
  ship_hull = tonumber(hull) or 0
  ship_shield = tonumber(shield) or 0
end


function read_hull_n_shield()
  if (ship_hull) and (ship_shield) then
    sapi_say("hull: " .. ship_hull .. ", shield: " .. ship_shield .. "%")
  end
end


]]>

</script>

</muclient>
