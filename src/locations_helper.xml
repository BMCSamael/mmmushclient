<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, February 09, 2016, 3:24 PM -->
<!-- MuClient version 4.94 -->

<!-- Plugin "locations_helper" generated by Plugin Wizard -->

<muclient>

<plugin
  name="locations_helper"
  author="Ruthgul"
  id="ce9475a5d7acf80d07396cac"
  language="Lua"
  purpose="helps notice and find places"
  save_state="y"
  date_written="2016-02-09 15:23:22"
  date_modified="2016-02-09 22:48:57"
  requires="4.71"
  version="1.0"
>

<description trim="y">

<![CDATA[

~ locations_helper ~

- Notifies (via sapi) when one walks by an area entrance, and provides its direction.
- Shows exits leading to other areas.
- Shows directions for nearby areas in the wilds (like survey, but more precise - notice it doesn't detect impassable obstacles, either).


** REQUIRES **
- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- MM_GMCP_Mapper's database, to search for exits leading to other areas
- Sapi_speaker or Text-To-Speech (plugin id = 463242566069ebfd1b379ec1, by Nick Gammon) must be installed and enabled.


Syntax:

* nearby  - shows directions for nearby areas in the wild.
* whereto  - shows exits leading to other areas, if any.


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
   match="^nearby$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="find_nearby_locations"
  >
  </alias>

  <alias
   match="^whereto$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="show_exits_to_other_areas"
  >
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^locations(|\_helper)(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

require "serialize"
require "gmcphelper"

t_vmap = {}
t_inner = {}
t_varying = {}


-- plugin

function OnPluginInstall()
  Note(GetPluginInfo(GetPluginID(), 1) .. ": type " .. GetPluginInfo(GetPluginID(), 1) .. " help to see info about this plugin")

  load_data()
end


function OnHelp()
  world.Note(world.GetPluginInfo(world.GetPluginID(), 3))
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/locations_helper.xml",
  }
  return (table.concat(t, ","))
end



-- load data

function load_data()
  db = assert(sqlite3.open(GetInfo(66) .. "locations.db"))

  load_fixed_locations()
  load_varying_locations()

  db:close_vm()
end


function load_fixed_locations()
  for row in db:nrows(string.format("SELECT * FROM locations")) do
    if (row.sextant) then
      load_vmap_location(row)
    else
      load_inner_location(row)
    end
  end
end


function load_vmap_location(row)
  local x, y = parse_coords(row.sextant)
  t_vmap[row.plane] = t_vmap[row.plane] or {}
  t_vmap[row.plane][x] = t_vmap[row.plane][x] or {}
  t_vmap[row.plane][x][y] = {
    name = row.name,
    within = row.within,
    continent = row.continent,
    notes = row.notes,
  }
end


function load_inner_location(row)
  t_inner[row.id] = {
    name = row.name,
    within = row.within,
    dir = row.dir,
    continent = row.continent,
    plane = row.plane,
    notes = row.notes,
  }
end


local plane_max = {
  x = 2299,
  y = 1499,
}

function parse_coords(sextant)
  local x, y = string.match(sextant, "(%-*%d+), (%-*%d+)")
  x = fix_coord(x, plane_max.x)
  y = fix_coord(y, plane_max.y)
  return x, y
end


function fix_coord(coord, max)
  coord = tonumber(coord)
  if (coord < 0) then
    coord = max + coord + 1
  end
  return coord
end


function load_varying_locations()
  for row in db:nrows(string.format("SELECT * FROM varying")) do
    if (not row.dir) then
      load_varying_all_dirs(row)
    else
      load_varying_single_dir(row)
    end
  end
end


local all_dirs = {"n", "nw", "w", "sw", "s", "se", "e", "ne", "u", "d"}

function load_varying_all_dirs(row)
  for _, dir in pairs(all_dirs) do
    row.dir = dir
    load_varying_single_dir(row)
  end
end


function load_varying_single_dir(row)
  t_varying[row.id] = t_varying[row.id] or {}
  t_varying[row.id][row.dir] = {
    name = row.name,
    within = row.within,
  }
end


function fixsql(s)
  if s then
    return "'" .. (string.gsub(s, "'", "''")) .. "'" -- replace single quotes with two lots of single quotes
  else
    return "NULL"
  end
end


-- gmcp

function OnPluginBroadcast(msg, id, name, text)
  if (id =="f67c4339ed0591a5b010d05b") then -- GMCP message
    if (text == "room.info") then -- room.info
      get_gmcp_room()

      process_room()
    end
  end
end


function get_gmcp_room()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "room.info")
  luastmt = "gmcpdata = " .. gmcparg

  assert(loadstring(luastmt or ""))()
end


function process_room()
  if in_vmap() then
    check_if_vmap_location()

  else
    check_if_inner_location()
  end
end


function in_vmap()
  return (gmcpval("coord.code") ~= "")
end


function check_if_vmap_location()
  local zone = gmcpval("zone")
  local x = fix_coord(gmcpval("coord.x", plane_max.x))
  local y = fix_coord(gmcpval("coord.y", plane_max.y))
  local num = gmcpval("num")

  if (t_vmap[zone])
  and (t_vmap[zone][x])
  and (t_vmap[zone][x][y]) then
    local count, tres = find_non_area_exits(num, zone)

    if (count > 0) then
      for dir, area in pairs(tres) do
        Execute("sapi say " .. dir .. " leads to " .. area)
      end

    else
      Execute("sapi say at " .. t_vmap[zone][x][y].name)
    end
  end

  for _, dir in pairs(all_dirs) do
    local dest = gmcpval("exits." .. dir)
    if (dest ~= "")
    and (t_varying[dest])
    and (t_varying[dest][dir]) then
      Note(dir .. " leads to " .. t_varying[dest][dir].name)
      Execute("sapi say " .. dir .. " leads to " .. t_varying[dest][dir].name)
    end
  end
end


function check_if_inner_location()
  local num = gmcpval("num")
  if (t_inner[num]) then
    Execute("sapi say " .. t_inner[num].dir .. " leads to " .. t_inner[num].name)
  end
end


-- nearby

function find_nearby_locations()
  local current_plane = gmcpval("coord.name")
  if (in_vmap()) then
    for plane, tdata in pairs(t_vmap) do
      if (plane == current_plane) then
        find_nearby_in_plane(tdata)
      end
    end

  else
    Note("you're not in the wilds!")
  end
end


function find_nearby_in_plane(tdata)
  local current_x = fix_coord(gmcpval("coord.x", plane_max.x))
  local current_y = fix_coord(gmcpval("coord.y", plane_max.y))

  local tres = {}
  for x, t in pairs(tdata) do
    for y, loc in pairs(t) do
      local dist, spd = calc_distance(current_x, current_y, x, y)
      tres[dist] = tres[dist] or {}
      tres[dist][#tres[dist] + 1] = {
        name = loc.name,
        x = x,
        y = y,
        spd = spd,
      }
    end
  end

  Note("nearby locations:")
  -- < 50 rooms away, sorted by distance
  for dist, tlocs in pairs(tres) do
    if (dist <= 50) then
      for _, tloc in pairs(tlocs) do
        Note("to " .. tloc.name .. ": " .. dist .. " rooms away, walk: " .. tloc.spd)
      end
    end
  end
end


-- distance, speedwalk

function calc_distance(x1, y1, x2, y2)
-- only meant for alyria
  local maxx = 2299
  local maxy = 1499

  local distx, disty, dirx, diry

  -- determine the shortest distance
  if (x2 > x1) then
    distx, dirx = shortest_distance(x1, x2, maxx, "e")
  elseif (x2 < x1) then
    distx, dirx = shortest_distance(x2, x1, maxx, "w")
  else
    distx, dirx = 0, ""
  end

  if (y2 > y1) then
    disty, diry = shortest_distance(y1, y2, maxy, "s")
  elseif (y2 < y1) then
    disty, diry = shortest_distance(y2, y1, maxy, "n")
  else
    disty, diry = 0, ""
  end

  -- shortcut using diagonals?
  local spd = "-"
  local dist = 0

  if (distx > 0) and (disty > 0) then
    if (distx < disty) then
      spd = make_speedwalk(distx, "(" .. diry .. dirx .. ")") .. " " .. make_speedwalk((disty - distx), diry)
      dist = distx + (disty - distx)

    else
      spd = make_speedwalk(disty, "(" .. diry .. dirx .. ")") .. " " .. make_speedwalk((distx - disty), dirx)
      dist = disty + (distx - disty)
    end

  elseif (distx > 0) then
    spd = make_speedwalk(distx, dirx)
    dist = distx

  elseif (disty > 0) then
    spd = make_speedwalk(disty, diry)
    dist = disty
  end

  return dist, spd
end


function shortest_distance(d1, d2, max, dir)
  local short_reverts = {
    ["n"]  = "s",
    ["e"]  = "w",
    ["s"]  = "n",
    ["w"]  = "e",
  }

  local dist = d2 - d1
  local dist_round = max - d2 + d1

  if (dist_round < dist) then
    dist = dist_round
    dir = short_reverts[dir]
  end

  return dist, dir
end


function make_speedwalk(num, dir)
  local aux = ""

  if (num > 0) then
    aux = num .. dir
  end

  return aux
end



-- exits to other areas

function show_exits_to_other_areas()
  local num = gmcpval("num")
  local zone = gmcpval("zone")

  local count, tres = find_non_area_exits(num, zone)

  if (count > 0) then
    Note("exits to other areas:")
    for dir, area in pairs(tres) do
      Note(dir .. " leads to " .. area)
    end
  end
end


function find_non_area_exits(num, zone)
  local tres = {}
  local count = 0

  db_mapper = assert(sqlite3.open(GetInfo(66) .. "mm_mapper.db"))

  for _, dir in pairs(all_dirs) do
    local dest = gmcpval("exits." .. dir)
    if (dest ~= "")
    and (zone ~= locate_area(dest)) then
      tres[dir] = locate_area(dest)
      count = count + 1
    end
  end

  db_mapper:close_vm()

  return count, tres
end


function locate_area(num)
  local area
  for row in db_mapper:nrows(string.format("SELECT area FROM rooms WHERE uid = %s", fixsql(num))) do
    area = row.area
  end
  return area
end


]]>

</script>

</muclient>
