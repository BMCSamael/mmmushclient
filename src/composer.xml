<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, April 11, 2013, 9:51 PM -->
<!-- MuClient version 4.90 -->

<!-- Plugin "composer" generated by Plugin Wizard -->

<muclient>

<plugin
   name="composer"
   author="Ruthgul"
   id="7a03ddd09375ae8c2e4ae697"
   language="Lua"
   purpose="calculates songs"
   date_written="2013-04-11 21:50:15"
   date_modified="2013-08-26 19:07:33"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.------------.
 | composer |
`------------'

Find a lowest complexity combination of notes, to achieve the desired song.


Syntax:

* list songs  - shows the list of game songs

* show notes <song_name>  - find notes to play <song> at its lowest complexity
(eg:  show notes slow magic)

* show complexity <song_notes>  - calc the complexity of a given combination of notes


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^list songs$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_songs()
</send>
  </alias>

  <alias
   enabled="y"
   match="^show notes (?P&lt;song&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_notes("%&lt;song&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^show (complexity|cmplx) (?P&lt;song&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_complexity("%&lt;song&gt;")
</send>
  </alias>



<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^composer(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<script>

<![CDATA[

-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID (), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID (), 1) .. " help")
  Note(" to see info about this plugin --")

  math.randomseed(os.time())
end


function OnHelp ()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo (GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/composer.xml",
  }
  return (table.concat(t, ";"))
end



-----------
-- tables
-----------

notes_by_name = {
  [1] = {
    ["A"] = 12,
    ["B"] = 4,
    ["C"] = 5,
    ["D"] = 3,
    ["E"] = 6,
    ["F"] = 7,
    ["G"] = 13,

    ["A#"] = 1,
    ["B#"] = 9,
    ["C#"] = 6,
    ["D#"] = 1,
    ["E#"] = 4,
    ["F#"] = 8,
    ["G#"] = 9,

    ["Ab"] = 6,
    ["Bb"] = 2,
    ["Cb"] = 8,
    ["Db"] = 1,
    ["Eb"] = 4,
    ["Fb"] = 2,
    ["Gb"] = 7,
  },

  [2] = {
    ["A"] = 27,
    ["B"] = 21,
    ["C"] = 28,
    ["D"] = 9,
    ["E"] = 17,
    ["F"] = 14,
    ["G"] = 22,

    ["A#"] = 2,
    ["B#"] = 4,
    ["C#"] = 1,
    ["D#"] = 2,
    ["E#"] = 8,
    ["F#"] = 7,
    ["G#"] = 10,

    ["Ab"] = 6,
    ["Bb"] = 1,
    ["Cb"] = 9,
    ["Db"] = 8,
    ["Eb"] = 4,
    ["Fb"] = 5,
    ["Gb"] = 10,
  },

  [3] = {
    ["A"] = 35,
    ["B"] = 36,
    ["C"] = 33,
    ["D"] = 27,
    ["E"] = 24,
    ["F"] = 20,
    ["G"] = 34,

    ["A#"] = 5,
    ["B#"] = 13,
    ["C#"] = 8,
    ["D#"] = 7,
    ["E#"] = 3,
    ["F#"] = 6,
    ["G#"] = 11,

    ["Ab"] = 8,
    ["Bb"] = 3,
    ["Cb"] = 10,
    ["Db"] = 7,
    ["Eb"] = 4,
    ["Fb"] = 5,
    ["Gb"] = 9,
  },

  [4] = {
    ["A"] = 42,
    ["B"] = 44,
    ["C"] = 43,
    ["D"] = 32,
    ["E"] = 29,
    ["F"] = 31,
    ["G"] = 48,

    ["A#"] = 3,
    ["B#"] = 8,
    ["C#"] = 6,
    ["D#"] = 4,
    ["E#"] = 5,
    ["F#"] = 6,
    ["G#"] = 10,

    ["Ab"] = 7,
    ["Bb"] = 4,
    ["Cb"] = 11,
    ["Db"] = 6,
    ["Eb"] = 2,
    ["Fb"] = 9,
    ["Gb"] = 10,
  },

  [5] = {
    ["A"] = 51,
    ["B"] = 53,
    ["C"] = 45,
    ["D"] = 42,
    ["E"] = 35,
    ["F"] = 36,
    ["G"] = 54,

    ["A#"] = 4,
    ["B#"] = 2,
    ["C#"] = 4,
    ["D#"] = 5,
    ["E#"] = 9,
    ["F#"] = 2,
    ["G#"] = 9,

    ["Ab"] = 3,
    ["Bb"] = 9,
    ["Cb"] = 12,
    ["Db"] = 5,
    ["Eb"] = 1,
    ["Fb"] = 2,
    ["Gb"] = 13,
  },

  [6] = {
    ["A"] = 64,
    ["B"] = 60,
    ["C"] = 56,
    ["D"] = 54,
    ["E"] = 46,
    ["F"] = 42,
    ["G"] = 61,

    ["A#"] = 5,
    ["B#"] = 3,
    ["C#"] = 5,
    ["D#"] = 6,
    ["E#"] = 2,
    ["F#"] = 1,
    ["G#"] = 8,

    ["Ab"] = 2,
    ["Bb"] = 5,
    ["Cb"] = 13,
    ["Db"] = 4,
    ["Eb"] = 6,
    ["Fb"] = 8,
    ["Gb"] = 7,
  },

  [7] = {
    ["A"] = 73,
    ["B"] = 70,
    ["C"] = 64,
    ["D"] = 72,
    ["E"] = 54,
    ["F"] = 50,
    ["G"] = 75,

    ["A#"] = 6,
    ["B#"] = 4,
    ["C#"] = 3,
    ["D#"] = 9,
    ["E#"] = 2,
    ["F#"] = 1,
    ["G#"] = 7,

    ["Ab"] = 1,
    ["Bb"] = 9,
    ["Cb"] = 5,
    ["Db"] = 3,
    ["Eb"] = 3,
    ["Fb"] = 2,
    ["Gb"] = 4,
  },
}


notes_by_value = {
  [1] = {
    [1] = { "A#", "D#", "Db" },
    [2] = { "Bb", "Fb" },
    [3] = { "D" },
    [4] = { "B", "E#", "Eb" },
    [5] = { "C" },
    [6] = { "E", "C#", "Ab" },
    [7] = { "F", "Gb" },
    [8] = { "F#", "Cb" },
    [9] = { "B#", "G#" },
    [12] = { "A" },
    [13] = { "G" },
  },

  [2] = {
    [1] = { "C#", "Bb" },
    [2] = { "A#", "D#" },
    [4] = { "B#", "Eb" },
    [5] = { "Fb" },
    [6] = { "Ab" },
    [7] = { "F#" },
    [8] = { "E#", "Db" },
    [9] = { "D", "Cb" },
    [10] = { "G#", "Gb" },
    [14] = { "F" },
    [17] = { "E" },
    [21] = { "B" },
    [27] = { "A" },
    [28] = { "C" },
    [22] = { "G" },
  },

  [3] = {
    [3] = { "E#", "Bb" },
    [4] = { "Eb" },
    [5] = { "A#", "Fb" },
    [6] = { "F#" },
    [7] = { "D#", "Db" },
    [8] = { "C#", "Ab" },
    [9] = { "Gb" },
    [10] = { "Cb" },
    [11] = { "G#" },
    [13] = { "B#" },
    [20] = { "F" },
    [24] = { "E" },
    [27] = { "D" },
    [33] = { "C" },
    [34] = { "G" },
    [35] = { "A" },
    [36] = { "B" },
  },

  [4] = {
    [2] = { "Eb" },
    [3] = { "A#" },
    [4] = { "D#", "Bb" },
    [5] = { "E#" },
    [6] = { "C#", "F#", "Db" },
    [7] = { "Ab" },
    [8] = { "B#" },
    [9] = { "Fb" },
    [10] = { "G#", "Gb" },
    [11] = { "Cb" },
    [29] = { "E" },
    [31] = { "F" },
    [32] = { "D" },
    [42] = { "A" },
    [43] = { "C" },
    [44] = { "B" },
    [48] = { "G" },
  },

  [5] = {
    [1] = { "Eb" },
    [2] = { "B#", "F#", "Fb" },
    [3] = { "Ab" },
    [4] = { "A#", "C#" },
    [5] = { "D#", "Db" },
    [9] = { "E#", "G#", "Bb" },
    [12] = { "Cb" },
    [13] = { "Gb" },
    [35] = { "E" },
    [36] = { "F" },
    [42] = { "D" },
    [45] = { "C" },
    [51] = { "A" },
    [53] = { "B" },
    [54] = { "G" },
  },

  [6] = {
    [1] = { "F#" },
    [2] = { "E#", "Ab" },
    [3] = { "B#" },
    [4] = { "Db" },
    [5] = { "A#", "C#", "Bb" },
    [6] = { "D#", "Eb" },
    [7] = { "Gb" },
    [8] = { "G#", "Fb" },
    [13] = { "Cb" },
    [42] = { "F" },
    [46] = { "E" },
    [54] = { "D" },
    [56] = { "C" },
    [60] = { "B" },
    [61] = { "G" },
    [64] = { "A" },
  },

  [7] = {
    [1] = { "F#", "Ab" },
    [2] = { "E#", "Fb" },
    [3] = { "C#", "Db", "Eb" },
    [4] = { "B#", "Gb" },
    [5] = { "Cb" },
    [6] = { "A#" },
    [7] = { "G#" },
    [9] = { "D#", "Bb" },
    [50] = { "F" },
    [54] = { "E" },
    [64] = { "C" },
    [70] = { "B" },
    [72] = { "D" },
    [73] = { "A" },
    [75] = { "G" },
  },
}


notes_values = {
  [1] = { 13, 12, 9, 8, 7, 6, 5, 4, 3, 2, 1 },
  [2] = { 28, 27, 22, 21, 17, 14, 10, 9, 8, 7, 6, 5, 4, 2, 1 },
  [3] = { 36, 35, 34, 33, 27, 24, 20, 13, 11, 10, 9, 8, 7, 6, 5, 4, 3 },
  [4] = { 48, 44, 43, 42, 32, 31, 29, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 },
  [5] = { 54, 53, 51, 45, 42, 36, 35, 13, 12, 9, 5, 4, 3, 2, 1 },
  [6] = { 64, 61, 60, 56, 54, 46, 42, 13, 8, 7, 6, 5, 4, 3, 2, 1 },
  [7] = { 75, 73, 72, 70, 64, 54, 50, 9, 7, 6, 5, 4, 3, 2, 1 },
}


songs = {
  song01 = { name = "epiphany", min = 5, max = 5 },
  song02 = { name = "detect alignment", min = 6, max = 15 },
  song03 = { name = "light", min = 16, max = 25 },
  song04 = { name = "inspirational hymn", min = 26, max = 40 },
  song05 = { name = "cure light", min = 41, max = 45 },
  song06 = { name = "levitation", min = 46, max = 50 },
  song07 = { name = "refresh", min = 51, max = 55 },
  song08 = { name = "detect invisibility", min = 56, max = 60 },
  song09 = { name = "invisibility", min = 61, max = 70 },
  song10 = { name = "shield", min = 71, max = 77 },
  song11 = { name = "pensive dirge", min = 78, max = 85 },
  song12 = { name = "blindness", min = 86, max = 90 },
  song13 = { name = "soothing nocturne", min = 91, max = 95 },
  song14 = { name = "fireball", min = 96, max = 99 },
  song15 = { name = "plodding fugue", min = 100, max = 100 },
--  song16 = { name = "fireball", min = 101, max = 105 },
  song17 = { name = "enhanced strength", min = 106, max = 115 },
  song18 = { name = "farsight", min = 116, max = 125 },
  song19 = { name = "frost", min = 126, max = 130 },
  song20 = { name = "tremolo", min = 131, max = 140 },
  song21 = { name = "hands of wind", min = 141, max = 150 },
  song22 = { name = "form levitation", min = 151, max = 152 },
  song23 = { name = "slow magic", min = 153, max = 153 },
--  song24 = { name = "form levitation", min = 154, max = 160 },
  song25 = { name = "tremor", min = 161, max = 166 },
--  song26 = { name = "plodding fugue", min = 167, max = 167 },
--  song27 = { name = "tremor", min = 168, max = 181 },
  song28 = { name = "calm", min = 182, max = 186 },
--  song29 = { name = "plodding fugue", min = 187, max = 187 },
--  song30 = { name = "calm", min = 188, max = 200 },
  song31 = { name = "slow", min = 201, max = 202 },
--  song32 = { name = "slow magic", min = 203, max = 203 },
--  song33 = { name = "slow", min = 204, max = 214 },
  song34 = { name = "thunderclap", min = 215, max = 222 },
--  song35 = { name = "slow magic", min = 223, max = 223 },
--  song36 = { name = "thunderclap", min = 224, max = 224 },
  song37 = { name = "battle march", min = 225, max = 233 },
--  song38 = { name = "plodding fugue", min = 234, max = 234 },
--  song39 = { name = "battle march", min = 235, max = 238 },
--  song40 = { name = "plodding fugue", min = 239, max = 241 },
--  song41 = { name = "slow magic", min = 242, max = 242 },
--  song42 = { name = "plodding fugue", min = 243, max = 247 },
--  song43 = { name = "slow magic", min = 248, max = 248 },
--  song44 = { name = "plodding fugue", min = 249, max = 250 },
  song45 = { name = "traveling song", min = 251, max = 253 },
--  song46 = { name = "plodding fugue", min = 254, max = 254 },
--  song47 = { name = "traveling song", min = 255, max = 258 },
--  song48 = { name = "plodding fugue", min = 259, max = 259 },
--  song49 = { name = "traveling song", min = 260, max = 263 },
--  song50 = { name = "plodding fugue", min = 264, max = 264 },
--  song51 = { name = "traveling song", min = 265, max = 268 },
  song52 = { name = "cacophony", min = 269, max = 281 },
--  song53 = { name = "slow magic", min = 282, max = 290 },
  song54 = { name = "invigorating performance", min = 291, max = 318 },
}


function list_songs()
  local t = {}
  for k, v in pairs(songs) do
    t[#t + 1] = v.name .. ": " .. v.min .. "-" .. v.max
  end

  table.sort(t) -- alphabetical list

  for i = 1, #t do
    Note(t[i])
  end
end



---------------
-- calc songs
---------------

function show_notes(song)
  mysong = string.lower(Trim(song))

  if (song_exists(mysong)) then -- we know the song's complexity boundaries
    calc_notes(mysong)

  else
    Note("")
    Tell("Sorry, I don't know how to play ")
    ColourTell("silver", "black", mysong)
    Note(".")
  end
end


function song_exists(song)
  local res = false

  for k, v in pairs(songs) do
    if (v.name == song) then
      res = true
      break
    end
  end

  return res
end


function calc_notes(song)
  res_song = {}
  res_cmplx = 9999
  res_done = false

  local minp, maxp = find_cmplx(song)

  total = 0
  start_time = os.time()
  rec_notes("", 0, 0, minp, maxp)

  SetStatus("Ready")
  list_result()
end


function find_cmplx(song)
  local minp, maxp

  for k, v in pairs(songs) do
    if (v.name == song) then
      minp = v.min
      maxp = v.max
      break
    end
  end

  return minp, maxp
end


function rec_notes(part_song, part_cmplx, part_num, minp, maxp)
  if (is_right_range(part_cmplx, minp, maxp))
  and (part_num >= 3) then
    if (part_cmplx < res_cmplx) then
      res_cmplx = part_cmplx
      res_song = part_song

      if (part_cmplx == minp) then
        res_done = true
      end
    end

  elseif (part_cmplx < minp) then
    if (part_num < 7) then
    -- 7 is the max # of notes that can be used in a song
      for i = 1, #notes_values[part_num + 1] do
        local cmplx = notes_values[part_num + 1][i]
        local nnotes = notes_by_value[part_num + 1][cmplx]

        if ((part_cmplx + cmplx) <= maxp) and (not res_done) then
          local note = pick_random(nnotes)
          SetStatus("trying: " .. Trim(part_song .. " " .. note))
          rec_notes(Trim(part_song .. " " .. note), part_cmplx + cmplx, part_num + 1, minp, maxp)
        end
      end
    end
  end
end


function is_right_range(cmplx, minp, maxp)
  local res = (cmplx >= minp) and (cmplx <= maxp)
  return res
end


function pick_random(t)
  return t[math.random(#t)]
end


function list_result()
  local aux

  if (#res_song > 0) then
    Tell("* song: ")
    Hyperlink("play " .. res_song, res_song, "", "silver", "black", false)
    SetClipboard("play " .. res_song)
    Note(" - complexity: " .. res_cmplx)

  else
    Note("No results found.")
  end
end



function show_complexity(song_notes)
  local t = utils.split(Trim(song_notes), " ")

  Tell("* song complexity: ")
  ColourNote("silver", "black", calc_cmplx(t))
end


function calc_cmplx(t)
  local res = 0

  for i = 1, #t do
    if (t[i] ~= "") then
      res = res + notes_by_name[i][t[i]]
    end
  end

  return res
end


]]>

</script>

</muclient>
