<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, December 15, 2013, 11:59 AM -->
<!-- MuClient version 4.91 -->

<!-- Plugin "msp_lua" generated by Plugin Wizard -->

<muclient>

<plugin
   name="msp_lua"
   author="Christof, Ruthgul"
   id="1df4fa3b486a36ededa19433"
   language="Lua"
   purpose="Emulates MSP on Materia Magica"
   date_written="2013-12-15 11:58:50"
   date_modified="2014-01-04 16:36:23"
   requires="4.71"
   version="1.0"
   save_state="y"
   >

<description trim="y">

<![CDATA[

.-----------.
 | msp_lua |
`-----------'

MSP Emulation for MUSHclient on Materia Magica.

This plugin is based on Christof's MSP plugin (id = "161aaa8228e727cc6af28942")


** REQUIRES **

- Game setting: SOUND must be ON. (type: 'set sound on')
- Client setting: MXP must be ON [ Game, Configure, MXP / Pueblo... > Use MXP / Pueblo: On command (or Yes - always). ]


Syntax:

* msp type {mp3|wav}  - this is mp3 by default, use this alias if you need to change it

* msp path <full_path>  - this is MUSHclient/sounds/msp/ by default, use this alias you need to change it
* msp reset path  - resets the default path to MUSHclient/sounds/msp/

* msp display  - displays the current configuration


Authors: Christof, Ruthgul (maintained by Ruthgul)

- started based on the MSP plugin for Materia Magica by Christof
- ported it to Lua
- made it auto-choose a default file type (MP3) and a default folder (MUSHclient/sounds/msp/)
- added an alias to reset the defaults, in case things go wrong


]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
   match="^msp( |\:)path[ ]+(?P&lt;path&gt;.+)$"
   enabled="y"
   group="script-bazaar"
   regexp="y"
   send_to="12"
   keep_evaluating="y"
   sequence="100"
  >
  <send>set_path("%&lt;path&gt;")
</send>
  </alias>

  <alias
   match="^msp( |\:)reset[ ]+path$"
   enabled="y"
   group="script-bazaar"
   regexp="y"
   send_to="12"
   keep_evaluating="y"
   sequence="100"
  >
  <send>set_default_path()
</send>
  </alias>

  <alias
   match="^msp( |\:)type[ ]+(?P&lt;filetype&gt;.+)$"
   enabled="y"
   group="script-bazaar"
   regexp="y"
   send_to="12"
   keep_evaluating="y"
   sequence="100"
  >
  <send>set_filetype("%&lt;filetype&gt;")
</send>
  </alias>

  <alias
   match="^msp( |\:)display$"
   enabled="y"
   group="script-bazaar"
   regexp="y"
   send_to="12"
   keep_evaluating="y"
   sequence="100"
  >
  <send>show_settings()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^msp\_lua(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  init_config()
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/msp_lua.xml",
  }
  return (table.concat(t, ";"))
end



-------------
-- settings
-------------

function init_config()
  if (not GetVariable("msp_type")) then
    set_filetype("mp3")
  end

  if (not GetVariable("msp_path")) then
    set_default_path()
  end
end


function set_filetype(type)
  if (type == "mp3") or (type == "wav") then
    do_set_filetype(type)

  else
    Note("You must specify either 'wav' or 'mp3' for sound file extension.")
  end
end


function do_set_filetype(type)
  SetVariable("msp_type", type)
  Note("MSP will now use the ." .. type .. " sound file extension.")
end


function set_default_path()
  set_path(GetInfo(66) .. "sounds/msp/")
end


function set_path(path)
  path = string.gsub(path, "\\", "/")

  if (string.sub(path, string.len(path), string.len(path)) ~= "/") then
    path = path .. "/"
  end

  SetVariable("msp_path", path)
  Note("MSP sound files will be obtained from " .. path)
end


function show_settings()
  Note("MSP sound files will be obtained from " .. GetVariable("msp_path"))
  Note("MSP is using the ." .. GetVariable("msp_type") .. " sound file extension.")
end



---------------
-- make noise
---------------

function OnPluginMXPopenTag(name, args, mylist)
  if (string.find(name, "sound") == 1) then           -- it's noise!
--    Note("name: " .. (name or "nil"))

    local params = string.gsub(name, "^sound,", "")
--    Note(params)

    local t = utils.split(params, " ")

    local tparams = {}
    local key, val
    for i = 1, #t do
      key, val = string.match(t[i], "(.+)=(.+)")
      if (key) and (val) then
        tparams[key] = string.gsub(val, "'", "")
      end
    end

--    require "serialize"
--    Note("tparams: " .. serialize.save_simple(tparams))

    local filename = tparams.fname
    filename = string.gsub(filename, "%.%*", "")
--    Note("'" .. filename .. "'")

    local fullpath = GetVariable("msp_path") .. filename .. "." .. GetVariable("msp_type")

    -- this is disabled for now, it would support other MSP tags, starting with v
--    if (mcBass_plugin_present()) or (LuaAudio_plugin_present()) then
--      Sound("volume=" .. tonumber(tparams.v or 100))
--      Sound(fullpath)

--    else
      Sound(fullpath)
--    end

    --sample MXP tag:
    -- "name: sound,fname='mm_knock2.*' v='100' l='1' p='50' t='misc'"

    --where:
    -- fname = file name, or "Off" - if off, turn off sound
    -- v = volume, default is 100
    -- l = loop or repeats, default is 1, -1 means infinitely
    -- p = priority, default is 50 - if > prev sound's, abort them; icc do nothing
    -- c = continue, default is 1 - if requested again, 0 = restart, 1 = continue
    -- t = type, default is subfolder for fname - MUD specific
    -- u = url for a sound file, default is none - optional parameter

    --only using fname and v for now (v, if the bass library is present)

    return 1
  end
end


function mcBass_plugin_present()
  return is_plugin_present("mcBass", "c645476e178761b198443099")
end


function LuaAudio_plugin_present()
  return is_plugin_present("LuaAudio", "aedf0cb0be5bf045860d54b7")
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


]]>

</script>

</muclient>
