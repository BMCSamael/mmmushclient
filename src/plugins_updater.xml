<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, July 20, 2012, 11:31 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "plugins_updater" generated by Plugin Wizard -->

<!--

Note for developers: For a plugin to be "supported", it must have a public function like this:

function plugin_update_url()
  local t = {
    "http://mysite.org/directory/file.xml",
  }
  return (table.concat(t, ";"))
end

* the function must be called plugin_update_url()
* the function must return a list of URLs
  (actually, a list with only 1 element: the plugin .xml file)
* a <url> is separated from the next by a semicolon


Additionally, if the plugin uses "auxiliary" files, it must have a public function like this:

function plugin_update_aux_url()
  local t = {
    "http://mysite.org/directory/image.png",
    "http://mysite.org/directory/database.db,MUSH",
    "http://mysite.org/directory/module.lua,MUSH/lua",
  }
  return (table.concat(t, ";"))
end

* the function must be called plugin_update_aux_url()
* the function must return a list of URLs + optionally the local path to place them
* a <url> is separated from its <local_folder> by a comma - <local_folder> is optional
* each <url>[,<local_folder>] is separated from the next by a semicolon

In the example function:
* t is a table containing a list of URLs of files to be downloaded
* each entry in the t table has this format: <url>[,<local_folder>]
* if <local_folder> is not specified, the file will be placed in the same directory as the plugin
* if <local_folder> starts with MUSH/, it will be expanded to the MUSHclient directory

-->

<muclient>

<plugin
   name="plugins_updater"
   author="Ruthgul"
   id="4b03d42b86ed2b802247c058"
   language="Lua"
   purpose="updates plugins"
   date_written="2012-07-20 11:30:15"
   date_modified="2014-07-30 18:06:04"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.-------------------.
 | plugins_updater |
`-------------------'

Downloads and installs new versions of certain plugins.

*Notice* it's currently using a proxy to bypass https.


Syntax:

* update plugins  - shows a list of installed plugins, with hyperlinks to update the supported ones

* update plugins ALL  - update all installed plugins, if they're supported

* update plugin <id>  - updates the specified plugin, by PluginID,

* update plugin <partial_name>  - shows a list of installed plugins matching <partial_name>, with hyperlinks to update the supported ones - eg, update plugin mapper

* update aux <id>  - updates auxiliary files for the specified plugin, by PluginID


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>


<!--  Aliases  -->

<aliases>

  <alias
   match="^update plugins$"
   enabled="y"
   group="plugins_updater"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_plugins()
</send>
  </alias>


  <alias
   match="^update plugins ALL$"
   enabled="y"
   group="plugins_updater"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>update_all_plugins()
</send>
  </alias>


  <alias
   match="^update plugin (?P&lt;id&gt;.+)$"
   enabled="y"
   group="plugins_updater"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>update_plugin("%&lt;id&gt;")
</send>
  </alias>


  <alias
   match="^update aux (?P&lt;id&gt;.+)$"
   enabled="y"
   group="plugins_updater"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>update_aux("%&lt;id&gt;")
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^plugins\_updater(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>
</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID (), 1) .. " help")
  Note(" to see info about this plugin --")
end


function OnHelp ()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo (GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/plugins_updater.xml",
  }
  return (table.concat(t, ";"))
end


---------------
-- list stuff
---------------

function list_plugins(partial)
  local tplugins = {}
  local aux, name, author, id, found

  -- using a table to sort them alphabetically by name
  for k, v in pairs(GetPluginList()) do
    name = GetPluginInfo(v, 1)
    author = GetPluginInfo(v, 2)
    aux = string.lower(name) .. ";" .. v .. ";" .. name .. " (by " .. author .. ")"

    if ((partial) and (string.find(string.lower(name), string.lower(partial))))
    or (not partial) then
      tplugins[#tplugins + 1] = aux
    end
  end
  table.sort(tplugins)

  found = #tplugins

  if (partial) then
    Note("\r\n-- plugins updater: list of plugins matching '" .. partial .. "' --")
  else
    Note("\r\n-- plugins updater: list of installed plugins --")
  end

  for i = 1, #tplugins do
    aux = utils.split(tplugins[i], ";")
    id = aux[2]
    name = aux[3]

    if (partial) then
      Note("")
    end

    Tell("* " .. name)

    local res, s = CallPlugin(id, "plugin_update_url")
    if (res == 0) then -- supported
      if (not partial) then
        Tell(" - ")
        Hyperlink("update plugin " .. id, "update plugin", "", "silver", "black", false)
      else
        Tell(":")
        Note("")
        Hyperlink("update plugin " .. id, "update plugin " .. id, "", "silver", "black", false)
      end

      local res, s = CallPlugin(id, "plugin_update_aux_url")
      if (res == 0) then -- has auxiliary files
        if (not partial) then
          Tell(" - ")
          Hyperlink("update aux " .. id, "update aux files", "", "silver", "black", false)
        else
          Note("")
          Hyperlink("update aux " .. id, "update aux " .. id, "", "silver", "black", false)
        end
      end

    else
--      if (id ~= GetPluginID()) then
        Tell(" - not supported")
--        Tell(" (not supported) - ")
--        Hyperlink("update plugin " .. id, "try to update", "", "darkgray", "black", false)

--      else
--        Tell(" (can't update itself)")
--      end
    end
    Note("")
  end

  if (found == 1) then
    SetClipboard(id)
  end

  if (not partial) then
    Note("")
    Tell("Use: ")
    Hyperlink("update plugins ALL", "update plugins ALL", "", "silver", "black", false)
    Note(" to try to update all supported plugins (this won't update their aux files).")
    Note("")
  end
end


function update_all_plugins()
  for k, v in pairs (GetPluginList()) do
    local res, s = CallPlugin(v, "plugin_update_url")
    if (res == 0) then -- supported
      update_plugin(v)
    end
  end
end



-----------------
-- update stuff
-----------------

--mydbpath = "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/"

function update_plugin(id)
  if (IsPluginInstalled(id)) then
    update_sth("plugin", Trim(id), "plugin_update_url")

  else
    list_plugins(id)
  end
end


function update_aux(id)
  if (IsPluginInstalled(id)) then
    update_sth("aux files for plugin", Trim(id), "plugin_update_aux_url")

  else
    Note("-- plugins_updater: plugin id #" .. id .. " is not installed --")
  end
end


function update_sth(desc, id, update_fn)
  Tell("\r\nUpdating " .. desc .. " " .. id .. " - ")
  ColourNote("silver", "black", GetPluginInfo(id, 1))
  -- maybe add a notice with the .zip file URL, in case this process fails?

  -- check original directory & file name
  local pluginpath = GetPluginInfo(id, 20)
  pluginpath = string.gsub(pluginpath, "\\", "/")

  local pluginfile = GetPluginInfo(id, 6)
  pluginfile = string.gsub(pluginfile, "\\", "/")

  local res, s = CallPlugin(id, update_fn)
  if (res ~= 0) then -- not supported
    Note("-- plugins updater: the plugin " .. id .. " (" .. GetPluginInfo(id, 1) .. ") lacks a function " .. update_fn .. "() --")
--    s = pluginfile
--    s = string.gsub(s, "\\", "/")
--    s = utils.split(s, "/")
--    s = s[#s]
--    s = mydbpath .. s

  else
    -- download files
    local dlerror = update_files(id, s, pluginpath)

    if (dlerror == 0) then
      -- reinstall plugin
      res = ReloadPlugin(id);

      if (res == 0) then
        Note("-- plugins updater: " .. desc .. " " .. id .. " (" .. GetPluginInfo(id, 1) .. ") updated successfully --")

      else
        Note("-- plugins updater: I couldn't reload the plugin " .. id .. " (" .. GetPluginInfo(id, 1) .. ") - error: " .. ErrorDesc(res) .. " - code: " .. res .. " --")

        if (res == 30046) then
          Tell("(... please try to reload the plugin manually: ")
          ColourTell("silver", "black", "Ctrl+Shift+P")
          Tell(", click ")
          ColourTell("silver", "black", GetPluginInfo(id, 1))
          Tell(", click ")
          ColourTell("silver", "black", "ReInstall")
          Note(")")
        end
      end

    else
      Note("-- plugins updater: error downloading new files - I reinstalled the old copy of the plugin instead --")
    end
  end
end


function update_files(id, sfiles, pluginpath)
  Note("-- plugins updater: downloading files --")

  local res = 0
  local tfiles = utils.split(sfiles, ";") -- table with list of files to be downloaded

  local url, ldir, lfile -- path/directory table, url, local directory, local file
  for i = 1, #tfiles do
    url, ldir, lfile = parse_location(id, tfiles[i], pluginpath)

--    Note("updating: " .. url .. " -> " .. ldir .. lfile)
    SetStatus ("Downloading file: " .. url .. " to: " .. ldir .. lfile .. "...")

    res = res + download_file(url, ldir .. lfile)
  end

  SetStatus ("Ready")
  return res
end


function parse_location(id, spath, pluginpath)
  local url, ldir, lfile
  local tpath = utils.split(spath, ",")

  local proxy_url = "http://freeproxyx.appspot.com/"

  url = tpath[1]
  url = string.gsub(url, "dl.dropbox.com/u/65599194/mm-updater/", "raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/")
  url = string.gsub(url, "http://", proxy_url)
  url = string.gsub(url, "https://", proxy_url)

  lfile = utils.split(url, "/")
  lfile = lfile[#lfile]

  ldir = tpath[2] or pluginpath
  if (string.find(ldir, "MUSH") == 1) then
    ldir = string.gsub(ldir, "MUSH/", GetInfo(56), 1)
    ldir = string.gsub(ldir, "\\", "/") .. "/"
  end

  return url, ldir, lfile
end


function download_file(url, lpath)
  local http = require "socket.http"
  local file, res, header
  file, res, header = http.request(url)
  if (res ~= 200) then
    Note("error accessing " .. url .. " - code: " .. res)
    return -1
  end

--  require "serialize"
--  Note(serialize.save_simple(header))

  res = save_file(lpath, file)
  return res
end


function save_file(lpath, file)
  -- rename the old version of the file
  os.rename(lpath, lpath .. ".old")

  local f, res, rescode

  -- (re)create the file
  f, res, rescode = io.open(lpath, "wb")
  if (f == nil) then
    Note("error creating file: " .. res .. " - code: " .. rescode)
    os.rename(lpath .. ".old", lpath) -- restore original file
    return -1
  end

  -- save the contents
  f:write(file)
  f:flush()
  f:close()

  return 0
end

]]>

</script>

</muclient>
