<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, July 06, 2011, 12:32 PM -->
<!-- MuClient version 4.73 -->

<!-- Plugin "IMap" generated by Plugin Wizard -->

<muclient>

<plugin
   name="IMap_GMCP"
   author="Tamlin/Ruthgul"
   id="adc3a873d4e47348da7cb426"
   language="Lua"
   purpose="Shows your position in the vmap, to help you travel."
   save_state="y"
   date_written="2012-02-04 11:36:44"
   date_modified="2020-12-20 21:38:56"
   version="2.7"
   >

<description trim="y">

<![CDATA[

.--------.
 | IMap |
`--------'

Places an icon on a map, showing your current location.
Also lets you add a secondary, "destination" icon, and text labels.


** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- Client setting: Game, Configure, Output > [x] Convert IAC EOR/GA to new line (must be checked).


Syntax:

* imap hide  - hides the map miniwindow
* imap show  - shows the map miniwindow
* imap gamma [on|off]  - toggles gamma correction on/off (off by default)

* imap reset  - restores the default miniwindow size

* imap recolor spk [on|off]  - toggles recolor for Alyria's SPK waters on/off (on by default)
* imap spk color {purple|red}  - selects a color for SPK waters in Alyria (purple by default)

* imap zoom [on|off] - toggles the imap to zoom in or not (off by default)

* imap icon {arrow|circ|cross|ship|horse}  - selects an icon type to be used while walking, riding, etc. (default = arrow)
* imap shipicon {arrow|circ|cross|ship|horse}  - selects an icon type to be used while aboard a ship (default = cross)

* imap dest <posx>, <posy>  - shows a 'destination' arrow
* imap dest off  - turns off the destination arrow

* imap label <posx>, <posy>, <color>, <text>  - shows a persistent text label (limited to 1)
* imap label off  - turns off a label
* imap showtext <posx>, <posy>, <color>, <text>  - shows non-persistent text (unlimited number), that will vanish on movement

* imap showlocation <place_name> [<text>]  - shows non-persistent text (or an "x") marking a city, dungeon, etc. - it requires a full city name, the text will vanish on movement


Author: Tamlin/Ruthgul

Latest version:
http://github.com/BMCSamael/mmmushclient/

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

<!-- show / hide -->

  <alias
   enabled="y"
   match="^imap[ ]+show$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_show(true)
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[ ]+hide$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_hide(true)
</send>
  </alias>

  <alias
    enabled="y"
    regexp="y"
    match="^imap[ ]+reset$"
    script="restore_defaults"
  >
  </alias>


<!-- gamma correction -->

  <alias
   enabled="y"
   match="^imap[ ]+gamma(|[ ]+(?P&lt;status&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_set_gamma("%&lt;status&gt;")
</send>
  </alias>
  
<!-- Zoom Map -->
  <alias
    enabled="y"
    match="^imap[ ]+zoom(|[ ]+(?P&lt;status&gt;(on|off)))$"
    regexp="y"
    send_to="12"
    sequence="100"
  >
  <send>toggle_map_zoom("%&lt;status&gt;")
</send>
  </alias>


<!-- recolor spk waters -->

  <alias
    enabled="y"
    match="^imap[ ]+recolo(|u)r[ ]+spk(|[ ]+(?P&lt;status&gt;(on|off)))$"
    regexp="y"
    send_to="12"
    sequence="100"
  >
  <send>toggle_recolor_spk("%&lt;status&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[ ]+spk[ ]+colo(|u)r[ ]+(?P&lt;color&gt;(purple|red))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_set_spk_color("%&lt;color&gt;")
</send>
  </alias>


<!-- icon -->

  <alias
   enabled="y"
   match="^imap[ ]+icon[ ]+(?P&lt;icon&gt;(arrow|circ|cross|horse|ship))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_set_icon("%&lt;icon&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[ ]+shipicon[ ]+(?P&lt;icon&gt;(arrow|circ|cross|horse|ship))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_set_shipicon("%&lt;icon&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[ ]+desticon[ ]+(?P&lt;icon&gt;(arrow|custom))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_desticon("%&lt;icon&gt;")
</send>
  </alias>


<!-- destination -->

  <alias
   enabled="y"
   match="^imap[ ]+(dest|destination)[ ]+(?P&lt;posx&gt;[0-9]+)\,(|[ ]+)(?P&lt;posy&gt;[0-9]+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_show_destination("%&lt;posx&gt;", "%&lt;posy&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[ ]+(dest|destination)[ ]+off$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_destination_off()
</send>
  </alias>


<!-- labels -->

  <alias
   enabled="y"
   match="^imap[ ]+label[ ]+(?P&lt;posx&gt;[0-9]+)\,(|[ ]+)(?P&lt;posy&gt;[0-9]+)\,(|[ ]+)(?P&lt;color&gt;[^ ]+)\,(|[ ]+)(?P&lt;text&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_show_label("%&lt;posx&gt;", "%&lt;posy&gt;", "%&lt;color&gt;", "%&lt;text&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[]+label[ ]+off$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_label_off()
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[ ]+showtext[ ]+(?P&lt;posx&gt;[0-9]+)\,(|[ ]+)(?P&lt;posy&gt;[0-9]+)\,(|[ ]+)(?P&lt;color&gt;[^ ]+)\,(|[ ]+)(?P&lt;text&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>imap_showtext("%&lt;posx&gt;", "%&lt;posy&gt;", "%&lt;color&gt;", nil, "%&lt;text&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^imap[ ]+showloc(|ation)[ ]+(?P&lt;place&gt;[^\:]+)(|[ ]+t\:(?P&lt;text&gt;.+))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_location("%&lt;place&gt;", "%&lt;text&gt;")
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   ignore_case="y"
   match="^IMap(|\_GMCP)(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You board (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>old_atsea = atsea
atsea = true
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You disembark from (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>old_atsea = atsea
atsea = false
</send>
  </trigger>


<!-- disabled - tv check -->
  <trigger
   keep_evaluating="y"
   match="^A clear focusing crystal flares brightly and vanishes\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>tv_check()
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "movewindow"
require "wait"
require "gmcphelper"

-- colours
background_colour = ColourNameToRGB "lightskyblue"
frame_colour      = ColourNameToRGB "mediumorchid"
title_bar_colour  = ColourNameToRGB "palegoldenrod"
title_colour      = ColourNameToRGB "mediumblue"
tab_colour        = ColourNameToRGB "green"
tab_text_colour   = ColourNameToRGB "white"

-- Initialize game coordinate positions
posx = 0
posy = 0
pos_offset_x = 0
pos_offset_y = 0
pos_ratio_yx = 1499/2399

-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  init_vars()
  load_config()
end


function OnPluginClose()
  if (imap_started) or (imap_enabled) then
    movewindow.save_state(iwin)
    WindowShow(iwin, false)  -- hide window on removal
  end
end


function OnPluginDisable()
  imap_hide()
  imap_enabled = false
end


function OnPluginEnable()
  if (imap_started) then
    imap_enabled = true
    imap_show(false)
  end
end


function OnPluginSaveState()
  if (imap_started) or (imap_enabled) then
    movewindow.save_state(iwin)
  end
end


function IsStarted()
  if (imap_started) then
    return true
  else
    return false
  end
end


function imap_start()
  init = true
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/src/IMap_GMCP.xml",
  }
  return (table.concat(t, ";"))
end


function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/arrow.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/circ.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/cross.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/custom.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/dest.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/horse.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/ship.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/alyria.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/alyria_spk_purple.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/alyria_spk_red.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/fp.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/lasler.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/social.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/sugxpanded.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/ug.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/verity.png",
  }
  return (table.concat(t, ";"))
end



---------------
-- GMCP stuff
---------------

function OnPluginBroadcast(msg, id, name, text)
  --Note("DEBUG plane: " .. tostring(plane))
  --Note("imap_started: " .. tostring(imap_started))
  --Note("imap_enabled: " .. tostring(imap_enabled))
  --Note("imap_shown: " .. tostring(imap_shown))
  if (id =="f67c4339ed0591a5b010d05b") then -- GMCP message
    if (text == "room.info") then -- room.info
      get_gmcp_room()

      if (not imap_started) then
        imap_start() -- we start on first gmcp room package
        process_plane()
      end

      if ((imap_started) and (imap_shown) and (not ignore_next)) then
        process_plane()
        process_room()
      end
    end
  end
end


function get_gmcp_room()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "room.info")
  luastmt = "gmcpdata = " .. gmcparg

  assert(loadstring(luastmt or ""))()
end



-----------------------------
-- init / load / save stuff
-----------------------------

function init_vars()
  oldplaneraw = nil
  old_plane = nil
  plane = nil

  atsea = false
end


function load_config()
  config = {
    imap_gamma = ((GetVariable("imap_gamma") or "false") == "true"),
    color_spk = ((GetVariable("color_spk") or "true") == "true"),

    spk_color = GetVariable("spk_color") or "purple",
    imap_icon = GetVariable("imap_icon") or "arrow",
    imap_shipicon = GetVariable("imap_shipicon") or "cross",
	
-- Zoom Map config
     map_zoom = ((GetVariable("map_zoom") or "false") == "true"),	
  }
end


function save_config()
  SetVariable("imap_gamma", tostring(config.imap_gamma))
  SetVariable("color_spk", tostring(config.color_spk))
  SetVariable("spk_color", config.spk_color)
  SetVariable("imap_icon", config.imap_icon)
  SetVariable("imap_shipicon", config.imap_shipicon)
  SetVariable("map_zoom", tostring(config.map_zoom))

  SaveState()
end


function load_image(filename)
  -- load plugin's directory
  local pathname = GetPluginInfo(GetPluginID(), 20)

  local f = assert(io.open(pathname .. filename, "rb"))
  local img = f:read("*a")
  f:close()

  return img
end


function do_toggle(var, status)
  if (status == "on") then
    var = true
  elseif (status == "off") then
    var = false
  else
    var = not var
  end

  return var
end



-----------------
-- window stuff
-----------------

function init_window()

  if (plane ~= "_empty") then
    if (config.imap_gamma) then
      WindowFilter(iwin, 0, 0, 0, 0, miniwin.filter_gamma, 0.6)
    end

    WindowShow(iwin, true)

    -- load icon image, don't show it yet
    load_icon()
    load_shipicon()

    -- load spk waters for Alyria, don't show them yet
    load_spk()

    imap_started = true
    imap_enabled = true
    imap_shown = true
    prefer_shown = true
  end
end


function imap_show(prefer)
  if (prefer) then
    prefer_shown = true
  end

  if (prefer_shown) and ((imap_started) or (imap_enabled)) then
    -- show window
    imap_shown = true
    WindowShow(iwin, true)
  end
end


function imap_hide(prefer)
  if (prefer) then
    prefer_shown = false
  end

  if (imap_started) or (imap_enabled) then
    -- hide window
    imap_shown = false
    WindowShow(iwin, false)
  end
end


function imap_set_gamma(status)
  config.imap_gamma = do_toggle(config.imap_gamma, status)

  if (config.imap_gamma) then
    Note("-- IMap: gamma correction ON --")

  else
    Note("-- IMap: gamma correction OFF --")
  end

  save_config()
end


function restore_defaults()
  iwin_width = 400
  iwin_height = 261

  SetVariable("width", iwin_width)
  SetVariable("height", iwin_height)
  SaveState()

  WindowResize(iwin, iwin_width, iwin_height, ColourNameToRGB("black"))

  WindowShow(iwin,true)

  process_plane()
  process_room()
end



----------------------------------------------------------------
-- Themed3DRect adapted from Fiendish's/Enelya's chat captures
----------------------------------------------------------------

theme = {
  HIGHLIGHT = ColourNameToRGB("silver"), -- for 3D surfaces
  FACE = ColourNameToRGB("black"), -- for 3D surfaces
  INNERSHADOW = ColourNameToRGB("gray"), -- for 3D surfaces
  OUTERSHADOW = ColourNameToRGB("gray"), -- for 3D surfaces
} -- end theme table


function DrawThemed3DRect(Window, left, top, right, bottom, visible)
  if (visible == nil) then
    visible = true
  end

  WindowRectOp(Window, miniwin.rect_fill, left, top, right, bottom, theme.FACE)

  if (visible) then
    WindowLine(Window, left, top, right, top, theme.HIGHLIGHT,
               miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
    WindowLine(Window, left, top, left, bottom, theme.HIGHLIGHT,
               miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
  end

  WindowLine(Window, left, bottom - 2, right, bottom - 2, theme.INNERSHADOW,
             miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
  WindowLine(Window, right - 2, top, right - 2, bottom - 2, theme.INNERSHADOW,
             miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
  WindowLine(Window, left, bottom - 1, right, bottom - 1, theme.OUTERSHADOW,
             miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
  WindowLine(Window, right - 1, top, right - 1, bottom - 1, theme.OUTERSHADOW,
             miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
end



---------------------------------------------------------
-- window resize stuff
-- (adapted from Fiendish's/Lasher's code for Aardwolf)
---------------------------------------------------------

function add_resizer()
  local size = 15

  local width = WindowInfo(iwin, 3)
  local height = WindowInfo(iwin, 4)

  -- draw the resize widget bottom right corner.
  local x1 = width - size -- + 7
  local y1 = height - size -- + 7
  local x2 = x1 + size
  local y2 = y1 + size

  local m = 0 -- 2
  local n = 0 -- 2
  while (x1 + m + 2 <= x2 - 3 and y1 + n + 1 <= y2 - 4) do
    WindowLine(iwin, x1 + m + 1, y2 - 4, x2 - 3, y1 + n,
               theme.HIGHLIGHT,
               miniwin.pen_solid,
               1)
    WindowLine(iwin, x1 + m + 2, y2 - 4, x2 - 3, y1 + n + 1,
               theme.INNERSHADOW,
               miniwin.pen_solid,
               1)
    m = m + 3
    n = n + 3
  end

  -- Add a drag handler to this window, effectively allows textrectangle to be resized.
  local x = width - size
  local y = height - size
  if (WindowHotspotInfo(iwin, "resize", 1) == nil) then
    WindowAddHotspot(iwin, "resizer", x, y, 0, 0,
                     "", "",
                     "resizer_mousedown", "",
                     "", "",
                     miniwin.cursor_nw_se_arrow,
                     0)
    WindowDragHandler(iwin,
                      "resizer",
                      "resizer_callback", "resizer_release_callback",
                      0)
  else
    WindowMoveHotspot(iwin, "resizer", x, y, 0,  0)
  end
end


function resizer_mousedown(flags, hotspot_id)
  speeding = mapper_speeding()
  if (speeding) then
    ColourNote("dodgerblue", "black", "-- IMap_GMCP: I can't resize the window while speedwalking! --")
    return

  else -- not speeding
    if (hotspot_id == "resizer") then
      old_width = WindowInfo(iwin, 3)
      old_height = WindowInfo(iwin, 4)

      startx, starty = WindowInfo(iwin, 17), WindowInfo(iwin, 18)
    end
  end
end


function resizer_callback()
  if (not speeding) then
    local posx, posy = WindowInfo(iwin, 17), WindowInfo(iwin, 18)

    local width = old_width + (posx - startx)
    local height = old_height + (posy - starty)

    WindowResize(iwin, width, height, ColourNameToRGB("black"))

    WindowShow(iwin,true)
  end
end


function resizer_release_callback()
  if (not speeding) then
    iwin_width = WindowInfo(iwin, 3)
    iwin_height = WindowInfo(iwin, 4)

    -- correct size to keep the aspect ratio
    local ratio
    if (iwin_width < 50)
    or (iwin_height < 50) then
      ratio = 50 / 1500

    elseif (windowinfo.window_left + iwin_width > GetInfo(281))
    or (windowinfo.window_top + iwin_height > GetInfo(280)) then
      ratio = (GetInfo(281) - windowinfo.window_left) / 2300

    else
      local xratio = iwin_width / 2300
      local yratio = iwin_height / 1500
      ratio = math.min(xratio, yratio)
    end

    iwin_width = 2300 * ratio
    iwin_height = 1500 * ratio

    SetVariable("width", iwin_width)
    SetVariable("height", iwin_height)
    SaveState()

    WindowResize(iwin, iwin_width, iwin_height, ColourNameToRGB("black"))

    WindowShow(iwin,true)

    process_plane()
    process_room()
  end
end


function mapper_speeding()
  local res, val

  res, val = CallPlugin("f973af093e715dece34dc25f", "speeding")

  if (res ~= 0) then
    val = nil
  end

  return val
end



----------------------
-- plane, room stuff
----------------------

function process_plane()
  local short_planes = {
    ["2814151"] = "alyria",
    ["Alyria"] = "alyria",
    ["Great Alyrian Underground"] = "ug",
    ["Alyrian Underworld"] = "ug",
    ["Faerie Plane"] = "fp",
    ["Faerie Plane Wilderness"] = "fp",
    ["IEN Ivory Tower"] = "social",
    ["Lasler Wilderness"] = "lasler",
    ["Sigil Underground"] = "sug",
    ["Verity Isle"] = "verity",
  }

  plane = gmcpval("zone")

  if (plane ~= oldplane) then
    local short_plane = short_planes[plane]

    if (short_plane) then
      imap_setplane(short_plane)

    else
      if (plane ~= oldplaneraw) then
        Note("-- IMap error: plane not supported --")
      end
      oldplaneraw = plane
      plane = "_empty"
    end

    oldplane = plane
  end

  if (plane == "_empty") then
    imap_started = false

  elseif (init) then
    init_window()
  end
end


function imap_setplane(plane)
  local planes = {
    ["alyria"] = {
      name = "alyria",
      maxx = 2299,
      maxy = 1499,
      startx = 0,
      starty = 0,
      filename = "alyria.png",
    },

    ["ug"] = {
      name = "ug",
      maxx = 2299,
      maxy = 1499,
      startx = 0,
      starty = 0,
      filename = "ug.png",
    },

    -- Sigil Underground is a zoom-in of the south part (shrines, villages, caldera, etc.)
    ["sug"] = {
      name = "sug",
      maxx = 2299,
      maxy = 1499,
      startx = 0,
      starty = 0,
      filename = "sugxpanded.png",
    },

    ["fp"] = {
      name = "faerie",
      maxx = 481 + 132,
      maxy = 400,
      startx = 132 / 2,
      starty = 0,
      filename = "fp.png",
    },

    ["lasler"] = {
      name = "lasler",
      maxx = 111 + 44,
      maxy = 101,
      startx = 44 / 2,
      starty = 0,
      filename = "lasler.png",
    },

    ["verity"] = {
      name = "verity",
      maxx = 144,
      maxy = 62 + 32,
      startx = 0,
      starty = 32 / 2,
      filename = "verity.png",
    },

    ["social"] = {
      name = "social",
      maxx = 144,
      maxy = 62 + 32,
      startx = 0,
      starty = 32 / 2,
      filename = "social.png",
    },
  }

  plane = planes[plane]

  setplane(plane.name, plane.maxx, plane.maxy, plane.startx, plane.starty, plane.filename)
end


function process_room()
  if (imap_started) and (imap_shown) then

    posx = gmcpval("coord.x")
    posy = gmcpval("coord.y")

    posx = tonumber(posx)
    posy = tonumber(posy)

    if (posx > 0) then
      redraw_map()

     if (not config.map_zoom) then
      -- show label?
      if (text_posx) then
        show_text(text_posx, text_posy, "Trebuchet MS", 7, text_color, nil, "right", text_text)
      end

      -- show destination icon?
      if (dest_posx)  then
        show_icon(dest_posx, dest_posy, "idest", imap_img_dest, "dncenter")
      end
	else
      -- show icon
      local icon_pos = {
        ["arrow"] = "upleft",
        ["circ"] = "midcenter",
        ["cross"] = "midcenter",
        ["horse"] = "dnleft",
        ["ship"] = "dnleft",
      }

      if (atsea) then
        show_icon(posx, posy, "iicon", imap_img_ship, icon_pos[config.imap_shipicon])
      else
        show_icon(posx, posy, "iicon", imap_img_noship, icon_pos[config.imap_icon])
      end 
    end
   end
  end
end


function tv_check() -- we're not updating the map on tv
-- this is from the days when tv would send a gmcp package
-- the trigger that calls it is disabled now
  wait.make(function()
    ignore_next = true
    wait.time(.5)
    ignore_next = nil
  end)
end


function toggle_atsea()
  atsea = not atsea
end



-- -----------
-- map stuff
-- -----------

function setplane(plane, maxx, maxy, startx, starty, filename)
  local old_mode, old_top, old_left, old_flags, font_id

  -- (re-)create window

  iwin = "imap_" .. GetPluginID()
  
  WindowCreate(iwin, 0, 0, 0, 0, 0, 0, 0)

  windowinfo = movewindow.install(iwin, miniwin.pos_top_right)
  old_mode, old_top, old_left, old_flags, iwin_width, iwin_height = init_old(windowinfo)

  WindowCreate(iwin, old_left, old_top , iwin_width, iwin_height, old_mode, old_flags, ColourNameToRGB("black"))

  -- let them move it around
  movewindow.add_drag_handler(iwin, 0, 0, iwin_width, 15, miniwin.cursor_both_arrow)

  -- draw 3D box
  DrawThemed3DRect(iwin, 0, 0, iwin_width, iwin_height + font_height + 2, true)

  -- set global variables
  imap_plane = plane
  planemaxx = maxx
  planemaxy = maxy

  if (config.map_zoom) then
	startx = posx - iwin_width
	starty = posy - iwin_height
  else 
	imap_startx = startx
	imap_starty = starty
  end

  -- load map, show it
  imap_img_map = load_image(filename)

  WindowLoadImageMemory(iwin, "imap", imap_img_map)
  WindowDrawImage(iwin, "imap", 0, 0, iwin_width - 4, iwin_height - 4, miniwin.image_stretch)
   
end


function init_old(windowinfo)
  local old_mode, old_top, old_left, old_flags, old_width, old_height
  
  -- font info
  font_id = "fn"
  font_name = "Lucida Console"    -- the font name
  
  -- Set Font/Heights
  WindowFont (iwin, font_id, font_name, 8, false, false, false, false, 0, 0)  -- normal  
  font_height = WindowFontInfo (iwin, font_id, 1)  -- height

  if (windowinfo) then
    old_mode = windowinfo.window_mode or miniwin.pos_top_right
    old_top = windowinfo.window_top or 0
    old_left = windowinfo.window_left or 0
    old_flags = windowinfo.window_flags or 0

  else
    old_mode = miniwin.pos_top_right
    old_top = 0
    old_left = 0
    old_flags = 0
  end

  old_width = GetVariable("width") or 400
  old_height = GetVariable("height") or 261

  return old_mode, old_top, old_left, old_flags, old_width, old_height
end


function redraw_map()

  if (not imap_startx) then -- defaults to Alyria
	  imap_startx = 0
      imap_starty = 0
  end

  -- (re)draw 3D box
  DrawThemed3DRect(iwin, 0, 0, iwin_width, iwin_height + font_height + 2, true)

  -- recolor Alyria's SPK waters?
  local img = imap_img_map
  if (imap_plane == "alyria") and (atsea) and (config.color_spk) then
    img = imap_img_spk
  end
  
  -- (re)draw map
  WindowLoadImageMemory(iwin, "imap", img)
 
  if (config.map_zoom) then
    local newtop, newleft, newbottom, newright
	
	-- calculate original image offset to focus on original image area (SOMETHING VERY FLAKY HERE, MATHS)
	newleft = -1 * (posx - iwin_width/2)
	newright = -1 * (posx - iwin_width/2)
	newtop = -1 * (posy - iwin_height/2)
	newbottom = -1 * (posy - iwin_height/2)
	
	-- Note("Left: " .. newleft .. " Top:" .. newtop .. " newright:" .. newright .. " newbottom:" .. newbottom)
	
    WindowDrawImage(iwin, "imap", newleft, newtop, newright , newbottom, 1)
  else
    WindowDrawImage(iwin, "imap", 3, 3, iwin_width - 4, iwin_height - 4, miniwin.image_stretch)
  end


  -- apply gamma?
  if (config.imap_gamma) then
    WindowFilter(iwin, 0, 0, 0, 0, miniwin.filter_gamma, 0.6)
  end
  
-- Tamlin Frame up header
 
    -- draw drag bar rectangle
  WindowRectOp (iwin, miniwin.rect_fill, 1, 1, 0, font_height + 2, title_bar_colour)
  
  mwtitle = plane .. " [" .. posx .. "," .. posy .. "]"

    -- find title width so we can center it
  title_width = WindowTextWidth (iwin, font_id, mwtitle)
  
  -- draw title
  WindowText(iwin, font_id, mwtitle, (iwin_width - title_width )/ 2 + 1, 1, 0, 0, title_colour)
   
-- Add Resize Icon BR

  add_resizer()

  WindowShow(iwin, true)
end


-- ------------------
-- map zoom stuff
-- ------------------

function toggle_map_zoom(status)
 if ((imap_enabled)) then
  config.map_zoom = do_toggle(config.map_zoom, status)

  if (config.map_zoom) then
    Note("-- IMap: Zoom Map: ON - Don't stay in this mode as it will be slower until I finish --")
	
    posx = gmcpval("coord.x")
    posy = gmcpval("coord.y")

    posx = tonumber(posx)
    posy = tonumber(posy)
	
	redraw_map()
  else
    Note("-- IMap: Zoom Map: OFF --")
	
    posx = gmcpval("coord.x")
    posy = gmcpval("coord.y")

    posx = tonumber(posx)
    posy = tonumber(posy)
	
	redraw_map()
  end

  save_config()
  redraw_map()
 else
	Note("-- IMap is currently disabled or hidden. --")
 end
end

-- ------------------
-- spk waters stuff
-- ------------------

function toggle_recolor_spk(status)
  config.color_spk = do_toggle(config.color_spk, status)

  if (config.color_spk) then
    Note("-- IMap: will now recolor SPK waters " .. config.spk_color .. " --")

  else
    Note("-- IMap: will no longer recolor SPK waters --")
  end

  save_config()
end


function imap_set_spk_color(color)
  config.spk_color = color

  save_config()

  -- load spk waters for Alyria, don't show them yet
  load_spk()
end


function load_spk()
  filename = "alyria_spk_" .. config.spk_color .. ".png"

  imap_img_spk = load_image(filename)
end



-- ------------
-- icon stuff
---------------

function imap_set_icon(icon)
  config.imap_icon = icon

  save_config()

  -- load icon, don't show it yet
  load_icon()
end


function imap_set_shipicon(icon)
  config.imap_shipicon = icon

  save_config()

  -- load icon, don't show it yet
  load_shipicon()
end


function load_icon()
  filename = config.imap_icon .. ".png"

  imap_img_noship = load_image(filename)
end


function load_shipicon()
  filename = config.imap_shipicon .. ".png"

  imap_img_ship = load_image(filename)
end


function imap_desticon(icon)
  local filename
  if (icon == "arrow") then
    filename = "dest.png"
  else
    filename = "custom.png"
  end

  imap_img_dest = load_image(filename)
end



-- ------------
-- plot stuff
-- ------------

function imap_show_destination(posx, posy)
  if (config.map_zoom) then
    Note("Show Destination doesn't work in zoomed mode.  imap zoom off will disable zoom")
  else
	dest_posx = posx
	dest_posy = posy

	-- load destination icon, don't show it yet
	imap_desticon("arrow")
  end
end


function imap_destination_off()
  dest_posx = nil
  dest_posy = nil
end


function imap_show_label(posx, posy, color, text)
  if (imap_started) and (imap_shown) then
    --shows persistent text - currently, there can only be 1 label on the map
    text_posx = tonumber(posx)
    text_posy = tonumber(posy)
    text_color = color
    text_text = text

    show_text(text_posx, text_posy, "Trebuchet MS", 7, text_color, nil, "right", text_text)
  end
end


function imap_label_off()
  text_posx = nil
  text_posy = nil
  text_color = nil
  text_text = nil
end


function calc_pixpos(posx, posy)
--  Note("posx: " .. posx)
--  Note("posy: " .. posy)
  local startx, starty, maxx, maxy, pixmaxx, pixmaxy, pixposx, pixposy

-- ZOOM COORDS NEED WORK,  DISABLED FOR NOW
  if (config.map_zoom) then
	startx = posx - iwin_width
	starty = posy - iwin_height
	maxx = posx + iwin_width
	maxy = posy + iwin_height
	pixmaxx = iwin_width -- in pixels
	pixmaxy = iwin_height
	pixposx = ((posx + startx) * pixmaxx / maxx) -- pixels on map
    pixposy = ((posy + starty) * pixmaxy / maxy)  
  else 
	startx = (imap_startx or 0) -- defaults to Alyria
	starty = (imap_starty or 0)
	maxx = planemaxx or 2299 -- default for Alyria and UG
	maxy = planemaxy or 1499
	pixmaxx = iwin_width - 4 -- in pixels
	pixmaxy = iwin_height - 4

	pixposx = ((posx + startx) * pixmaxx / maxx) -- pixels on map
	pixposy = ((posy + starty) * pixmaxy / maxy)  
  end

-- Leaving these for now so I can debug later the issues with calculations
  --Note("startx: " .. startx)
  --Note("starty: " .. starty)
  --Note("maxx: " .. maxx)
  --Note("maxy: " .. maxy)

  --Note("pixmaxx: " .. pixmaxx)
  --Note("pixmaxy: " .. pixmaxy)

  --Note("posx + startx: " .. posx + startx)
  --Note("posy + starty: " .. posy + starty)

  --Note("pixposx: " .. pixposx)
  --Note("pixposy: " .. pixposy)
  
  --Note ("Scalex: " .. maxx/pixmaxx)
  --Note ("Scaley: " .. maxy/pixmaxy)
  
  --Note ("X Shift: " .. -1 * (posx - (iwin_width/2)))
  --Note ("Y Shift: " .. -1 * (posy - (iwin_height/2)))

  return pixposx, pixposy
end


function show_icon(posx, posy, iname, idata, points_with)
  WindowLoadImageMemory(iwin, iname, idata)

  -- calc where to draw icon on map
  local pixposx, pixposy
  pixposx, pixposy = calc_pixpos(posx, posy)

  -- calc offset, according to icon points_with
  local offsets = {
    ["upleft"] = {
      x = 0,
      y = 0,
    },

    ["upcenter"] = {
      x = -1/2,
      y = 0.
    },

    ["upright"] = {
      x = -1,
      y = 0,
    },

    ["midleft"] = {
      x = 0,
      y = -1/2,
    },

    ["midcenter"] = {
      x = -1/2,
      y = -1/2,
    },

    ["midright"] = {
      x = -1,
      y = -1/2,
    },

    ["dnleft"] = {
      x = 0,
      y = -1,
    },

    ["dncenter"] = {
      x = -1/2,
      y = -1,
    },

    ["dnright"] = {
      x = -1,
      y = -1,
    },
  }

  offsetx = WindowImageInfo(iwin, iname, 2) * offsets[points_with].x
  offsety = WindowImageInfo(iwin, iname, 3) * offsets[points_with].y

  WindowDrawImageAlpha(iwin, iname, pixposx + offsetx, pixposy + offsety, 0, 0, miniwin.image_copy)
  WindowShow(iwin, true)
end


function imap_showtext(posx, posy, color, bgcolor, text)
  --shows non-persistent text, that will disappear on next sextant prompt - there can be more than 1

  if (imap_started) and (imap_shown) then
    local posx = tonumber(posx)
    local posy = tonumber(posy)

    show_text(posx, posy, "Trebuchet MS", 7, color, bgcolor, "center", text)
  end
end


function show_text(posx, posy, font, size, color, bgcolor, align, text)
  -- set font
  WindowFont(iwin, "itext", font, size, true, false, false, false)

  -- calc where to draw text on map
  local pixposx, pixposy
  pixposx, pixposy = calc_pixpos(posx, posy)

  -- calc offset, according to align
  local offsets = {
    ["left"] = {
      x = -1,
      y = -1/2,
    },

    ["center"] = {
      x = -1/2,
      y = -1/2,
    },

    ["right"] = {
      x = 0,
      y = -1/2,
    },
  }

  local offsetx, offsety
  offsetx = WindowTextWidth(iwin, "itext", text) * offsets[align].x
  offsety = WindowFontInfo(iwin, "itext", 1) * offsets[align].y

  if (bgcolor) then
    WindowRectOp(iwin, 2, pixposx + offsetx - 1, pixposy + offsety, pixposx - offsetx + 1, pixposy - offsety, ColourNameToRGB(bgcolor))
  end

  -- and show it
  WindowText(iwin, "itext", text,
             pixposx + offsetx, pixposy + offsety, 0, 0,
             ColourNameToRGB(color),
             false) -- not Unicode

  WindowShow(iwin, true)
end


-------------------
-- show locations
-------------------

local sextant_readings = {
  ["Alyria"] = {
  --Auryn
    ["old amaunet clan hall"] = "824, 1234",
    ["old armageddon clan hall"] = "515, 1411",
    ["palace of diocletian"] = "553, 1360",
    ["a dwarven passage between sigil and the underside"] = "477, 1426",
    ["emperor's crossroads"] = "506, 1309",
    ["glarshak"] = "778, 1281",
    ["a labyrinthine molehill"] = "536, 1258",
    ["a natural cave between alyria and the sigil underground"] = "795, 1205",
    ["palamire"] = "705, 1403",
    ["the saucy wench tavern"] = "760, 1303",
    ["shlarksh"] = "813, 1201",
    ["sigil"] = "435, 1226",
    ["the mountain village of teolaven"] = "609, 1303",
    ["mount vesuvius"] = "295, 1160",
    ["vospire"] = "330, 1176",

  --Avros
    ["tower of aroxa"] = "1759, 630",
    ["begora's sanctuary"] = "1832, 425",
    ["the fishing village of dorathon"] = "1691, 470",
    ["frost giant's keep"] = "1689, 389",
    ["jalur lumber camp"] = "1814, 255",
    ["lair of the ice witch"] = "1754, 266",
    ["the village of muldar lohk mulvar"] = "1651, 183",
    ["ogre village"] = "1885, 459",
    ["old stargazer clan hall"] = "1707, 438",
    ["tellerium"] = "1724, 685",
    ["templeton"] = "1620, 542",
    ["the hamlet of winton"] = "1582, 392",

  --Beltane
    ["the angry whale"] = "1232, 1369",
    ["the indestructible cenotaphy"] = "1430, 1241",
    ["chanctonbury woods"] = "997, 1091",
    ["the village of colyon"] = "1373, 1030",
    ["old dark order clan hall"] = "1303, 1293",
    ["dungeon deceit"] = "1254, 1071",
    ["old empire clan hall"] = "1385, 1196",
    ["gorth"] = "1629, 1223",
    ["maldra keep"] = "1304, 1092",
    ["a mineshaft between alyria and the sigil underground"] = "1041, 1246",
    ["the village of mulakanathos"] = "1556, 1237",
    ["pirate's cove"] = "1191, 968",
    ["takhtin"] = "1020, 1210",
    ["xalt, unseelie outpost"] = "1453, 1204",

  --Sepharia
    ["bazaar"] = "818, 386",
    ["a disturbed pyramid"] = "745, 263",
    ["dungeon avarice"] = "671, 572",
    ["dungeon wroth"] = "736, 391",
    ["gilvery"] = "950, 356",
    ["hall of honor"] = "697, 741",
    ["a hill giant refuge"] = "590, 670",
    ["the village of lasler"] = "698, 695",
    ["an abandoned lighthouse"] = "717, 847",
    ["the lonely dragon inn"] = "600, 700",
    ["lowangen"] = "1159, 421",
    ["mandrake woods"] = "654, 365",
    ["new kolvir"] = "571, 984",
    ["the towne of new rigel"] = "801, 545",
    ["ofstadt monastery"] = "1120, 330",
    ["old degenerates clan hall"] = "606, 405",
    ["old federation clan hall"] = "874, 236",
    ["towne of rune"] = "706, 763",
    ["rune forest"] = "701, 680",
    ["tavern of the boars"] = "797, 445",
    ["desert of thorn"] = "1048, 324",
    ["tower of art"] = "1271, 211",
    ["traveler's retreat"] = "776, 651",
    ["inn of the twin moons"] = "1007, 306",
    ["van pelt's emporium"] = "669, 758",
    ["the towne of xaventry"] = "602, 454",

  --isles
    ["aequtus"] = "374, 636",
    ["arcane archipelago"] = "926, 816",
    ["atlantis"] = "1988, 1307",
    ["capture the flag arena"] = "993, 893",
    ["daggerwind reef"] = "2089, 1387",
    ["the wreck of the feisty wench"] = "1889, 954",
    ["frigate's end"] = "264, 592",
    ["stronghold of the garbool tribe"] = "2113, 754",
    ["hellbent mountain"] = "1341, 366",
    ["irda isle"] = "1299, 688",
    ["the coven of kalywak"] = "120, 268",
    ["the black lodge"] = "1301, 1490",
    ["magencia"] = "865, 834",
    ["naulitas"] = "1968, 1337",
    ["an abandoned oil well"] = "1753, 824",
    ["a forsaken oil well"] = "1728, 842",
    ["pelican's demise"] = "1579, 937",
    ["strange ruins"] = "1804, 924",
  },

  ["Faerie Plane"] = {
    ["cavhfail"] = "347, 284",
    ["eanoss azelmar"] = "130, 65",
    ["engineers exclave"] = "451, 239",
    ["frosthold"] = "179, 236",
    ["hellbent mountain"] = "255, 163",
    ["human outpost"] = "306, 134",
    ["rahdiyr"] = "105, 72",
    ["rimeward"] = "166, 118",
    ["seelie castle"] = "43, 55",
    ["unseelie castle"] = "431, 293",
  },

  ["Sigil Underground"] = {
    ["a ghost town"] = "591, 1401",
    ["bandit camp"] = "1017, 1178",
    ["darksea"] = "919, 1232",
    ["a fiery catwalk"] = "291, 1159",
    ["genauras"] = "538, 1253",
    ["gypsy village"] = "627, 1265",
    ["the remnants of a caldera"] = "858, 959",
    ["a rift between sigil and the underside"] = "428, 1231",
    ["shrine of dira"] = "620, 1386",
    ["shrine of gath"] = "468, 1401",
    ["shrine of ithrilis"] = "543, 1301",
    ["shrine of maradas"] = "421, 1260",
    ["shrine of vandyne"] = "489, 1282",
    ["troglodyte village"] = "479, 1396",
  },

  ["Alyrian Underworld"] = {
    ["towne of decara"] = "1579, 486",
    ["hellbent mountain"] = "1341, 366",
    ["hotel hello"] = "1228, 768",
    ["kessarian's dungeon"] = "1590, 985",
    ["isle of the sea hag"] = "1111, 880",
    ["smuggler's cave"] = "1598, 838",
    ["smuggler's gulch"] = "1193, 532",
    ["three-bearded jake's"] = "908, 823",
    ["vir"] = "1439, 1052",
    ["Arien'dyth Condominiums"] = "261, 731",
  },

  -- moving dungeons
  -- ["a hydra's den"] = "?, ?",
  -- ["dungeon odious"] = "?, ?",
  -- ["gourevitch's hideaway"] = "?, ?",
  -- ["lair of the death slaadi"] = "?, ?",
  -- ["the airship |uinconvenience|x"] = "?, ?",
  -- ["the sacred temple of the tentacle cult of metonychoseuthis, with swiveling hooks"] = "?, ?",
  -- ["the seeress' fogchamber"] = "?, ?",
  -- ["the wandering sidhe"] = "?, ?",

}


local subareas = {
  ["all spirits eve global"] = "templeton",
  ["arena"] = "towne of rune",
  ["catacombs of shame"] = "templeton",
  ["decara realty"] = "towne of decara",
  ["domain of arbaces"] = "irda isle",
  ["focault's residence"] = "towne of rune",
  ["grimbold's annex"] = "tower of art",
  ["irda isle caverns"] = "irda isle",
  ["lasler valley"] = "the village of lasler",
  ["limbo maze"] = "ethereal void",
  ["new rigel gardens"] = "the towne of new rigel",
  ["new rigel realty"] = "the towne of new rigel",
  ["pirate's cove realty"] = "pirate's cove",
  ["the arches of rune estates east"] = "towne of rune",
  ["rune condominiums"] = "towne of rune",
  ["rune estates"] = "towne of rune",
  ["rune graveyard"] = "rune forest",
  ["rune realty"] = "towne of rune",
  ["runic castle"] = "towne of rune",
  ["shadow castle"] = "mandrake woods",
  ["sigil realty"] = "sigil",
  ["sigilian crossing"] = "sigil",
  ["tellerium realty"] = "tellerium",
  ["temple crypt"] = "towne of rune",
  ["temple of sumter"] = "towne of rune",
  ["the covian stronghold"] = "pirate's cove",
  ["the proving grounds"] = "irda isle",
  ["the sigilian stronghold"] = "sigil",
  ["the templetonian stronghold"] = "templeton",
  ["the xaventry stronghold"] = "the towne of xaventry",
  ["winterborn mansion"] = "towne of rune",
  ["xaventry realty"] = "the towne of xaventry",
}


function show_location(area_name, text)
  --shows non-persistent text, that will disappear on next sextant prompt - there can be more than 1

  if (imap_started) and (imap_shown) then
    if (text) then
      text = Trim(text)
    end

    if (not text) or (text == "") then
      text = "x"
    end

    area_name = string.lower(area_name)

    if (subareas[area_name]) then
      area_name = subareas[area_name]
    end

    local sextant = sextant_readings[plane][area_name]
--    Note(sextant)

    if (sextant) then
      sextant = string.gsub(sextant, " ", "")
      sextant = utils.split(sextant, ",")

--      require "serialize"
--      Note(serialize.save_simple(sextant))

      imap_showtext(sextant[1], sextant[2], "white", "black", Trim(text))
    end
  end
end


]]>

</script>

</muclient>