<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Saved on [Date you saved] -->
<!-- MuClient version 4.81 -->

<muclient>

<plugin
   name="MoonPhases"
   author="Tamlin"
   id="8a73af093e715dece34dc7f3" 
   language="Lua"
   purpose="Displays moon phases and worldgate timings"
   save_state="y"
   date_written="2024-09-15"
   date_modified="2024-09-15"
   version="1.0"
   requires="4.71"
>

<description trim="y">
<![CDATA[

MoonPhasePlugin
---------------
This plugin tracks the twin moons' (Trigael and Marabah) phases and worldgate openings in Alyria.
It displays the current moon phases with images and gate timings, updating as phases progress.

More to come,  currently visual however I plan on progressing this over time.

]]>
</description>

</plugin>


<!--  Variables  -->

<variables>

  <variable name="trigael_phase">[a-zA-Z ]+</variable>
  <variable name="marabah_phase">[a-zA-Z ]+</variable>
  <variable name="gate_length">[\d]+</variable>
  <variable name="time_to_open">[\d]+</variable>

</variables>


<!--  Aliases  -->

<aliases>

  <!-- Plugin help -->
  <alias
   enabled="y"
   match="^moonphase help$"
   regexp="y"
   script="OnHelp"
  >
  </alias>
  
   <alias
   match="^moon mini(| (?P&lt;state&gt;on|off))$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_clock("%&lt;state&gt;")
</send>
  </alias>

  <alias
    enabled="y"
    regexp="y"
    match="^reset moon$"
    script="restore_defaults"
  >
  </alias>

</aliases>


<!--  Triggers  -->

<triggers>

<!-- system time -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^The current system time is\: [A-Za-z ]+ [0-9]+ (?P&lt;hh&gt;[0-9]+)\:(?P&lt;mm&gt;[0-9]+)\:(?P&lt;ss&gt;[0-9]+) [0-9]+\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_system_time("%&lt;hh&gt;", "%&lt;mm&gt;", "%&lt;ss&gt;")
</send>
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="^Materia Magica has been up since\: (?P&lt;weekday&gt;[A-Za-z ]+)[ ](?P&lt;month&gt;[A-Za-z ]+)[ ](?P&lt;day&gt;[0-9]+)[ ](?P&lt;hh&gt;[0-9]+)\:(?P&lt;mm&gt;[0-9]+)\:(?P&lt;ss&gt;[0-9]+) [0-9]+\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_systemup_time("%&lt;weekday&gt;", "%&lt;month&gt;", "%&lt;day&gt;", "%&lt;hh&gt;", "%&lt;mm&gt;", "%&lt;ss&gt;")
</send>
  </trigger>

<!-- alyrian time -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^It is (?P&lt;hh&gt;[0-9]+)\:(?P&lt;mm&gt;[0-9]+) (?P&lt;ampm&gt;(am|pm)) on (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("%&lt;hh&gt;", "%&lt;mm&gt;", "%&lt;ampm&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^The land becomes alive as the sun breaks free of the horizon\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("5", "00", "am", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^The sun rises in the east\, sending molten light across the land\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("6", "00", "am", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^The sun has reached its zenith directly overhead\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("12", "00", "pm", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^Light begins to dim as the sun sets in the west\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("6", "00", "pm", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^The last glimmer of sunlight fades\, and the land is dark\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("7", "00", "pm", true)
</send>
  </trigger>
  
<!-- init clocks -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>init_clocks()
</send>
  </trigger>

  <!-- Trigger to sync moon phases and gate info -->
  <trigger
   enabled="y"
   match="^Trigael\: \((.+)\)  Marabah\: \((.+)\)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>resyncMoonGateInfo("%1", "%2")</send>
  </trigger>

</triggers>

<!--  Timers  -->

<timers>

  <timer
   name="seconds"
   enabled="y"
   second="1.00"
   offset_second="0.00"
   send_to="12"
   active_closed="y"
  >
  <send>update_times()
</send>
  </timer>

</timers>

<!--  Lua Script  -->

<script>
<![CDATA[
require "generic_miniwindow"

local trigael
local marabah
local worldgate
local next_trigael_phase
local next_marabah_phase
local next_worldgate

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  EnableTrigger("first_prompt", true)
end

function OnPluginConnect()
  EnableTrigger("first_prompt", true)
end


function OnPluginEnable()
  if (show_mini) then
    mini_show()
  end
end


function OnPluginClose()
  if (show_mini) then
    if GetPluginInfo(GetPluginID(), 17) then -- plugin is enabled
      mini_hide()
    end
  end
end


function OnPluginDisable()
  if (show_mini) then
    mini_hide()
  end
end


function OnPluginSaveState()
  if (show_mini) then
    SetVariable("enabled", tostring(GetPluginInfo(GetPluginID(), 17)))
    save_status()
  end
end

function OnHelp()
    ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
    Note("")
    ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end

function plugin_update_url()
    local t = {
        "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/src/moons.xml"
    }
    return (table.concat(t, ";"))
end

function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/full.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/half_waning.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/half_waxing.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/new.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/waning_crescent.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/waning_gibbous.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/waxing_crescent.png",
    "https://raw.githubusercontent.com/BMCSamael/mmmushclient/master/res/moons/waxing_gibbous.png",
    
  }
  return (table.concat(t, ";"))
end

function init_clocks()
  EnableTrigger("first_prompt", false)
  Note("-- moon: sending 'time' to capture the current worldgates --")
  Note("(please look at a clock, or check time with a clock in your inv, to initialize the current Alyrian time)")

  show_mini = ((GetVariable("show_mini") or "true") == "true")

  Send("time")
end

function capture_system_time(hh, mm, ss)
  sys_time_hh = tonumber(hh)
  sys_time_mm = tonumber(mm)
  sys_time_ss = tonumber(ss)

  clocks_start()
end

function capture_systemup_time(weekday, month_name, day, hh, mm, ss)
  -- Create a mapping of month names to numbers
  local month_map = {
    Jan = 1, Feb = 2, Mar = 3, Apr = 4,
    May = 5, Jun = 6, Jul = 7, Aug = 8,
    Sep = 9, Oct = 10, Nov = 11, Dec = 12
  }

  -- Trim leading and trailing whitespace from month_name
  month_name = month_name:match("^%s*(.-)%s*$")

  -- Convert month name to number
  local sys_time_month = month_map[month_name]
  
  if not sys_time_month then
    Note("Error: Invalid month name")
    return
  end

  -- Convert other inputs to appropriate types
  local sys_time_day = tonumber(day)
  local sys_time_hh = tonumber(hh)
  local sys_time_mm = tonumber(mm)
  local sys_time_ss = tonumber(ss)
  
  -- Get the current date and time
  local current_time = os.time()
  
  -- Create a table with the input date and time
  local start_time = os.time{
    year = os.date("%Y", current_time), -- Use current year
    month = sys_time_month,
    day = sys_time_day,
    hour = sys_time_hh,
    min = sys_time_mm,
    sec = sys_time_ss
  }
  
  -- Ensure the start_time is valid
  if not start_time then
    Note("Error: Invalid start time")
    return
  end

  -- Calculate the total hours passed since the input date and time
  local hours_passed = (current_time - start_time) / 3600
  
  -- Calculate the remainder when divided by 3.5 hours
  local remainder = hours_passed % 3.5
  
  -- Calculate the time remaining to the next phase
  local time_remaining = 3.5 - remainder
  
  -- Convert the remaining time to seconds
  local remaining_seconds = time_remaining * 3600
  
  -- Calculate hours, minutes, and seconds from remaining_seconds
  local hh = math.floor(remaining_seconds / 3600)
  local mm = math.floor((remaining_seconds % 3600) / 60)
  local ss = math.floor(remaining_seconds % 60)
  
  sysup_time_hh = tonumber(hh)
  sysup_time_mm = tonumber(mm)
  sysup_time_ss = tonumber(ss)

  -- Call the clocks_start function
  clocks_start()
end

function capture_alyrian_time(hh, mm, ampm, reset)
  if (reset) then
    EnableTimer("seconds", false)
    ResetTimer("seconds")
    EnableTimer("seconds", true)
  end

  aly_time_hh = tonumber(hh)

  -- converting to 24-hour clock
  if (ampm == "pm") and (aly_time_hh ~= 12) then -- 12 pm = midday, so we don't fix it
    aly_time_hh = aly_time_hh + 12
  end
  if (ampm == "am") and (aly_time_hh == 12) then -- 12 am = midnight
    aly_time_hh = 0
  end

  aly_time_mm = tonumber(mm)
  aly_time_ss = 0
end



----------------
-- update time
----------------

function fix_time(hh, mm, ss)
  -- Handle negative seconds
  if ss < 0 then
    local minute_decrement = math.ceil(math.abs(ss) / 60)
    mm = mm - minute_decrement
    ss = (ss % 60 + 60) % 60  -- Ensure ss is in [0, 59]
  end

  -- Handle seconds exceeding 59
  if ss > 59 then
    local minute_increment = math.floor(ss / 60)
    mm = mm + minute_increment
    ss = ss % 60  -- Ensure ss is in [0, 59]
  end

  -- Handle negative minutes
  if mm < 0 then
    local hour_decrement = math.ceil(math.abs(mm) / 60)
    hh = hh - hour_decrement
    mm = (mm % 60 + 60) % 60  -- Ensure mm is in [0, 59]
  end

  -- Handle minutes exceeding 59
  if mm > 59 then
    local hour_increment = math.floor(mm / 60)
    hh = hh + hour_increment
    mm = mm % 60  -- Ensure mm is in [0, 59]
  end

  -- Handle hours exceeding 23
  if hh > 23 then
    hh = hh % 24
  end

  -- Handle negative hours
  if hh < 0 then
    hh = hh % 24
    if hh < 0 then
      hh = 24 + hh
    end
  end

  return hh, mm, ss
end



function update_times()
  if (sys_time_ss ~= nil) then
    sys_time_ss = sys_time_ss + 1
    sys_time_hh, sys_time_mm, sys_time_ss = fix_time(sys_time_hh, sys_time_mm, sys_time_ss)
  end

  if (aly_time_ss ~= nil) then
    aly_time_ss = aly_time_ss + 4
    aly_time_hh, aly_time_mm, aly_time_ss = fix_time(aly_time_hh, aly_time_mm, aly_time_ss)
  end

  if (sysup_time_ss ~= nil) then
	sysup_time_ss = sysup_time_ss - 1
    sysup_time_hh, sysup_time_mm, sysup_time_ss = fix_time(sysup_time_hh, sysup_time_mm, sysup_time_ss)
  end
  
  clocks_redraw()
end


------------
-- toggles
------------

function toggle_clock(state)
  if (state == "") then
    show_mini = not show_mini

  elseif (state == "on") then
    show_mini = true

  elseif (state == "off") then
    show_mini = false
  end

  if (show_mini) then
    SetVariable("show_mini", "true")
    mini_show()

  else
    SetVariable("show_mini", "false")
    mini_hide()
  end
end

function add_to_mini(fgcol, bgcol, txt)
  if (show_mini) then
    if (not styles) then
      styles = {}
    end

    if (txt == "\r\n") then
      log_to_mini("", "", "", styles)
      styles = {}

    else
      styles[#styles + 1] = {
        text = txt,
        textcolour = ColourNameToRGB(fgcol),
        backcolour = ColourNameToRGB(bgcol),
        length = string.len(txt),
        style = 0,
      }
    end
  end
end

-------------------- DATA -----------------------

-- Moon data tables referencing portal locations for each phase combination

moon_data = {
    ["full"] = {
        ["full"] = { { "Sigil", "Tellerium" } },
        ["gibbous waning"] = { { "Xaventry", "Garbool" } },
        ["gibbous waxing"] = { { "Verity Isle", "Lodge" } },
        ["half waning"] = { { "Lowangen", "Maldras Keep" } },
        ["half waxing"] = { { "SUG - Genauras", "UG - Lava" } },
        ["new"] = { { "CTF", "Kalywak" } },
        ["crescent waning"] = { { "Rune", "SUG - Ghost" } },
        ["crescent waxing"] = { { "Beltane", "Faerie Plane NE" } },
    },
    ["gibbous waning"] = {
        ["full"] = { { "Rune", "Garbool" } },
        ["gibbous waning"] = { { "Maldras Keep", "SUG - Gypsy" } },
        ["half waxing"] = { { "Maldras Keep", "Rune" } },
        ["half waning"] = { { "CTF", "Verity Isle" } },
        ["crescent waning"] = { { "Tellerium", "SUG - Genauras" } },
        ["crescent waxing"] = { { "Beltane", "SUG - Bandit" } },
        ["new"] = { { "Sigil", "Faerie Plane NE" } },
        ["gibbous waxing"] = { { "Void", "SUG - Ghost" } },
    },
    ["half waning"] = {
        ["gibbous waning"] = { { "Lowangen (1177, 384)", "Sigil (502, 1281)" } },
        ["half waxing"] = { { "Tellerium", "Xaventry" } },
        ["crescent waning"] = { { "SUG - Genauras", "Maldras Keep" } },
        ["crescent waxing"] = { { "Faerie Plane SW", "Rune" } },
        ["new"] = { { "Tellerium", "Beltane" } },
        ["half waning"] = { { "UG - Decara", "CTF" } },
        ["gibbous waxing"] = { { "Lowangen", "UG - Decara" } },
        ["full"] = { { "Xaventry", "Faerie Plane NE" } },
    },
    ["crescent waning"] = {
        ["gibbous waning"] = { { "Verity Isle", "Garbool" } },
        ["half waxing"] = { { "Beltane", "Tellerium" } },
        ["crescent waning"] = { { "Tellerium", "UG - Decara" } },
        ["half waning"] = { { "Lowangen", "CTF" } },
        ["crescent waxing"] = { { "Rune", "Void" } },
        ["new"] = { { "Sigil", "Beltane" } },
        ["gibbous waxing"] = { { "Sigil", "UG - Lava" } },
        ["full"] = { { "Xaventry", "SUG - Ghost" } },
    },
    ["new"] = {
        ["gibbous waning"] = { { "Sigil", "Lodge" } },
        ["half waxing"] = { { "Beltane", "Tellerium" } },
        ["crescent waning"] = { { "Verity", "UG - Hotel Hello" } },
        ["crescent waxing"] = { { "Lowangen", "Garbool" } },
        ["new"] = { { "CTF", "Maldras Keep" } },
        ["half waning"] = { { "Xaventry", "CTF" } },
        ["gibbous waxing"] = { { "Maldras Keep", "Kalywak" } },
        ["full"] = { { "Rune", "Lowangen" } },
    },
    ["crescent waxing"] = {
        ["gibbous waning"] = { { "SUG - Kalywak", "SUG - Gypsy" } },
        ["crescent waning"] = { { "Garbool", "Void" } },
        ["crescent waxing"] = { { "Lodge", "Faerie Plane Northeast" } },
        ["new"] = { { "CTF", "Lowangen" } },
        ["half waxing"] = { { "Beltane", "Sigil" } },
        ["half waning"] = { { "Xaventry", "Maldras Keep" } },
        ["gibbous waxing"] = { { "Rune", "UG Island" } },
        ["full"] = { { "Rune", "Verity Isle" } },
    },
    ["half waxing"] = {
        ["gibbous waning"] = { { "Beltane", "Rune" } },
        ["half waxing"] = { { "CTF", "SUG - Bandit" } },
        ["crescent waning"] = { { "Maldras Keep", "UG - Decara" } },
        ["crescent waxing"] = { { "Verity Isle", "Kalywak" } },
        ["new"] = { { "Lowangen", "SUG - Gypsy" } },
        ["half waning"] = { { "Sigil", "Tellerium" } },
        ["gibbous waxing"] = { { "Xaventry", "UG - Hotel Hello" } },
        ["full"] = { { "Maldras Keep", "Verity Isle" } },
    },
    ["gibbous waxing"] = {
        ["gibbous waning"] = { { "CTF", "Faerie Plane SW" } },
        ["crescent waning"] = { { "Lowangen", "Vandemaars Keep" } },
        ["half waxing"] = { { "Lowangen", "SUG - Ghost" } },
        ["crescent waxing"] = { { "Xaventry", "Sigil" } },
        ["new"] = { { "SUG - Lava Wastes", "Rune" } },
        ["half waning"] = { { "Sigil", "Xaventry" } },
        ["full"] = { { "Beltane", "SUG - Gypsy" } },
        ["gibbous waxing"] = { { "Tellerium", "Kalywak" } },
    },
}

local moon_phases = {
    "new", 
    "crescent waxing", 
    "half waxing", 
    "gibbous waxing", 
    "full", 
    "gibbous waning", 
    "half waning", 
    "crescent waning"
}

function get_next_moon_phase(current_phase)
    local current_index
    for i, phase in ipairs(moon_phases) do
        if phase == current_phase then
            current_index = i
            break
        end
    end

    -- Debugging output
    if not current_index then
        Note("Error: Current phase '" .. current_phase .. "' not found in moon phases.")
        return "unknown"
    end

    local next_index = (current_index % #moon_phases) + 1
    local next_phase = moon_phases[next_index]

    return next_phase
end

function show_next_moon_phase()
    local current_trigael_phase = trigael or "unknown"
    local current_marabah_phase = marabah or "unknown"

    -- Validate phases
    local valid_phases = moon_phases
    if not table.contains(valid_phases, current_trigael_phase) then
        Note("Trigael's current phase is invalid: " .. current_trigael_phase)
        current_trigael_phase = "unknown"
    end
    if not table.contains(valid_phases, current_marabah_phase) then
        Note("Marabah's current phase is invalid: " .. current_marabah_phase)
        current_marabah_phase = "unknown"
    end

    next_trigael_phase = get_next_moon_phase(current_trigael_phase)
    next_marabah_phase = get_next_moon_phase(current_marabah_phase)
	
	local new_gate_list = moon_data[next_trigael_phase][next_marabah_phase]
    if not gate_list then
        Note("No gates found for phases: " .. next_trigael_phase .. ", " .. next_marabah_phase)
        return
    end

	next_worldgate = getworldgate(new_gate_list)
end

-- Utility function to check if a table contains a value
function table.contains(tbl, value)
    for _, v in ipairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

function clocks_start()
  do_install_miniwindow("Clocks and MoonPhases", show_mini, false)
end


function clocks_redraw()
  if (show_mini) then
    clear_mini()
    do_show_clocks()
  end
end


function do_show_clocks()
  local txt = ""

  -- Alyrian time
  txt = "alyria: "
  if (aly_time_ss) then
    txt = txt .. string.format("%02i", aly_time_hh) .. ":" .. string.format("%02i", aly_time_mm) .. ":" .. string.format("%02i", aly_time_ss)
  else
    txt = txt .. "??:??:??"
  end

  add_to_mini("silver", "black", txt)
  add_to_mini("silver", "black", "\r\n")


  -- System time
  txt = "system: "
  if (sys_time_ss) then
    txt = txt .. string.format("%02i", sys_time_hh) .. ":" .. string.format("%02i", sys_time_mm) .. ":" .. string.format("%02i", sys_time_ss)
  else
    txt = txt .. "??:??:??"
  end

  add_to_mini("silver", "black", txt)
  add_to_mini("silver", "black", "\r\n")


  -- Local time
  txt = "local:  " .. os.date("%H:%M:%S")

  add_to_mini("silver", "black", txt)
  add_to_mini("silver", "black", "\r\n")
  
  -- Moons Trig
  txt = "Trigael:  " .. tostring(trigael)
  add_to_mini("silver", "black", txt)	
  add_to_mini("silver", "black", "\r\n")
    
	-- Moons Marabah
  txt = "Marabah:  " .. tostring(marabah)
  add_to_mini("silver", "black", txt)	
  add_to_mini("silver", "black", "\r\n")
  
  	-- Moons Gates
  txt = "Gates:  " .. tostring(worldgate)
  add_to_mini("silver", "black", txt)	
  add_to_mini("silver", "black", "\r\n")
  
    -- System time
  txt = "Time To Next: "
  if (sysup_time_ss) then
    txt = txt .. string.format("%02i", sysup_time_hh) .. ":" .. string.format("%02i", sysup_time_mm) .. ":" .. string.format("%02i", sysup_time_ss)
  else
    txt = txt .. "??:??:??"
  end
    add_to_mini("silver", "black", txt)	
	add_to_mini("silver", "black", "\r\n")
  
   -- Show Next Phase
   show_next_moon_phase()
  txt = "Next Moons Trigael: " .. next_trigael_phase
  add_to_mini("silver", "black", txt)	
  add_to_mini("silver", "black", "\r\n")
  
  txt = "Next Moons Marabah: " .. next_marabah_phase
  add_to_mini("silver", "black", txt)	
  add_to_mini("silver", "black", "\r\n")
  
  txt = "Next Worldgate: " .. next_worldgate
  add_to_mini("silver", "black", txt)	
  add_to_mini("silver", "black", "\r\n")
    
end


function add_to_mini(fgcol, bgcol, txt)
  if (show_mini) then
    if (not styles) then
      styles = {}
    end

    if (txt == "\r\n") then
      log_to_mini("", "", "", styles)
      styles = {}

    else
      styles[#styles + 1] = {
        text = txt,
        textcolour = ColourNameToRGB(fgcol),
        backcolour = ColourNameToRGB(bgcol),
        length = string.len(txt),
        style = 0,
      }
    end
  end
end

function resyncMoonGateInfo(trigael_phase, marabah_phase)
	trigael = trigael_phase
	marabah = marabah_phase
 	if not moon_data[trigael_phase] then
        Note("Invalid Trigael phase: " .. tostring(trigael_phase))
        return
    end
    if not moon_data[marabah_phase] then
        Note("Invalid Marabah phase: " .. tostring(marabah_phase))
        return
    end

    gate_list = moon_data[trigael_phase][marabah_phase]
    if not gate_list then
        Note("No gates found for phases: " .. trigael_phase .. ", " .. marabah_phase)
        return
    end

	worldgate = getworldgate(gate_list)
	
    -- Update clock info window
	  clocks_redraw()
end

function getworldgate(gate_list)
 -- Convert gate_list to a string
    local worldgates = ""
    for _, pair in ipairs(gate_list) do
        -- pair is a table with two values (e.g., { "Sigil", "Tellerium" })
        if #pair == 2 then
            worldgates = worldgates .. pair[1] .. " -> " .. pair[2] .. ", "
        else
            Note("Unexpected data structure in gate_list")
        end
    end
    
    worldgates = worldgates:sub(1, -3) -- Remove the trailing comma and space
	return worldgates
end
]]>
</script>

</muclient>
