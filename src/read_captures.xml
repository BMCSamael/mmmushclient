<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, November 03, 2013, 2:44 PM -->
<!-- MuClient version 4.90 -->

<!-- Plugin "read_captures" generated by Plugin Wizard -->

<muclient>

<plugin
   name="read_captures"
   author="Ruthgul"
   id="66f8ef96f2166bb586529087"
   language="Lua"
   purpose="Reads channel captures switching focus from the world window."
   save_state="y"
   date_written="2013-11-03 14:41:30"
   date_modified="2016-02-11 14:13:31"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

~ read_captures ~

Receives relevant captures broadcasted by capture2dworld, and reads them (via text-to-speech.)


** REQUIRES **

- either MushReader (plugin id = 925cdd0331023d9f0b8f05a7, by Tyler Spivey), or Sapi_speaker / Text-To-Speech (plugin id = 463242566069ebfd1b379ec1, by Nick Gammon) must be installed and enabled.
- capture2dworld (plugin id="b2772cad800b33a6073d9377") must be installed and enabled.


Syntax:

* available captures  - lists the captures which have unread lines in their queues

* read captures <channel_type> - reads up to /depth/ unread lines in the specific capture type (eg, read captures clan), in reverse order (newest first)

* read captures sorted <channel_type> - reads up to /depth/ unread lines in the specific capture type (eg, read captures sorted public), in natural order (oldest first)

* purge captures <channel_type>  - purges all lines in that specific capture queue

where <channel_type> is one of the following:
  alliance|announce|archon|auction|aucverb|clan|form|guide|irc|ircverb|notify|novice|page|relay|say|shout|talk|tell|yell

where /depth/ is 5 by default, and can be changed via the read captures depth alias

* skip line  - stops reading the current line and advances to the next one

* notify incoming messages  - toggles whether you want to be notified of incoming messages or not (on by default)

* notify when active  - toggles whether you want to be notified of incoming messages when the world window has focus (off by default)

* read captures depth <number>  - choose how many lines from any specific capture type you want to read - it's 5 by default


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>


<!--  Aliases   -->

<aliases>

  <alias
   enabled="y"
   match="^available captures$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_available_captures()
</send>
  </alias>

  <alias
   enabled="y"
   match="^read captures (?&lt;type&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>do_read_captures("%&lt;type&gt;", true)
</send>
  </alias>

  <alias
   enabled="y"
   match="^read captures sorted (?&lt;type&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>do_read_captures("%&lt;type&gt;", false)
</send>
  </alias>

  <alias
   enabled="y"
   match="^purge captures (?&lt;type&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>purge_captures("%&lt;type&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^notify incoming messages$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_notify()
</send>
  </alias>

  <alias
   enabled="y"
   match="^notify when active$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_notify_when_active()
</send>
  </alias>

  <alias
   enabled="y"
   match="^read captures depth (?&lt;depth&gt;[0-9]+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_captures_depth("%&lt;depth&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^skip line$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>skip_text()
</send>
  </alias>

<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^read\_captures(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>




<!--  Scripts  -->

<script>

<![CDATA[

require "serialize"
require "wait"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    captures = {}
    captures_index = {}

    depth = tonumber(GetVariable("depth") or "5")
    do_notify = ((GetVariable("do_notify") or "true") == "true")
    notify_when_active = ((GetVariable("notify_when_active") or "false") == "true")

    SetOption("play_sounds_in_background", 1)

    do_get_captures_list()

    -- give the plugins some time to initialize
    wait.time(3)
    detect_reader()
  end)
end


function OnPluginListChanged()
  detect_reader()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/read_captures.xml",
  }
  return (table.concat(t, ";"))
end



------------------
-- detect reader
------------------

function detect_reader()
  local mush_reader_on = reader_plugin_present()
  local sapi_on = sapi_plugin_present()

  use_reader = nil
  use_notify = nil

  -- to read captures, we prefer MushReader over SAPI
  if (mush_reader_on) then
    use_reader = "mushreader"
--    Note("-- read_captures: MushReader plugin by Tyler Spivey detected, compatible with various screen readers --")

  elseif (sapi_on) then
    use_reader = "sapi"
--    Note("-- read_captures: Sapi_speaker or Text_To_Speech plugin by Nick Gammon detected, compatible with SAPI --")
  end

  -- to notify of new messages, we prefer SAPI over MushReader
  if (sapi_on) then
    use_notify = "sapi"

  elseif (mush_reader_on) then
    use_notify = "mushreader"
  end
end


function sapi_plugin_present()
  return is_plugin_present("Sapi_speaker", "463242566069ebfd1b379ec1") or is_plugin_present("Text_To_Speech", "463242566069ebfd1b379ec1")
end


function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end



-------------------
-- queue captures
-------------------

function do_get_captures_list()
  wait.make(function()
    local capt = get_captures_list()

    while (not capt) do
      wait.time(.5)
    end

--    Note("got capt! = " .. capt)
    process_channels(capt)
  end)
end


function get_captures_list()
  local res, val

  res, val = CallPlugin("b2772cad800b33a6073d9377", "get_captures_list")

--  Note(res)

  if (res ~= 0) then
    val = nil
  end

  return val
end


function OnPluginBroadcast(msg, id, name, text)
  if ((id =="b2772cad800b33a6073d9377") -- capture2dworld
    and (name == "capture2dworld"))
  or ((id == "47150df0ca58b162ea22b396") -- capture2notepads
    and (name == "capture2notepads")) then
--    Note("msg: " .. (msg or "nil"))
--    Note("text: " .. (text or "nil"))

    if (msg == 0) then
      process_channels(text)

    elseif (msg == 2) then
      process_message(text)
    end
  end
end


function process_channels(text)
  local t = utils.split(text, "|")

  -- add new captures
  for i = 1, #t do
    if (not captures[t[i]]) then
      captures[t[i]] = {}
      captures_index[t[i]] = 1
    end
  end

  -- remove old captures
  for capture, list in pairs(captures) do
    if (not find_index(t, capture)) then
      captures[capture] = nil
      captures_index[capture] = nil
    end
  end

--  Note(serialize.save_simple(captures))
end


function find_index(t, item)
  local res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end


function process_message(text)
--  Note("process_message()")
  local t = utils.split(text, "Ø")

  local type = t[1]
  local txt = t[2]
  local who = t[3]

--  Note(type)
--  Note(txt)
--  Note(who)

  if (string.lower(who or "") ~= "you") then
    if (not captures[type]) then
      captures[type] = {}
    end

    if (do_notify) then
      if (type ~= "aucverb") then
        notify(type)
      else
        notify("auction")
      end
    end

    if (use_timestamps) then
      txt = os.date("%x %X") .. " - " .. txt
    end

    -- queue capture
    table.insert(captures[type], txt)

--    Note(serialize.save_simple(captures))
  end
end



------------------
-- read captures
------------------

function list_available_captures()
  local t = {}

  for capture, list in pairs(captures) do
    if (#list >= captures_index[capture]) then
      t[#t + 1] = capture
    end
  end

  t = table.concat(t, ",")
  t = string.gsub(t, ",", ", ")
  t = "available captures: " .. t

  Note(t)
end


function toggle_notify()
  do_notify = not do_notify

  if (do_notify) then
    Note("-- read_captures: will now notify you of incoming messages --")

  else
    Note("-- read_captures: will no longer notify you of incoming messages --")
  end

  SetVariable("do_notify", tostring(do_notify))
  SaveState()
end


function toggle_notify_when_active()
  notify_when_active = not notify_when_active

  if (notify_when_active) then
    Note("-- read_captures: will now notify you of incoming messages when your world window has focus --")

  else
    Note("-- read_captures: will no longer notify you of incoming messages when your world window has focus --")
  end

  SetVariable("notify_when_active", tostring(notify_when_active))
  SaveState()
end


function do_read_captures(type, reverse)
--  Note(serialize.save_simple(captures))
--  Note(serialize.save_simple(captures_index))
--  Note(type)
  if (use_reader) then
    if (captures[type]) then
      -- check unread index
      local start = captures_index[type] or 0
      if (start < 1) then
        start = 1
      end

      if (start < (#captures[type] - depth + 1)) then
        start = #captures[type] - depth + 1
      end

      local total = #captures[type]

--      Note("start: " .. start)
--      Note("total: " .. total)

      if (not reverse) then
      -- natural order
        for i = start, total do
--          Note(i)
          read_text(captures[type][i])
        end

      else
      -- reverse order
        for i = total, start, -1 do
--          Note(i)
          read_text(captures[type][i])
        end
      end

      captures_index[type] = total + 1
    end

  else
    Note("-- read_captures - error: no screen reader detected --")
  end
end


function purge_captures(type)
  if (captures[type]) then
    captures[type] = {}
    captures_index[type] = 1
  end
end


function set_captures_depth(new_depth)
  depth = tonumber(new_depth)

  SetVariable("depth", depth)
  SaveState()
end


function read_text(txt)
  local res

  if (use_reader == "mushreader") then
    res = CallPlugin("925cdd0331023d9f0b8f05a7", "say", txt)

  elseif (use_reader == "sapi") then
    res = CallPlugin("463242566069ebfd1b379ec1", "say", txt)
  end

--  Note(res)
end


function notify(txt)
  local res

  if (notify_when_active) or (not world.GetInfo(113)) then
    if (use_notify == "sapi") then
      res = CallPlugin("463242566069ebfd1b379ec1", "say", txt)

    elseif (use_notify == "mushreader") then
      res = CallPlugin("925cdd0331023d9f0b8f05a7", "say", txt)
    end

--    Note(res)
  end
end


function skip_text()
  local res

  if (use_reader == "sapi") then
    res = CallPlugin("463242566069ebfd1b379ec1", "speak_skip")
  end
end


]]>

</script>

</muclient>
