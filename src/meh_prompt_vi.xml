<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, January 03, 2014, 12:03 PM -->
<!-- MuClient version 4.91 -->

<!-- Plugin "meh_prompt_vi" generated by Plugin Wizard -->

<muclient>

<plugin
   name="meh_prompt_vi"
   author="Ruthgul"
   id="34819975b09478bd0aaa8a3d"
   language="Lua"
   purpose="gags your extended prompt and shows info on demand"
   save_state="y"
   date_written="2014-01-03 12:02:33"
   date_modified="2014-11-06 11:47:05"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

~ meh_prompt_vi ~

- Turns extended-prompt ON
- Gags the prompt
- Capture vitals, and provides aliases to check them on the fly
- Warn you when hp is < a given percentage (10% by default)
- When idling in a safe room, it nly says "SAFE" once, by keeping track of the current room


*** REQUIRES ***

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- Client setting: Game, Configure, Output > [x] Convert IAC EOR/GA to new line (must be checked).


Syntax:

* prompt hp
* prompt sp
* prompt st

* warn low hp <percentage>  - sets the hp% threshold where you want be warned about low hp (0-100, default value is 10 - set it to 0 to turn the warning off)

* prompt set reader {sapi|mushreader}  - chooses the reader to be used to read your vitals (default is sapi)


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
    enabled="y"
    match="^prompt[ ]+hp$"
    regexp="y"
    send_to="12"
    sequence="100"
  >
  <send>read_hp()
</send>
  </alias>

  <alias
    enabled="y"
    match="^prompt[ ]+sp$"
    regexp="y"
    send_to="12"
    sequence="100"
  >
  <send>read_sp()
</send>
  </alias>

  <alias
    enabled="y"
    match="^prompt[ ]+st$"
    regexp="y"
    send_to="12"
    sequence="100"
  >
  <send>read_st()
</send>
  </alias>

  <alias
    enabled="y"
    match="^warn[ ]+low[ ]+hp[ ]+(?P&lt;threshold&gt;[0-9]+)$"
    regexp="y"
    send_to="12"
    sequence="100"
  >
  <send>set_low_hp_threshold("%&lt;threshold&gt;")
</send>
  </alias>

  <alias
    enabled="y"
    match="^prompt[ ]+set[ ]+reader[ ]+(?P&lt;reader&gt;(sapi|mushreader))$"
    regexp="y"
    send_to="12"
    sequence="100"
  >
  <send>pick_reader("%&lt;reader&gt;")
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^meh\_prompt\_vi(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>


<!-- capture max vitals -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^[0-9]+\% [0-9\,]+ \/ (?P&lt;max&gt;[0-9\,]+) HP\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_max_hp("%&lt;max&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^[0-9]+\% [0-9\,]+ \/ (?P&lt;max&gt;[0-9\,]+) SP\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_max_sp("%&lt;max&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^[0-9]+\% [0-9\,]+ \/ (?P&lt;max&gt;[0-9\,]+) ST\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_max_st("%&lt;max&gt;")
</send>
  </trigger>


<!-- on any prompt -->

  <trigger
   name="other_prompts"
   keep_evaluating="y"
   match="^(?P&lt;something&gt;.*?)\&lt;(?P&lt;hp&gt;.+)hp (?P&lt;sp&gt;.+)sp (?P&lt;st&gt;.+)st\&gt; $"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_prompt("%&lt;something&gt;", "%&lt;hp&gt;", "%&lt;sp&gt;", "%&lt;st&gt;")
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"
require "gmcphelper"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Note(GetPluginInfo(GetPluginID(), 1) .. ": type " .. GetPluginInfo(GetPluginID(), 1) .. " help to see info about this plugin")

    threshold = tonumber(GetVariable("threshold") or 10)
    old_room = nil

    EnableTrigger("first_prompt", true)

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  sapi_present = sapi_plugin_present()
  reader_present = reader_plugin_present()

  use_reader = GetVariable("use_reader") or "sapi"
  fix_reader()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/meh_prompt_vi.xml",
  }
  return (table.concat(t, ";"))
end



---------------
-- init stuff
---------------

function on_first_prompt()
  EnableTrigger("first_prompt", false)
  SendNoEcho("set extended-prompt on")

  grab_maxes()
end



---------------
-- max vitals
---------------

function grab_maxes()
  max_hp = nil
  max_sp = nil
  max_st = nil
  SendNoEcho("score hp")
  SendNoEcho("score sp")
  SendNoEcho("score st")
end


function to_number(txt)
  local num = string.gsub(txt, ",", "")
  return tonumber(num)
end


function set_max_hp(max)
  max_hp = to_number(max)
end

function set_max_sp(max)
  max_sp = to_number(max)
end


function set_max_st(max)
  max_st = to_number(max)
  EnableTrigger("other_prompts", true)
end



-------------------------------------
-- capture vitals, etc. from prompt
-------------------------------------

function capture_prompt(flags_etc, my_hp, my_sp, my_st)
  hp = tonumber(my_hp)
  sp = tonumber(my_sp)
  st = tonumber(my_st)

  check_if_warn_low_hp()

  if (string.find(flags_etc, "SAFE")) then
    check_if_notify_safe()
  end
end



----------------
-- read vitals
----------------

function read_hp()
  read_text(hp)
end


function read_sp()
  read_text(sp)
end


function read_st()
  read_text(st)
end



----------------------
-- warn about low hp
----------------------

function set_low_hp_threshold(thold)
  thold = tonumber(thold)

  if (thold > 100) then
    Note("-- meh_prompt_vi: threshold must be a number between 0 and 100 --")

  else
    threshold = thold
    SetVariable("threshold", threshold)
    SaveState()
    Note("-- meh_prompt_vi: threshold for low hp set to " .. threshold .. " --")
    last_warn_hp = 0
  end
end


warn_frequency = 10

function check_if_warn_low_hp()
  local hppc = hp * 100 / max_hp

  if (hppc < threshold)
  and (hppc > 0)
  and (os.time() > ((last_warn_hp or 0) + warn_frequency)) then
    sapi_say("low hp")
    last_warn_hp = os.time()
  end
end



------------------------
-- notify if SAFE room
------------------------

function check_if_notify_safe()
  if (we_moved) then
    Note("SAFE")
    we_moved = false
  end
end



---------------
-- GMCP stuff
---------------

function OnPluginBroadcast (msg, id, name, text)
  if (id =="f67c4339ed0591a5b010d05b") then -- GMCP message
    if (text == "room.info") then -- room.info
      get_gmcp_room()
      check_if_we_moved()
    end
  end
end


function check_if_we_moved()
  local room = gmcpval("num")

  if (room ~= old_room) then
    res = true
    old_room = room
    we_moved = true

  else
    we_moved = false
  end
end


function get_gmcp_room()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "room.info")
  luastmt = "gmcpdata = " .. gmcparg

  assert(loadstring(luastmt or ""))()
end



------------------
-- choose reader
------------------

function pick_reader(reader)
  use_reader = reader

  SetVariable("use_reader", use_reader)
  SaveState()

  fix_reader()
end


function fix_reader()
--  Note(use_reader)
--  Note(sapi_present)
--  Note(reader_present)
  if (use_reader == "sapi") and (not sapi_present) then
    if (reader_present) then
      use_reader = "mushreader"
    else
      use_reader = nil
    end
  end

  if (use_reader == "mushreader") and (not reader_present) then
    if (sapi_present) then
      use_reader = "sapi"
    else
      use_reader = nil
    end
  end

  if (not use_reader) then
    Note("meh_prompt_vi warning: neither Sapi_speaker nor MushReader are present - please install one of them and then reload this plugin --")
  end
end



------------------------
-- sapi / reader stuff
------------------------

function read_text(txt)
  local res

  if (use_reader == "mushreader") then
--    Note("reading with mushreader")
    res = reader_say(txt)

  elseif (use_reader == "sapi") then
--  Note("reading with sapi")
    res = sapi_say(txt)
  end

--  Note(res)
end


function sapi_say(text)
  local res = CallPlugin("463242566069ebfd1b379ec1", "speak_interrupt", text)

  return res
end


function reader_say(text)
  local res = CallPlugin("925cdd0331023d9f0b8f05a7", "interrupt", text)

  return res
end


function sapi_plugin_present()
  return is_plugin_present("Sapi_speaker", "463242566069ebfd1b379ec1") or is_plugin_present("Text_To_Speech", "463242566069ebfd1b379ec1")
end


function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end


]]>

</script>

</muclient>
