<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, July 23, 2014, 3:27 PM -->
<!-- MuClient version 4.92 -->

<!-- Plugin "stats_mini" generated by Plugin Wizard -->

<muclient>

<plugin
   name="stats_mini"
   author="Ruthgul"
   id="cd8aa6f67b9f78ab77e67ae3"
   language="Lua"
   purpose="GMCP stats in a miniwindow"
   save_state="y"
   date_written="2014-07-23 15:26:36"
   date_modified="2014-11-06 10:40:05"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.--------------.
 | stats_mini |
`--------------'

Shows your GMCP stats in a miniwindow.


** REQUIRES **

- The file generic_miniwindow.lua must be placed in the MUSHclient/lua directory.
- MUSHclient must have write access to its folder.


Syntax:

* stats mini [on|off]  - shows/hides the stats miniwindow

* resync max stats  - if your max stats changed, this will recapture them

* resync stats  - if your stats changed, and it wasn't auto-detected, this will recapture them

* reset stats  - restores the default size


Author: Ruthgul
Miniwindow code adapted from Fiendish's / Enelya's chat capture plugins

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>


<!--  Aliases  -->

<aliases>

<!--  Plugin help  -->

  <alias
   match="^stats mini(| (?P&lt;state&gt;on|off))$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_stats("%&lt;state&gt;")
</send>
  </alias>

  <alias
   match="^resync max stats$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>grab_maxes()
</send>
  </alias>

  <alias
   match="^resync stats$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>grab_stats()
</send>
  </alias>

  <alias
   enabled="y"
   regexp="y"
   match="^reset stats$"
   script="restore_defaults"
  >
  </alias>

<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^stats(|\_mini)(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>


<!-- stat increases -->
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Your ([^ ]+) increases\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>grab_stats()
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "generic_miniwindow"
require "wait"
require "gmcphelper"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  show_mini = ((GetVariable("show_mini") or "true") == "true")

  EnableTrigger("first_prompt", true)
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function OnPluginConnect()
  EnableTrigger("first_prompt", true)
end


function OnPluginEnable()
  if (show_mini) then
    mini_show()
  end
end


function OnPluginClose()
  if (show_mini) then
    if GetPluginInfo(GetPluginID(), 17) then -- plugin is enabled
      mini_hide()
    end
  end
end


function OnPluginDisable()
  if (show_mini) then
    mini_hide()
  end
end


function OnPluginSaveState()
  if (show_mini) then
    SetVariable("enabled", tostring(GetPluginInfo(GetPluginID(), 17)))
    save_status()
  end
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/stats_mini.xml",
  }
  return (table.concat(t, ";"))
end


function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/generic_miniwindow.lua,MUSH/lua",
  }
  return (table.concat(t, ";"))
end



---------------
-- init stuff
---------------

function on_first_prompt()
  EnableTrigger("first_prompt", false)

  grab_maxes()
  grab_stats()

  stats_start()
end



------------
-- toggles
------------

function toggle_stats(state)
  if (state == "") then
    show_mini = not show_mini

  elseif (state == "on") then
    show_mini = true

  elseif (state == "off") then
    show_mini = false
  end

  if (show_mini) then
    SetVariable("show_mini", "true")
    mini_show()

  else
    SetVariable("show_mini", "false")
    mini_hide()
  end
end



----------------------
-- handle broadcasts
----------------------

function OnPluginBroadcast(msg, id, pname, text)
  if (id == "f67c4339ed0591a5b010d05b") -- GMCP handler
  and (pname == "MM_GMCP_handler") then
    if (text == "char.stats") then
      get_gmcp_char()
      handle_my_stats()

    elseif (text == "char.maxstats") then
      get_gmcp_char()
      handle_my_maxes()
    end
  end
end



----------------
-- GMCP stuff
----------------

function get_gmcp_char()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char")
  luastmt = "gmcpdata = " .. gmcparg

  assert(loadstring(luastmt or ""))()
end



--------------
-- max stats
--------------

function grab_maxes()
  -- only requesting maxstats once every 15 sec, max
  local frequency = 15

  if (not latest_maxes) or ((os.time() - latest_maxes) > frequency) then
--    Note("-- stats_mini: sendgmcp char.maxstats --")
    Execute("sendgmcp char.maxstats") -- request maxes
    latest_maxes = os.time()
  end
end


function handle_my_maxes()
  max_stats = {}

  latest_maxes = os.time()
  for i = 1, #stats_types do
    max_stats[stats_types[i]] = tonumber(gmcpval("maxstats." .. stats_types[i]) or 0)
  end
end



----------
-- stats
----------

function grab_stats()
  -- only requesting stats once every 15 sec, max
  local frequency = 15

  if (not latest_stats) or ((os.time() - latest_stats) > frequency) then
--    Note("-- stats_mini: sendgmcp char.stats --")
    Execute("sendgmcp char.stats") -- request stats
    latest_stats = os.time()
  end
end


stats_types = { "agility", "courage", "knowledge", "luck", "personality", "sanity", "strength", "vitality", "wisdom" }


function handle_my_stats()
  wait.make(function()
    latest_stats = os.time()

    stats = {}

    for i = 1, #stats_types do
      stats[stats_types[i]] = tonumber(gmcpval("stats." .. stats_types[i]) or 0)
    end

    while (not max_stats) do
      wait.time(.5)
    end

    for i = 1, #stats_types do
      stats[stats_types[i]] = stats[stats_types[i]] .. "/" .. max_stats[stats_types[i]]
    end

    if (not prev_stats) then
      prev_stats = {}
    end

    local changed = false
    for i = 1, #stats_types do
      if (prev_stats[stats_types[i]] ~= stats[stats_types[i]]) then
        changed = true
        break
      end
    end

    if (not prev_stats["agility"])
    or (changed) then
      stats_redraw()

      for i = 1, #stats_types do
        prev_stats[stats_types[i]] = stats[stats_types[i]]
      end
    end

    handle_my_saves(changed)
  end)
end


saves_types = { "savingbreath", "savingparalysis", "savingpetri", "savingrod", "savingspell" }


function handle_my_saves(changed)
  saves = {}

  for i = 1, #saves_types do
    saves[saves_types[i]] = tonumber(gmcpval("stats." .. saves_types[i]) or 0)
  end

  if (not prev_saves) then
    prev_saves = {}
  end

  if (not changed) then
    for i = 1, #saves_types do
      if (prev_saves[saves_types[i]] ~= saves[saves_types[i]]) then
        changed = true
        break
      end
    end
  end

  if (not prev_saves["savingbreath"])
  or (changed) then
    stats_redraw()

    for i = 1, #saves_types do
      prev_saves[saves_types[i]] = saves[saves_types[i]]
    end
  end
end



---------------------
-- miniwindow stuff
---------------------

function stats_start()
  do_install_miniwindow("stats", show_mini, false)
end


function stats_redraw()
  if (show_mini) then
    clear_mini()
    do_show_stats()
  end
end


saves_renames = {
  ["savingbreath"] = "s_v_breath",
  ["savingparalysis"] = "s_v_para",
  ["savingpetri"] = "s_v_petri",
  ["savingrod"] = "s_v_rod",
  ["savingspell"] = "s_v_spell",
}


function do_show_stats()
  local label, txt

  if (stats) then
    for i = 1, #stats_types do
      label = stats_types[i]

      txt = label .. ":" .. string.rep(" ", string.len("personality: ") - string.len(label)) .. string.format("%5s", (stats[stats_types[i]] or "?"))

      add_to_mini("silver", "black", txt)
      add_to_mini("silver", "black", "\r\n")
    end
  end

  if (saves) then
    add_to_mini("silver", "black", " ")
    add_to_mini("silver", "black", "\r\n")

    for i = 1, #saves_types do
      label = saves_renames[saves_types[i]] or saves_types[i]

      txt = label .. ":" .. string.rep(" ", string.len("personality: ") - string.len(label)) .. string.format("%5s", (saves[saves_types[i]] or "?"))

      add_to_mini("silver", "black", txt)
      add_to_mini("silver", "black", "\r\n")
    end
  end
end


function add_to_mini(fgcol, bgcol, txt)
  if (show_mini) then
    if (not styles) then
      styles = {}
    end

    if (txt == "\r\n") then
      log_to_mini("", "", "", styles)
      styles = {}

    else
      styles[#styles + 1] = {
        text = txt,
        textcolour = ColourNameToRGB(fgcol),
        backcolour = ColourNameToRGB(bgcol),
        length = string.len(txt),
        style = 0,
      }
    end
  end
end


]]>

</script>

</muclient>
