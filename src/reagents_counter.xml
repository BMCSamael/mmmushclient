<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, February 29, 2012, 11:38 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "reagents_counter" generated by Plugin Wizard -->

<muclient>

<plugin
   name="reagents_counter"
   author="Ruthgul"
   id="d2b442f2da9a95f34f5a199f"
   language="Lua"
   purpose="keeps track of reagent usage"
   save_state="y"
   date_written="2012-02-29 11:36:38"
   date_modified="2020-11-02 14:15:31"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.--------------------.
 | reagents_counter |
`--------------------'

Keeps track of reagent usage, and counts how many reagents you're carrying.


** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- detect_globals (plugin id="d900cb999816b1f6f2d4bdc5") must be installed and enabled.
- global_vars (plugin id="97784abf5f30629a0d7e7307") must be installed and enabled.
- The file generic_miniwindow.lua must be placed in the MUSHclient/lua directory, if you want to see the reagents miniwindow.
- MUSHclient must have write access to its folder.


Syntax:

* reags usage  - shows how many reagents of each type you've used since it started counting

* reags usage reset  - resets reagent counters

* count reags  - checks inventory + all containers, and shows the total count of reagents

* reags mini [on|off]  - toggles current counters in a miniwindow on/off (on by default, requires that you run 'count reags' first, and after buying or acquiring more reagents)

* reset reags  - restores the miniwindow's default size


Author: Ruthgul
Miniwindow code adapted from Fiendish's / Enelya's chat capture plugins

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>


<!--  Variables  -->

<variables>

  <variable name="firereags">a bit of foxfire|a charred branch|a charred brick|a charred sliver of wood|a chunk of red volcanic rock|a chunk of underwater magma|a dragon tooth|a fine cigar|a fire stick|a fizzing purple beaker|a fragment of obsidian|a glowing ember|a limestone|a piece of dragon gizzard|a pinch of sulfur|a small pile of volcanic ash|a volcanic rock|an acidic leaf|some firepowder|the inherited key of gath|the key of gath</variable>

  <variable name="waterreags">a bag of ice|a blob of llama spit|a bottle of mermaids tears|a clump of dried seaweed|a cracked seashell|a dolphin eye|a drop of ocean|a jar of frog eggs|a large pearl|a lump of fish gills|a piece of dried seaweed|a pinch of sea salt|a sea monkey|a sea shell|a shimmering white fish scale|a small guppy|a small puka shell|a smooth river rock|a vial of rose water|an eye of a tubeworm|an iridescent fish scale|dried\, freshwater kelp|raindrops in a bottle|the inherited key of ithrilis|the key of ithrilis</variable>

  <variable name="airreags">a bat\'s wing|a bit of condensed cloud|a bottle of air bubbles|a broken wing|a cattail|a cloud fragment|a feather from a roc|a flask of tornado essence|a fragile bubble|a fragment of coconut husk|a phoenix egg|a pile of seagull droppings|a raven feather|a stiff brown feather|a sylph in a bottle|a toucan feather|a vial of neon|a wisp of fog|an angel feather|frozen wind|the inherited key of dira|the key of dira</variable>

  <variable name="earthreags">a bluebell flower|a browning mandrake leaf|a chunk of sea salt|a clump of crimson moss|a daemon heart|a fern leaf|a few pine needles|a giant boulder|a ginseng root|a handful of goldstone dust|a large shard of salt|a lazy snail|a mandrake leaf|a palm frond|a piece of bark|a piece of dry guano|a piece of petrified wood|a purple flower|a quartz stone|a shimmering amber scale|a single seashell|a tail of a dead mole|a twig|an empty bird\'s nest|an oak leaf|a small pebble|an underground fungus|dried silverthorn leaves|eye of newt|fifteen vertebrae|some candied sasquatch toe gunk|some earthworm innards|the claws of a dungeon rat|the inherited key of maradas|the key of maradas</variable>

  <variable name="ethreags">a bit of shadow|a bone from a gravedancer|a bubbling chartreuse vial|a ghost essence|a glowing piece of black moss|a lightning bolt|a midnight pearl|a silver scale|a small misshapen pearl|a soul in a bottle|a sparkling stone|a sphere of ethereal energy|a sunstone|a wayward spirit|a white sapphire|an ephemeral squid tentacle|an essence of the source|an ethereal reagent key|the horn from a unicorn</variable>

  <variable name="gemreags">a beautiful diamond|a crystalized fossil|a diamond|a fire opal|a fragment of amethyst|a gem reagent key|a geode|a hunk of crystal|a magician\'s ruby|a perfect diamond|a petrified seed|a polished black stone|a rose\-colored shard|a roughly hewn gem|a semi\-precious stone|a silver runestone|a small quartz crystal|a small sparkling diamond|a splinter of mithril|a tiny diamond|an opal gem|an opal gemstone|some specks of ore</variable>

  <variable name="astralreags">a beautiful crystal prism|a budding twig|a buleva crystal|a carefully polished burl|a cold flame|a crystal figurine|a crystallized lava rock|a diamond stud|a dilated\, blue eyeball|a dozen roses|a dracolich eye|a gem of death|a gem of dira|a gem of gath|a gem of ithrilis|a gem of life|a gem of maradas|a gem of vandyne|a glowing crystal shard|a large black pearl|a large quartz crystal|a meteorite|a miniature ankh of gath|a miniature ankh of maradas|a pegakorn tear|a set of star charts|a shimmering serpent\'s scale|a small crystal skull|a small golden feather|a small indicolite|a small meteorite|a small pouch of lich bone dust|a turkey\'s wishbone|a white feverfew blossom|an astral bauble|an extradimensional sludge|an ivory marble|kessler\'s lost astral reagent|the blackened skull of a yuan\-ti|the head of (.+) encased in ice|vyst\'s heart</variable>

  <variable name="focusingreags">a clear focusing crystal</variable>
  
  <variable name="largefocusingreags">a large focusing crystal</variable>

  <variable name="summoningreags">a summoning stone</variable>

  <variable name="hematitereags">a small piece of hematite</variable>

</variables>


<!--  Aliases  -->

<aliases>

<!-- usage -->

  <alias
   match="^reags[ ]+usage$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  show_usage()
else
  plugin_not_initialized()
end
</send>
  </alias>

  <alias
   match="^reags[ ]+usage[ ]+reset$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  wipe_usage()
else
  plugin_not_initialized()
end
</send>
  </alias>


<!-- counter -->

  <alias
   match="^count[ ]+reags$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>do_count()
</send>
  </alias>


<!-- miniwindow -->

  <alias
   match="^reags[ ]+mini(|[ ]+(?P&lt;state&gt;(on|off)))$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_mini("%&lt;state&gt;")
</send>
  </alias>

  <alias
    enabled="y"
    regexp="y"
    match="^reset reags$"
    script="restore_defaults"
  >
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^reagents\_counter(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>


<!-- usage -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?P&lt;reags&gt;.+?) flare(|s) brightly and vanish(|es)\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>update_usage("%&lt;reags&gt;")
</send>
  </trigger>


<!-- counter -->

  <trigger
   group="script-count_reags"
   keep_evaluating="y"
   match="^(You do not see that here|You only see (.+) \'containers\' here)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>stop_counting = true</send>
  </trigger>

  <trigger
   group="script-count_reags"
   keep_evaluating="y"
   match="^\[C\]ontinue \[R\]edraw \[B\]ack \[E\]xit\: $"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>auto_cont()
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!firereags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "fire")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!waterreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "water")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!airreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "air")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!earthreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "earth")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!ethreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "eth")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!gemreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "gem")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!astralreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "astral")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!focusingreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "focusing")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!largefocusingreags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "largefocusing")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!summoningreags)(| \((.+)\))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "summoning")
</send>
  </trigger>

  <trigger
   group="script-count_reags"
   ignore_case="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(|\([ ]*(?P&lt;num&gt;[0-9]+)\))[ ]+(@!hematitereags)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>count_line("%&lt;num&gt;", "hematite")
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"
require "generic_miniwindow"


-----------
-- plugin
-----------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  init_tables()

  load_config()

  EnableTrigger("first_prompt", true)
  name = nil
end


function OnPluginConnect()
  EnableTrigger("first_prompt", true)
  name = nil
end


function plugin_not_initialized()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": plugin initialization unfinished --")
  Note("please wait 5 seconds and try again")
end


function OnPluginEnable()
  if (show_mini) then
    mini_show()
  end
end


function OnPluginClose()
  if (show_mini) then
    if GetPluginInfo(GetPluginID(), 17) then -- plugin is enabled
      mini_hide()
    end
  end
end


function OnPluginDisable()
  if (show_mini) then
    mini_hide()
  end
end


function OnPluginSaveState()
  if (show_mini) then
    SetVariable("enabled", tostring(GetPluginInfo(GetPluginID(), 17)))
    save_status()
  end
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/reagents_counter.xml",
  }
  return (table.concat(t, ";"))
end


function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/generic_miniwindow.lua,MUSH/lua",
  }
  return (table.concat(t, ";"))
end



------------
-- general
------------

function auto_cont()
  SendNoEcho("C")
end


function init_tables()
--  require "serialize"

  local aux
  for i = 1, #reag_types do
    aux = GetVariable(reag_types[i] .. "reags") or ""
    aux = string.gsub(aux, "%" .. string.char(92), "")
    aux = string.gsub(aux, "%(.+%)", "x")
    reag_tables[i] = utils.split(aux, "|")
--    Note(serialize.save_simple(reag_tables[i]))
  end
end



---------
-- name
---------

function on_first_prompt()
  wait.make(function()
    EnableTrigger("first_prompt", false)

    -- give the plugins time to initialize
    wait.time(3)

    do_get_name()
  end)
end


function OnPluginBroadcast(msg, id, pname, text)
  if (id =="97784abf5f30629a0d7e7307")
  and (pname == "global_vars") then -- global_vars
    if (msg == 1) and (text == "name") then
      -- name broadcasted
      do_get_name()
    end
  end
end


function do_get_name()
  name = get_global_var("name")

  if (name) then
    got_name()
  end
end


function get_global_var(name)
  local res, val

  res, val = CallPlugin("97784abf5f30629a0d7e7307", "get_global_var", name)

  if (res ~= 0) then
    val = nil
  end

  return val
end


function got_name()
  if (show_mini) then
    mini_start()
  end
end



----------
-- count
----------

reag_types = {"fire", "water", "air", "earth", "eth", "gem", "astral", "focusing", "largefocusing", "summoning", "hematite"}

reag_tables = {fire_reags, water_reags, air_reags, earth_reags, eth_reags, gem_reags, astral_reags, focusing_reags, largefocusing_reags, summoning_reags, hematite_reags}


function count_reags(used_reags, reags_list)
  local i, pos
  local num = 0
  for i = 1, #reags_list do
    pos = string.find(used_reags, reags_list[i], 0, true)
    while (pos ~= nil) do
      num = num + 1
      used_reags = string.gsub(used_reags, reags_list[i], "", 1)
      pos = string.find(used_reags, reags_list[i], 0, true)
    end
  end
  return num
end



----------
-- usage
----------

usage = {}

function get_usage()
  usage = {}

  for i = 1, #reag_types do
    usage[reag_types[i]] = tonumber(GetVariable(name .. "_" .. reag_types[i]) or 0)
  end
end


function set_usage()
  for i = 1, #reag_types do
    SetVariable(name .. "_" .. reag_types[i], usage[reag_types[i]])
  end

  local when = GetVariable(name .. "_when")
  if (when == nil) then
    SetVariable(name .. "_when", os.date())
  end

  SaveState()
end


function wipe_usage()
  for i = 1, #reag_types do
    DeleteVariable(name .. "_" .. reag_types[i])
  end

  DeleteVariable(name .. "_when")

  SaveState()

  Note("-- reagents_counter: reagents usage resetted -- ")
end


function update_usage(used_reags)
  if (name) then
    used_reags = string.lower(used_reags)
    used_reags = string.gsub(used_reags, "of (.+) encased", "of x encased")
    get_usage()
  --  show_usage()

    -- count used
    local used = {}

    for i = 1, #reag_types do
  --    Tell(reag_types[i] .. ": ")
      used[reag_types[i]] = count_reags(used_reags, reag_tables[i])
  --    Note(used[reag_types[i]])
    end

    -- update usage totals
    for i = 1, #reag_types do
  --    Tell(reag_types[i] .. ": ")
  --    Tell(usage[reag_types[i]] .. " -> ")
      usage[reag_types[i]] = usage[reag_types[i]] + used[reag_types[i]]
  --    Note(usage[reag_types[i]])
    end

    -- update counters
    for i = 1, #reag_types do
      if (counters[reag_types[i]] ~= nil) then
        counters[reag_types[i]] = counters[reag_types[i]] - used[reag_types[i]]
      end
    end

    if (show_mini) then
      update_mini()
    end

    set_usage()
  --  show_usage()
  end
end


function show_usage()
  get_usage()
  when = GetVariable(name .. "_when") or os.date()

  Note("-- reagents_counter: reagents used by " .. name .. " since " .. when .. " --")
  for i = 1, #reag_types do
    Note("- " .. reag_types[i] .. ": " .. usage[reag_types[i]])
  end
end



------------
-- counter
------------

counters = {}

function init_counters()
  counters = {}
  for i = 1, #reag_types do
    counters[reag_types[i]] = 0
  end
end


function count_line(num, type)
--  Note(num)
--  Note(type)
  if (num == "") then
    num = 1
  else
    num = tonumber(num)
  end

  if (counters[type] == 0) then
    counters[type] = num
  else
    counters[type] = counters[type] + num
  end
end


function show_results()
  Note("-- reagents_counter: total reagents count (in containers, etc.) --")
  for i = 1, #reag_types do
    Note("- " .. reag_types[i] .. ": " .. counters[reag_types[i]])
  end

  if (show_mini) then
    update_mini()
  end
end


function do_count()
  wait.make (function ()
    init_counters() -- initialize counters
    EnableTriggerGroup("script-count_reags", true)

    -- check inventory
    Send("inv")
    wait.regexp("^A total of (.+) item(|s) weighing (.+) stone(|s)\\, (.+) pebble(|s) (.+)$",-1,trigger_flag.KeepEvaluating)
    wait.time(.1)

    -- check containers
    stop_counting = false
    local i = 1
    repeat
      Send ("look in " .. i .. ".container")
      wait.regexp("(^(A total of (.+?) item(|s) weighing (.+?) st(|s)\\, (.+?) pb(|s) (.+?)|You do not see that here|You only see (.+) \'containers\' here|It is closed|[ ]+Nothing)\\.$|^$)",-1,trigger_flag.KeepEvaluating)
      wait.time(.1)
      i = i + 1
    until (stop_counting)

    EnableTriggerGroup("script-count_reags", false)
    show_results()
  end)
end


function retrieve_count()
-- returns a table with total reagents count (in containers, etc.),
-- to be used on scripts, like this:
-- res, t = CallPlugin("d2b442f2da9a95f34f5a199f", "retrieve_count")
-- t = utils.split(t, ";")
-- then...
--   tonumber(t[1]) will be the total of fire reags, or nil (if not initialized)
--   tonumber(t[2]) will be the total of water reags, or nil (if not initialized)
--   tonumber(t[3]) will be the total of air reags, or nil (if not initialized)
--   tonumber(t[4]) will be the total of earth reags, or nil (if not initialized)
--   tonumber(t[5]) will be the total of eth reags, or nil (if not initialized)
--   tonumber(t[6]) will be the total of gem reags, or nil (if not initialized)
--   tonumber(t[7]) will be the total of astral reags, or nil (if not initialized)
--   tonumber(t[8]) will be the total of focusing crystals, or nil (if not initialized)
--   tonumber(t[9]) will be the total of large focusing crystals, or nil (if not initialized)
--   tonumber(t[10]) will be the total of summoning stones, or nil (if not initialized)
--   tonumber(t[11]) will be the total of hematites, or nil (if not initialized)
  local aux = {}
  for i = 1, #reag_types do
    aux[i] = counters[reag_types[i]]
  end
  return table.concat(aux, ";")
end



---------------------
-- miniwindow stuff
---------------------

function mini_start()
  do_install_miniwindow("reagents", show_mini, false)
end


reag_types_show = {"fire", "water", "air", "earth", "ethereal", "gem", "astral", "focusing", "lrg_focus", "summoning", "hematite"}


function update_mini()
  clear_mini()

  local txt = ""

  for i = 1, #reag_types do
    txt = reag_types_show[i] .. ":" .. string.rep(" ", string.len("xxxxxxx: ") - string.len(reag_types_show[i])) .. string.format("%5s", (counters[reag_types[i]] or "?"))

    -- show text
    add_to_mini("silver", "black", txt)
    add_to_mini("silver", "black", "\r\n")
  end
end


function add_to_mini(fgcol, bgcol, txt)
  if (show_mini) then
    if (not styles) then
      styles = {}
    end

    if (txt == "\r\n") then
      log_to_mini("", "", "", styles)
      styles = {}

    else
      styles[#styles + 1] = {
        text = txt,
        textcolour = ColourNameToRGB(fgcol),
        backcolour = ColourNameToRGB(bgcol),
        length = string.len(txt),
        style = 0,
      }
    end
  end
end



------------
-- toggles
------------

function toggle_mini(state)
  if (state == "") then
    show_mini = not show_mini

  elseif (state == "on") then
    show_mini = true

  elseif (state == "off") then
    show_mini = false
  end

  save_config()

  if (show_mini) then
    mini_show()
  else
    mini_hide()
  end
end


function load_config()
  show_mini = ((GetVariable("show_mini") or "true") == "true")
end


function save_config()
  SetVariable("show_mini", tostring(show_mini))

  SaveState()
end


]]>

</script>

</muclient>


<!--

A book of erotic prose contains:
( 10) a page of erotic writing
<blank line>

-->
