<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, May 14, 2012, 3:09 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "vitals_bars_v2" generated by Plugin Wizard -->

<muclient>

<plugin
   name="vitals_bars_v2"
   author="Ruthgul"
   id="efe96b7604c453d0a92110e0"
   language="Lua"
   purpose="shows gauges for hp/sp/st, for you and others sharing them, in a miniwindow"
   save_state="y"
   date_written="2012-05-14 03:08:38"
   date_modified="2016-12-12 22:33:13"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.------------------.
 | vitals_bars_v2 |
`------------------'

Shows gauges for hp/sp/st in a miniwindow.
In multiplayer mode, it also shows vitals for people sharing them via comm_stuff or similar plugins.


** REQUIRES **
- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- MUSHclient must have write access to its folder.
- comm_stuff (plugin id="51a661f409c5d66601ff16e9") must be installed, enabled, and connected, to be able to share vitals.


Syntax:

* vitals [show|hide]  - shows/hides the vitals gauges miniwindow

* vitals resync maxes  - if your max vitals changed, this will recapture them

* vitals resync ap  - if you gained archon points, this will recapture them

* vitals mode [single|multi]  - toggles between single- and multi-player mode (multi by default)

* vitals edit allowed  - lets you edit the list of people whose vitals you want to see (if the list is empty, everyone is allowed)


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>

</triggers>



<!--  Aliases  -->

<aliases>

  <alias
   match="^vitals[ ]+(?P&lt;state&gt;hide|show)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_vitals("%&lt;state&gt;")
</send>
  </alias>

  <alias
   match="^vitals[ ]+mode[ ]+(?P&lt;mode&gt;single|multi)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_mode("%&lt;mode&gt;")
</send>
  </alias>

  <alias
   match="^vitals[ ]+resync[ ]+maxes$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>grab_maxes()
</send>
  </alias>

  <alias
   match="^vitals[ ]+resync[ ]+ap$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>grab_status()
</send>
  </alias>

  <alias
   match="^vitals[ ]+edit[ ]+allowed$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>edit_allowed()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   script="OnHelp"
   match="^vitals\_bars(|\_v2)(|( |\:)help)$"
   regexp="y"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

require "movewindow"
require "gauge"
require "gmcphelper"

debug = false


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  mode = GetVariable("mode") or "multi"
  allowed = Trim(GetVariable("allowed") or "")

  if (not debug) then
    tvitals = {}
    tnames = {}
  else
    tvitals = {
      ["Blowfish"] = { hp = 75, sp = 50, st = 25 },
      ["Pete"] = { hp = 25, sp = 50, st = 75 },
    }
    find_names()
  end

  EnableTrigger("first_prompt", true)
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function OnPluginClose()
  if (vitals_started) then
    movewindow.save_state(igauge)
    WindowShow(igauge, false)  -- hide window on removal
  end
end


function OnPluginConnect()
  EnableTrigger("first_prompt", true)
end


function OnPluginDisable()
  if (vitals_started) then
    WindowShow(igauge, false)  -- hide window on disable
  end
end


function OnPluginSaveState()
  if (vitals_started) then
    movewindow.save_state(igauge)
  end
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/vitals_bars_v2.xml",
  }
  return (table.concat(t, ";"))
end



---------------
-- init stuff
---------------

function on_first_prompt()
  EnableTrigger("first_prompt", false)

  grab_maxes()
  grab_status()
end



------------
-- toggles
------------

function toggle_vitals(state)
  if (vitals_started) then
    if (state == "show") then
      WindowShow(igauge, true)
    else
      WindowShow(igauge, false)
    end
  end
end


function set_mode(new_mode)
  mode = new_mode
  SetVariable("mode", mode)
  SaveState()

  Note("-- vitals_bars_v2: mode changed to " .. mode .. " --")

  if (vitals_started) then
    vitals_start()
  end
end



-----------------
-- allowed list
-----------------

function edit_allowed()
  local oldlist = Trim(GetVariable("allowed") or "")

  local list = utils.editbox("Type a list of names, separated with spaces.\r\n(eg: Blanketface Doqholliday Kingscar).\r\nEmpty the list to allow everyone.\r\nPress OK when you're done.", "Allowed", oldlist, "Lucida Console", 9)

  if (list) then
    while(string.find(list, "  ")) do
      list = string.gsub(list, "  ", " ")
    end

    if (debug) then
      Note("list: " .. (list or "nil"))
    end

    SetVariable("allowed", list)
    SaveState()
  end
end


function is_allowed(user)
  local res = false

  if (not allowed) or (allowed == "") then
    -- empty allowed list => we allow everyone
    allowed = true

  else
    for name in string.gmatch(allowed, "%a+") do
      if (string.lower(name) == user) then
        allowed = true
        break
      end
    end
  end

  return res
end



----------------------
-- handle broadcasts
----------------------

function OnPluginBroadcast(msg, id, pname, text)
  if (id == "f67c4339ed0591a5b010d05b") -- GMCP handler
  and (pname == "MM_GMCP_handler") then
    if (text == "char.vitals") then
      get_gmcp_char()
      handle_my_vitals()
    elseif (text == "char.maxstats") then
      get_gmcp_char()
      handle_my_max_vitals()
    elseif (text == "char.status") then
      get_gmcp_char()
      handle_my_status()
    end

  elseif (id == "51a661f409c5d66601ff16e9") -- comm_stuff
  and (pname == "comm_stuff") then
    if (msg == 1) then
      handle_irc_msg(text)
    end
  end
end


function find_names()
  tnames = {}

  for name, _ in pairs(tvitals) do
    tnames[#tnames + 1] = name
  end

  table.sort(tnames)
end



----------------
-- GMCP stuff
----------------

function get_gmcp_char()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char")
  luastmt = "gmcpdata = " .. gmcparg

  assert(loadstring(luastmt or ""))()
end



--------------
-- IRC stuff
--------------

function handle_irc_msg(text)
  local user, extuser, param = string.match(text, "(.+);(.+);(.+)")

--  Note(user)
--  Note(extuser)
--  Note(param)

  local hp, sp, st

  if (string.match(param, "^§vit§ %d+,%d+,%d+")) then
    handle_other_vitals(user, param)

  elseif (string.match(param, "^§quit§")) then
    handle_quit(user)
  end
end


function handle_quit(user)
  tvitals[user] = nil

  find_names()

  if (mode == "multi") then
    vitals_redraw()
  end
end



---------------
-- max vitals
---------------

function grab_maxes()
  -- only requesting maxes once per minute, top
  local frequency = 60

  if (not latest_maxes) or ((os.time() - latest_maxes) > frequency) then
--    Note("-- vitals_bars_v2: sendgmcp char.maxstats --")
    Execute("sendgmcp char.maxstats") -- request max stats
    latest_maxes = os.time()
  end
end


function handle_my_max_vitals()
  latest_maxes = os.time()

  max_hp = tonumber(gmcpval("maxstats.maxhp") or 0)
  max_sp = tonumber(gmcpval("maxstats.maxsp") or 0)
  max_st = tonumber(gmcpval("maxstats.maxst") or 0)

  vitals_start()
end



-------------------
-- current vitals
-------------------

function handle_my_vitals()
  if (max_hp) and (max_sp) and (max_st) then
    hp = math.floor(tonumber(gmcpval("vitals.hp") or 0) * 100 / max_hp)
    sp = math.floor(tonumber(gmcpval("vitals.sp") or 0) * 100 / max_sp)
    st = math.floor(tonumber(gmcpval("vitals.st") or 0) * 100 / max_st)

    if (hp > 100) or (sp > 100) or (st > 100) then
      grab_maxes()

    else
      if (not prev_hp)
      or (prev_hp ~= hp)
      or (prev_sp ~= sp)
      or (prev_st ~= st) then
        set_vitals("(me)", hp, sp, st)

        vitals_redraw()

        prev_hp = hp
        prev_sp = sp
        prev_st = st
      end
    end
  end
end


function handle_other_vitals(user, param)
  if (mode == "multi") and (user ~= "me") then
    hp, sp, st = string.match(param, "^§vit§ (%d+),(%d+),(%d+)")

    if (hp) and (sp) and (st) then
      set_vitals(user, tonumber(hp), tonumber(sp), tonumber(st))

      vitals_redraw()
    end
  end
end


function set_vitals(name, hp, sp, st)
  if (not tvitals[name]) then
    tvitals[name] = { }

    find_names()
  end

  tvitals[name].hp = hp
  tvitals[name].sp = sp
  tvitals[name].st = st
end



--------
-- tnl
--------

function grab_status()
  -- only requesting status once every 15 sec, max
  local frequency = 15

  if (not latest_status) or ((os.time() - latest_status) > frequency) then
--    Note("-- vitals_bars_v2: sendgmcp char.status --")
    Execute("sendgmcp char.status") -- request status
    latest_status = os.time()
  end
end


function handle_my_status()
  latest_status = os.time()

  tnl = tonumber(gmcpval("status.tnlpct") or 0)
  if (tnl < 0) then
    tnl = 0
  end


  if (not prev_tnl)
  or (prev_tnl ~= tnl) then
    set_status("(me)", tnl)

    vitals_redraw()

    prev_tnl = tnl
  end
end


function set_status(name, tnl)
  if (not tvitals[name]) then
    tvitals[name] = { }

    find_names()
  end

  tvitals[name].tnl = tnl
end



-----------------
-- window stuff
-----------------

width = 500
bgcol = ColourNameToRGB("black")
bordercol = "2434341"
shadowcol = ColourNameToRGB("black")

font = "Trebuchet MS"
fontsize = 9
fontcol = ColourNameToRGB("silver")

gauges_width = 96
gauges_height = 16
gauges_spacing = 2


function vitals_start()
  igauge = "igauge_" .. GetPluginID()

  WindowCreate (igauge, 0, 0, 0, 0, 0, 0, 0)
  WindowFont(igauge, "fgauge", font, fontsize, false, false, false, false)
  font_height = WindowFontInfo(igauge, "fgauge", 1)

  windowinfo = movewindow.install(igauge, miniwin.pos_top_center)

  vitals_redraw()

  vitals_started = true
end


function vitals_redraw()
  if (vitals_started) then
    WindowShow(igauge, false)

    local total = 1
    if (mode == "multi") then
      total = #tnames
    end
    if (total == 0) then
      total = 1
    end

    height = ((total + 1) * gauges_height) + ((total + 4) * gauges_spacing)

    WindowCreate(igauge, windowinfo.window_left, windowinfo.window_top, width, height, windowinfo.window_mode, windowinfo.window_flags, bgcol)

    show_header()

    -- draw the 3D box that will contain all gauges
    draw_3d_box(igauge, 2, 2, width - 3, height - 3)

    for i = 1, #tnames do
      show_name(i)
      show_gauges(i)
    end

    WindowShow(igauge, true)
  end
end


function vitals_show()
  if (vitals_started) then
    WindowShow(igauge, true)
  end
end


function vitals_hide()
  if (vitals_started) then
    WindowShow(igauge, false)
  end
end


-----------------
-- gauges stuff
-----------------

function show_header()
  local vnames = { "hp", "sp", "st", "tnl" }

  local txtwidth, wherex

  for i = 1, #vnames do
    txtwidth = WindowTextWidth(igauge, "fgauge", vnames[i], true)
    wherex = (gauges_width * i) + (gauges_spacing * (i + 1))
    wherex = wherex + ((gauges_width - txtwidth) / 2)
    draw_text_box(igauge, "fgauge", wherex, 2, vnames[i], false, fontcol, bgcol, bgcol)
  end

  -- let them move it around
  movewindow.add_drag_handler(igauge, 0, 0, width, 20, 10)
end


function show_name(num)
  local wherey = (gauges_height * num) + (gauges_spacing * num) - 4
  draw_text_box(igauge, "fgauge", 10, wherey, tnames[num], false, fontcol, bgcol, bgcol)
end


function show_gauges(num)
  local wherey = (gauges_height * num) + (gauges_spacing * num)
  local wherex

  -- hp gauge
  wherex = gauges_width + (gauges_spacing * 2)
  show_a_gauge("hp", 100, tvitals[tnames[num]].hp, wherex, wherey, "gold")

  -- sp gauge
  wherex = (gauges_width * 2) + (gauges_spacing * 3)
  show_a_gauge("sp", 100, tvitals[tnames[num]].sp, wherex, wherey, "dodgerblue")

  -- st gauge
  wherex = (gauges_width * 3) + (gauges_spacing * 4)
  show_a_gauge("st", 100, tvitals[tnames[num]].st, wherex, wherey, "mediumvioletred")

  -- tnl gauge
  wherex = (gauges_width * 4) + (gauges_spacing * 5)
  show_a_gauge("tnl", 100, tvitals[tnames[num]].tnl, wherex, wherey, "silver")
end


function show_a_gauge(title, max, current, wherex, wherey, color)
  if (max) and (current) then
    -- fix for temporary +max-hp buffs like magnetic influence
    if (current > max) then
      max = current
    end

    gauge(igauge, title, current, max, wherex, wherey, gauges_width, gauges_height, ColourNameToRGB(color), bgcol, 3, bgcol, bordercol, shadowcol)

  else
    gauge(igauge, title, 100, 100, wherex, wherey, gauges_width, gauges_height, bgcol, bgcol, 3, bgcol, bordercol, nil)
  end
end


]]>

</script>

</muclient>
