<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, April 27, 2012, 6:47 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "sbrief" generated by Plugin Wizard -->

<muclient>

<plugin
   name="sbrief"
   author="Ruthgul"
   id="4e2bf9f75646bf678cf620dd"
   language="Lua"
   purpose="lessens combat spam"
   save_state="y"
   date_written="2012-04-27 18:46:16"
   date_modified="2021-02-01 13:53:40"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.----------.
 | sbrief |
`----------'

Gags most melee attacks and defenses, and shows totals for each kind instead.

If MushReader is detected (and play_sounds is present), it will also play a short sound when it detects the end of a combat round.


Syntax:

* sbrief [on|off]  - toggles sbrief scripts on/off (on by default)

> Toggles:

* sbrief short_names [on|off]  - toggles short_names on/off (ON by default)
  (when 'on', your dmg/def will be marked as 'me >', and your oppoent's 'they >';
   when 'off', your dmg/def will be marked as 'me vs <oppoennt's_name>', and vice versa)

* sbrief show_bparts [on|off]  - toggles show_bparts on/off (OFF by default)
  (when 'on', it will show totals for body parts hit during every round)

* sbrief show_dmg_prcnt [on|off]  - toggles show_dmg_prcnt on/off (OFF by default)
  (when 'on', you'll see the max damage dealt, as a % of the target's remaining hp)


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

  <variable name="ordinal">(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth)</variable>

</variables>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^sbrief(|[ ]+(?P&lt;state&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_sbrief("%&lt;state&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^sbrief[ ]+short\_names(|[ ]+(?P&lt;state&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_short_names("%&lt;state&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^sbrief[ ]+show\_bparts(|[ ]+(?P&lt;state&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_show_bparts("%&lt;state&gt;")
</send>
  </alias>

  <alias
   enabled="y"
   match="^sbrief[ ]+show\_dmg\_prcnt(|[ ]+(?P&lt;state&gt;(on|off)))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_show_dmg_prcnt("%&lt;state&gt;")
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^sbrief( |\:)help$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- other's damage -->

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;who&gt;(@!char_name)) fails to hit (?P&lt;tgt&gt;.+) with (.+) attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>check_other_dmg("%&lt;who&gt;", "%&lt;tgt&gt;", "fail", "", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;who&gt;(@!char_name))\'s fireshield erupts at your strike\! You are burned on the (?P&lt;bpart&gt;.+) by (.+)\'s flames causing (?P&lt;how_much&gt;.+) damage\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_dmg("%&lt;who&gt;", "fireshield", "%&lt;bpart&gt;", "%&lt;how_much&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;who&gt;(@!char_name))\'s fireshield erupts at (?P&lt;tgt&gt;.+)\'s strike\! (.+) (is|are) burned on the (?P&lt;bpart&gt;.+) by (.+)\'s flames causing (?P&lt;how_much&gt;.+) damage\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_dmg("%&lt;who&gt;", "%&lt;tgt&gt;", "fireshield", "%&lt;bpart&gt;", "%&lt;how_much&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="(?P&lt;who&gt;(@!char_name))\'s (|(@!ordinal) )attack didn\'t seem to have any effect on (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>check_other_dmg("%&lt;who&gt;", "%&lt;tgt&gt;", "unaffected", "", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) (is|are) (.+) on the (?P&lt;bpart&gt;.+) (by|with) (?P&lt;who&gt;.+)\'s (?P&lt;type&gt;.+) causing (?P&lt;how_much&gt;.+) damage\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>check_other_dmg("%&lt;who&gt;", "%&lt;tgt&gt;", "%&lt;type&gt;", "%&lt;bpart&gt;", "%&lt;how_much&gt;")
</send>
  </trigger>


<!-- other's defenses -->

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) (.+) (backflips|leaps|sidesteps|tumbles) out of the way of your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_def("%&lt;tgt&gt;", "acrobatics")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) (.+) (backflips|leaps|sidesteps|tumbles) out of the way of (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "%&lt;who&gt;", "acrobatics")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) disappears with a BANG and reappears a few feet away\, out of the range of your (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_def("%&lt;tgt&gt;", "combat_blink")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) disappears with a BANG and reappears a few feet away\, out of the range of (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "%&lt;who&gt;", "combat_blink")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) dodges out of the way of your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_def("%&lt;tgt&gt;", "dodge")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) dodges out of the way of (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "%&lt;who&gt;", "dodge")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is obscured by a swirling cloud of dust\, causing you to miss your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_def("%&lt;tgt&gt;", "dust_invo")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is obscured by a swirling cloud of dust\, causing (?P&lt;who&gt;.+) to miss (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "%&lt;who&gt;", "dust_invo")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) phases out of existence\, evading your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_def("%&lt;tgt&gt;", "magical_fade")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) phases out of existence\, evading (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "%&lt;who&gt;", "magical_fade")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) parries your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_def("%&lt;tgt&gt;", "parry")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) parries (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "%&lt;who&gt;", "parry")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) catches (.+) on (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "?", "shield_block")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^A disc of solidifed air in front of (?P&lt;tgt&gt;.+) moves quickly\, intercepting your (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_vs_me_def("%&lt;tgt&gt;", "tk_shield")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^A disc of solidifed air in front of (?P&lt;tgt&gt;.+) moves quickly\, intercepting (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_other_def("%&lt;tgt&gt;", "%&lt;who&gt;", "tk_shield")
</send>
  </trigger>


<!-- my damage -->

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You fail to hit (?P&lt;tgt&gt;.+) with your (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_dmg("%&lt;tgt&gt;", "fail", "", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^Your fireshield erupts as (?P&lt;tgt&gt;.+) strikes you\! (.+) is burned on the (?P&lt;bpart&gt;.+) with your flames causing (?P&lt;how_much&gt;.+) damage\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_dmg("%&lt;tgt&gt;", "fireshield", "%&lt;bpart&gt;", "%&lt;how_much&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is unaffected by your (.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_dmg("%&lt;tgt&gt;", "unaffected", "", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^Your (|(@!ordinal) )attack didn\'t seem to have any effect on (?P&lt;tgt&gt;.+)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_dmg("%&lt;tgt&gt;", "unaffected", "", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^[a-zA-Z \-\,\' ]+ is not usable (at|from) your current formation position\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_dmg("?", "unaffected", "", "no")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;tgt&gt;(@!char_name)) is (.+) on the (?P&lt;bpart&gt;.+) with your (?P&lt;type&gt;.+) causing (?P&lt;how_much&gt;.+) damage\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>check_my_dmg("%&lt;tgt&gt;", "%&lt;type&gt;", "%&lt;bpart&gt;", "%&lt;how_much&gt;", "%0")
</send>
  </trigger>


 <!-- my defenses -->

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You (.+) (backflip|leap|sidestep|tumble) out of the way of (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("%&lt;who&gt;", "acrobatics")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^The world goes black for a moment as you teleport a few feet away\, missing (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("%&lt;who&gt;", "combat_blink")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You dodge out of the way of (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("%&lt;who&gt;", "dodge")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^You are obscured by a swirling cloud of dust\, causing (?P&lt;who&gt;.+) to miss (.+) attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("%&lt;who&gt;", "dust_invo")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You slip between planes for a moment\, evading (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("%&lt;who&gt;", "magical_fade")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   expand_variables="y"
   match="^You skillfully parry (?P&lt;who&gt;.+)\'s (|(@!ordinal) )attack\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("%&lt;who&gt;", "parry")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^You catch (.+) on (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("?", "shield_block")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^The telekinetic shield protecting you moves quickly\, intercepting (?P&lt;who&gt;.+)\'s (.+)\.$"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>inc_my_def("%&lt;who&gt;", "tk_shield")
</send>
  </trigger>


<!-- show results -->

  <trigger
   enabled="y"
   group="script-sbrief"
   keep_evaluating="y"
   match="^$"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>show_round_totals()
</send>
  </trigger>
</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"


-----------
-- plugin
-----------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    init_stuff()
    load_config()

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  use_events_mini = events_mini_installed()
  reader_present = reader_plugin_present()
  play_sounds_present = play_sounds_plugin_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/sbrief.xml",
  }
  return (table.concat(t, ";"))
end


function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/res/ping.mp3,MUSH/sounds",
  }
  return (table.concat(t, ";"))
end



------------
-- general
------------

-- percentages are from help combat adjectives
damage_dealt = {
  ["no"] = 0,             -- this never happens - I use it for invuln
  ["undetectable"] = .001,
  ["ephemeral"] = .002,
  ["intangible"] = .005,
  ["imperceptible"] = .010,
  ["no observable"] = .015,
  ["no apparent"] = .020,
  ["no evident"] = .033,
  ["no obvious"] = .05,
  ["unnoticeable"] = .10,
  ["infinitesimal"] = .15,
  ["insignificant"] = .25,
  ["superficial"] = .35,
  ["trivial"] = .50,
  ["trifling"] = .65,
  ["slight"] = .80,
  ["paltry"] = 1,
  ["minimal"] = 2,
  ["mild"] = 3,
  ["modest"] = 5,
  ["middling"] = 6,      -- guess (not listed in help 2394)
  ["moderate"] = 7,      -- guess (not listed in help 2394)
  ["heavy"] = 8,
  ["great"] = 12,
  ["enormous"] = 15,
  ["giant"] = 20,
  ["huge"] = 25,
  ["extensive"] = 35,
  ["tremendous"] = 45,
  ["massive"] = 55,
  ["incredible"] = 65,
  ["shocking"] = 75,
  ["unbelievable"] = 86,
  ["unbearable"] = 97,
  ["intolerable"] = 98,
  ["lethal"] = 99,
}


function toggle_sbrief(state)
  sbrief_on = toggle_state(sbrief_on, state)

  if (sbrief_on) then
    EnableTriggerGroup("script-sbrief", true)
    Note("-- sbrief: scripts ON --")
    Tell("(remember to set ")
    ColourTell("silver", "black", "combat mode brief")
    Note(" to lessen combat spam to a minimum)")

  else
    EnableTriggerGroup("script-sbrief", false)
    Note("-- sbrief: scripts OFF --")
  end
end


function toggle_short_names(state)
  config.short_names = toggle_state(config.short_names, state)

  save_config()

  if (config.short_names) then
    Note("-- sbrief: short_names ON --")
    Tell("(remember to set ")
    ColourTell("silver", "black", "combat mode brief")
    Note(")")

  else
    Note("-- sbrief: short_names OFF --")
  end
end


function toggle_show_bparts(state)
  config.show_bparts = toggle_state(config.show_bparts, state)

  save_config()

  if (config.show_bparts) then
    Note("-- sbrief: show_bparts ON --")

  else
    Note("-- sbrief: show_bparts OFF --")
  end
end


function toggle_show_dmg_prcnt(state)
  config.show_dmg_prcnt = toggle_state(config.show_dmg_prcnt, state)

  save_config()

  if (config.show_dmg_prcnt) then
    Note("-- sbrief: show_dmg_prcnt ON --")

  else
    Note("-- sbrief: show_dmg_prcnt OFF --")
  end
end


function toggle_state(oldstate, newstate)
  local res

  if (newstate == "") then
    res = not oldstate

  elseif (newstate == "on") then
    res = true

  elseif (newstate == "off") then
    res = false
  end

  return res
end


function load_config()
  config = {
    short_names = ((GetVariable("short_names") or "true") == "true"),

    show_bparts = ((GetVariable("show_bparts") or "false") == "true"),
    show_dmg_prcnt = ((GetVariable("show_dmg_prcnt") or "false") == "true"),
  }
end


function save_config()
  SetVariable("short_names", tostring(config.short_names))

  SetVariable("show_bparts", tostring(config.show_bparts))
  SetVariable("show_dmg_prcnt", tostring(config.show_dmg_prcnt))

  SaveState()
end


function init_stuff()
  my_def = {}
  vs_me_def = {}
  other_def = {}

  my_dmg = {}
  vs_me_dmg = {}
  other_dmg = {}

  my_bpart = {}
  vs_me_bpart = {}
  other_bpart = {}

  my_dmg_prcnt = {}
  vs_me_dmg_prcnt = {}
  other_dmg_prcnt = {}

  total_count = 0

  sbrief_on = true
  EnableTriggerGroup("script-sbrief", true)
end


function count_items(t)
  local res = 0
  for key, val in pairs(t) do
    res = res + 1
  end
  return res
end


function inc(num)
  local res = (num or 0) + 1

  return res
end



-----------
-- events
-----------

function add_to_events(fgcol, txt)
  add_to_events_world(fgcol, txt)
  add_to_events_mini(fgcol, txt)
end


function add_to_events_world(fgcol, txt)
  local events = GetWorld("events")

  if (events) then
    events:Note("")
    events:ColourTell("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    events:ColourNote(fgcol, "black", txt)
    events:Note("")
  end
end


function add_to_events_mini(fgcol, txt)
  function add_style_to_events_mini(fgcol, bgcol, txt)
    CallPlugin("9ced43d0a7b4a60116794096", "add_to_mini", fgcol, bgcol, txt)
  end

  -- OnPluginListChanged() should keep 'use_events_mini' updated

  if (events_mini) then
    add_style_to_events_mini("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    add_style_to_events_mini(fgcol, "black", txt)
    add_style_to_events_mini("silver", "black", "\r\n")
  end
end


function events_mini_installed()
  return is_plugin_present("events_mini", "9ced43d0a7b4a60116794096")
end



---------------------
-- combat detection
---------------------

function set_combat(status, target)
  combat = status

  if (target) then
    opponent = string.lower(target)
  else
    opponent = nil
  end
end


function check_combat_end(target)
  target = string.lower(target)
  if (target == opponent) then
    set_combat(false)
  end
end



-----------------------
-- attacks & defenses
-----------------------

function check_other_dmg(who, tgt, type, bpart, dmg)
  if (tgt == "You") then
    tgt = "you"
  end

  if (type == "attack") then
    type = "other"
--  else
--    type = string.gsub(type, " ", "_")
  end

  if (tgt ~= "you") then
    inc_other_dmg(who, tgt, type, bpart, dmg)
  else
    inc_vs_me_dmg(who, type, bpart, dmg)
  end
end


function inc_other_dmg(who, tgt, type, bpart, dmg)
  who = string.lower(Trim(who))
  tgt = string.lower(Trim(tgt))

  if (not other_dmg[who .. " vs " .. tgt]) then
    other_dmg[who .. " vs " .. tgt] = {}
    other_dmg_prcnt[who .. " vs " .. tgt] = {}
    other_bpart[who .. " vs " .. tgt] = {}
  end

  other_dmg[who .. " vs " .. tgt][type] = inc(other_dmg[who .. " vs " .. tgt][type])

  if (bpart ~= "") then
    other_bpart[who .. " vs " .. tgt][bpart] = inc(other_bpart[who .. " vs " .. tgt][bpart])
  end

  if (damage_dealt[dmg]) then
    table.insert(other_dmg_prcnt[who .. " vs " .. tgt], damage_dealt[dmg])
  else
    Note("-- sbrief - unknown damage value: " .. dmg .. " --")
    add_to_events("silver", "unknown dmg value: " .. dmg)
  end
end


function inc_vs_me_dmg(who, type, bpart, dmg)
  who = string.lower(Trim(who))

  if (not vs_me_dmg[who .. " vs me"]) then
    vs_me_dmg[who .. " vs me"] = {}
    vs_me_dmg_prcnt[who .. " vs me"] = {}
    vs_me_bpart[who .. " vs me"] = {}
  end

  vs_me_dmg[who .. " vs me"][type] = inc(vs_me_dmg[who .. " vs me"][type])

  if (bpart ~= "") then
    vs_me_bpart[who .. " vs me"][bpart] = inc(vs_me_bpart[who .. " vs me"][bpart])
  end

  if (damage_dealt[dmg]) then
    table.insert(vs_me_dmg_prcnt[who .. " vs me"], damage_dealt[dmg])
  else
    Note("-- sbrief - unknown damage value: " .. dmg .. " --")
  end
end


function inc_other_def(tgt, who, type)
  who = string.lower(Trim(who))
  tgt = string.lower(Trim(tgt))

  if (not other_def[tgt .. " vs " .. who]) then
    other_def[tgt .. " vs " .. who] = {}
  end

  if (not other_def[tgt .. " vs " .. who][type]) then
    other_def[tgt .. " vs " .. who][type] = 1
  else
    other_def[tgt .. " vs " .. who][type] = other_def[tgt .. " vs " .. who][type] + 1
  end
end


function inc_vs_me_def(tgt, type)
  tgt = string.lower(Trim(tgt))

  if (not vs_me_def[tgt .. " vs me"]) then
    vs_me_def[tgt .. " vs me"] = {}
  end

  if (not vs_me_def[tgt .. " vs me"][type]) then
    vs_me_def[tgt .. " vs me"][type] = 1
  else
    vs_me_def[tgt .. " vs me"][type] = vs_me_def[tgt .. " vs me"][type] + 1
  end
end


function check_my_dmg(tgt, type, bpart, dmg, line)
  if (tgt == "You") then
    tgt = "you"
  end

  if (type == "attack") then
    type = "other"
--  else
--    type = string.gsub(type, " ", "_")
  end

  if (not string.find(line, "Your fireshield erupts")) then
    inc_my_dmg(tgt, type, bpart, dmg)
  end
end


function inc_my_dmg(tgt, type, bpart, dmg)
  tgt = string.lower(Trim(tgt))

  if (not my_dmg["me vs " .. tgt]) then
    my_dmg["me vs " .. tgt] = {}
    my_dmg_prcnt["me vs " .. tgt] = {}
    my_bpart["me vs " .. tgt] = {}
  end

  my_dmg["me vs " .. tgt][type] = inc(my_dmg["me vs " .. tgt][type])

  if (bpart ~= "") then
    my_bpart["me vs " .. tgt][bpart] = inc(my_bpart["me vs " .. tgt][bpart])
  end

  if (damage_dealt[dmg]) then
    table.insert(my_dmg_prcnt["me vs " .. tgt], damage_dealt[dmg])
  else
    Note("-- sbrief - unknown damage value: " .. dmg .. " --")
  end
end


function inc_my_def(who, type)
  who = string.lower(Trim(who))

  if (not my_def["me vs " .. who]) then
    my_def["me vs " .. who] = {}
  end

  if (not my_def["me vs " .. who][type]) then
    my_def["me vs " .. who][type] = 1
  else
    my_def["me vs " .. who][type] = my_def["me vs " .. who][type] + 1
  end
end



------------
-- results
------------

bgcol = "black"


function calc_dmg_prcnt(t)
  -- find the max damage %
  local max = 0
  for i = 1, #t do
    if (t[i] > max) then
      max = t[i]
    end
  end

  return max
end


function show_table(tdd, who, shortened, tbpts, prcnt, hicol, dimcol)
  if (count_items(tdd) > 0) then
    local what = ""
    for dtype, num in pairs(tdd) do
      if (what == "") then
        what = dtype .. ": " .. num
      else
        what = what .. " - " .. dtype .. ": " .. num
      end

      total_count = total_count + num
    end

    if (config.short_names) and (shortened ~= "") then
      ColourTell(dimcol, bgcol, shortened)
    else
      ColourTell(dimcol, bgcol, who)
    end

    ColourTell(dimcol, bgcol, " > ")
    ColourTell(hicol, bgcol, what)

    if (config.show_bparts) and (count_items(tbpts) > 0) then
      ColourTell(dimcol, bgcol, " {")

      local what = ""
      for bpart, num in pairs(tbpts) do
        if (what == "") then
          what = bpart .. ": " .. num
        else
          what = what .. " - " .. bpart .. ": " .. num
        end
      end

      ColourTell(dimcol, bgcol, what .. "}")
    end

    if (config.show_dmg_prcnt) and (prcnt ~= "") then
      ColourTell(dimcol, bgcol, " [dmg: ")
      ColourTell(dimcol, bgcol, prcnt)
      ColourTell(dimcol, bgcol, "%]")
    end

    Note("") -- line break
  end
end


function show_round_totals()
  for vs, def in pairs(other_def) do
    show_table(def, vs, "", {}, "", "cyan", "teal")
  end

  for vs, dmg in pairs(other_dmg) do
    show_table(dmg, vs, "", other_bpart[vs], calc_dmg_prcnt(other_dmg_prcnt[vs]), "silver", "gray")
  end

  for vs, def in pairs(vs_me_def) do
    show_table(def, vs, "they", {}, "", "yellow", "olive")
  end

  for vs, dmg in pairs(vs_me_dmg) do
    show_table(dmg, vs, "they", vs_me_bpart[vs], calc_dmg_prcnt(vs_me_dmg_prcnt[vs]), "yellow", "olive")
  end

  for vs, def in pairs(my_def) do
    show_table(def, vs, "me", {}, "", "lime", "green")
  end

  for vs, dmg in pairs(my_dmg) do
    show_table(dmg, vs, "me", my_bpart[vs], calc_dmg_prcnt(my_dmg_prcnt[vs]), "lime", "green")
  end

  if (total_count > 2) then
    make_noise()
  end

  Note("")
  init_stuff()
end



----------
-- sound
----------

function make_noise()
  -- if MushReader detected, + if play_sounds is installed + 'ping.mp3' file exists, play it

  if (reader_present) and (play_sounds_present) then
    Execute("play a sound ping.mp3")
  end
end


function play_sounds_plugin_present()
  return is_plugin_present("play_sounds", "4327c10cd9ae383bef04a7fc")
end


function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end


]]>

</script>

</muclient>
