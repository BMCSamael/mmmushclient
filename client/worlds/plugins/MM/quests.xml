<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, April 11, 2012, 6:40 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "quests" generated by Plugin Wizard -->

<muclient>

<plugin
   name="quests"
   author="Ruthgul"
   id="ad02c292bb640b7aee9e4df0"
   language="Lua"
   purpose="Scripts related to Orc Pursuer or Crystal quests"
   save_state="y"
   date_written="2012-04-11 18:38:09"
   date_modified="2020-09-28 09:11:07"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.----------.
 | quests |
`----------'

- Shows a notification when a quest (including regular/crystal/Orc Pursuer), is available.

- Captures your quest details to a notepad.

- Lets you check when you requested your latest crystal quest, and your latest orc pursuer assignment.


Syntax:

* crystal  - shows when you requested your latest crystal map

* pursuer  - shows your latest Orc Pursuer target.

* quests timers  - shows remaining time to next quests


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

  <variable name="buttons">salmon</variable>

</variables>



<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   match="^quests timers$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_quests_timers()
</send>
  </alias>

  <alias
   enabled="y"
   match="^crystal$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_latest_crystal()
</send>
  </alias>

  <alias
   enabled="y"
   match="^pursuer$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_pursuer_target()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   script="OnHelp"
   match="^quests(|(\:| )help)$"
   enabled="y"
   regexp="y"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- regular quests -->

  <!-- capture -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You ask (.+) for a quest\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>start_quest_capture()
</send>
  </trigger>

  <trigger
   match="*"
   keep_evaluating="y"
   name="capture_line"
   send_to="12"
   sequence="100"
  >
  <send>capture_quest_line("%0")
</send>
  </trigger>

  <trigger
   match="^$"
   keep_evaluating="y"
   name="capture_end"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>end_quest_capture()
</send>
  </trigger>


  <!-- timers -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name) tells you\, \'(You didn\'t complete any parts of your quest\, I\'m sorry|Not all of your quest was completed\, but I will give you a partial reward for your efforts)\.\'$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>next_quest_in(300)
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name) tells you\, \'Congratulations on the completion of thy quest\, (.+)\!\'$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>next_quest_in(300)
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(@!char_name) tells you\, \'I am sorry\, but I don\'t have any quests for thee right now\. Try again later\, or try another quest master\.\'$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>next_quest_in(300)
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You have run out of time for your quest\, \'(.+)\'\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>next_quest_in(1)
</send>
  </trigger>

  <trigger
   enabled="y"
   group="script-quest"
   keep_evaluating="y"
   match="^You have (?P&lt;min&gt;[0-9]+) Alyrian minute(|s) remaining until you can request (a new|another) quest\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local min = tonumber("%&lt;min&gt;") / 4
next_quest_in(min * 60)
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^[ ]+Time Remaining\: (?P&lt;min&gt;.+) Alyrian minutes\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_rl_time_remaining("%&lt;min&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^This quest \[(.+)\] is called \'(?P&lt;name&gt;.+)\'\,$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>quest_requested("%&lt;name&gt;")
</send>
  </trigger>

  <trigger
   match="^$"
   keep_evaluating="y"
   name="quest_end"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_annwn_link()
</send>
  </trigger>


<!-- crystal quests -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Tadamir the guildsman gives you a tightly\-rolled scroll\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>crystal_started()
</send>
  </trigger>

  <trigger
   enabled="y"
   group="crystal"
   keep_evaluating="y"
   match="^[ ]+A (small|massive)(| pinkish) crystal has been (carelessly |)(left|dropped) here( carelessly|)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>found_crystal()
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You take a (small|(massive |)blood) crystal\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>crystal_taken()
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^\'Thank you\, (.+)\!\' Tadamir the guildsman exclaims to you\. \'Here is your reward\, as promised\.\'$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>crystal_done()
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^The head of the Crystal Guild stands behind the counter\, carefully studying his newest treasure\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>EnableTrigger("crystal_blank", true)
</send>
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^$"
   name="crystal_blank"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>at_tadamirs()
</send>
  </trigger>


<!-- Orc Pursuer quests -->

  <trigger
   enabled="y"
   match="^\'Ekai Nosrat Sulla Garha \&quot;(?P&lt;what&gt;.+)\&quot;\, Setama Sulla \&quot;(?P&lt;where&gt;.+)\&quot;\, Ekass Armas Thran Bel Dinas\.\' the orc pursuer says(| to you)\. \'Nohsa Sulla Amata\.\'$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>pursuer_started("%&lt;what&gt;", "%&lt;where&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^The orc pursuer gives you (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>pursuer_completed()
</send>
  </trigger>


<!-- personal logs -->

  <trigger
   group="script-log"
   keep_evaluating="y"
   match="^Key\: Killed \| Available$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>log_available_in()
</send>
  </trigger>

</triggers>



<!--  Timers  -->

<timers>

  <timer
   name="countdown"
   second="1.00"
   offset_second="0.00"
   active_closed="y"
   send_to="12"
  >
  <send>check_timers()
</send>
  </timer>

</timers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"

buttoncol = GetVariable("buttons")


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    pursuer_done = false
    nagged = nil

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  use_events_mini = events_mini_installed()
  play_sounds_present = play_sounds_plugin_present()
  meh_timers_present = meh_timers_plugin_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/quests.xml",
  }
  return (table.concat(t, ";"))
end



----------
-- timer
----------

-- this happens every 1 second, if meh_timers isn't installed
function check_timers()
  check_regular_quest()
  check_crystal_quest()
  check_pursuer_quest()
  check_personal_log()
end


function check_regular_quest()
  if (next_regular) then
    next_regular = next_regular - 1

    if (next_regular == 0) then
      do_notify("quest available")
      next_regular = nil
    end
  end
end


function check_crystal_quest()
  if (next_crystal) then
    next_crystal = next_crystal - 1

    if (next_crystal == 0) then
      do_notify("crystal quest available")
      next_crystal = nil
    end
  end
end


function check_pursuer_quest()
  if (next_pursuer) then
    next_pursuer = next_pursuer - 1

    if (next_pursuer == 0) then
      do_notify("pursuer quest available")
      next_pursuer = nil
    end
  end
end


function check_personal_log()
  if (next_log) then
    next_log = next_log - 1

    if (next_log == 0) then
      do_notify("personal log: can 'use log available' again")
      next_log = nil
    end
  end
end


function do_notify(txt)
  -- play the "quest" sound, if available
  make_noise()

  -- show in main window
  Note("--- " .. txt .. " ---")

  -- append to "private" notepad
  AppendToNotepad("private", "[".. os.date("%H:%M:%S") .. "] " .. txt .. "\r\n\r\n")
  NotepadSaveMethod ("private", 2)

  -- add to events world or mini
  add_to_events(txt) -- if it's open
end



-------------------
-- regular quests
-------------------

function next_quest_in(sec)
  if (meh_timers_present) then
    set_unique_countdown(0, 0, sec, "quest available", "quests plugin")
    nagged = false

  else
    if (next_regular)
    and (sec <= next_regular) then
      return
    end
    next_regular = sec

    EnableTrigger("countdown", true)

    notify_no_meh_timers()
  end
end


function show_rl_time_remaining(alymin)
  local totmin = tonumber(alymin) / 4
  local hours, f = math.modf(totmin / 60)
  local remmins = totmin - (hours * 60)
  local mins, f = math.modf(remmins)
  local secs = (remmins - mins) * 60
  Note("  (RL time: ".. hours .. "h, " .. mins .. "m, " .. secs .. "s)")
end


function quest_requested(name)
  quest_name = name
  EnableTrigger("quest_end", true)
end


function show_annwn_link()
  EnableTrigger("quest_end", false)
  local keywords = string.gsub(quest_name, " ", "+")
  Hyperlink("http://annwn.info/quest/search/?search=quest&keyword=" .. keywords, "[search quest in annwn.info]", "", buttoncol, "black", true)
  Note("")
end



---------------------------
-- capture regular quests
---------------------------

function start_quest_capture()
  EnableTrigger("capture_line", true)
  EnableTrigger("capture_end", true)
end


function capture_quest_line(line)
  AppendToNotepad("quests capture", line .. "\r\n")
end


function end_quest_capture()
  EnableTrigger("capture_line", false)
  EnableTrigger("capture_end", false)
  AppendToNotepad("quests capture", "\r\n")
  NotepadSaveMethod("quests capture", 2)
end



-------------------
-- crystal quests
-------------------

-- 2 minutes
local crystal_cooldown = 2 * 60 * 60

function crystal_started()
--  fetching_crystal = true
  got_crystal = nil

  SetVariable("latest_crystal", os.date())
  SaveState()
end


function found_crystal()
  Hyperlink("get crystal", "[get crystal]", "", buttoncol, "black", false)
end


function crystal_taken()
  got_crystal = true
end


function crystal_done()
--  fetching_crystal = nil
  got_crystal = nil

  if (meh_timers_present) then
    set_unique_countdown(0, 0, crystal_cooldown, "crystal quest available", "quests plugin")
    nagged = false

  else
    next_crystal = crystal_cooldown

    EnableTrigger("countdown", true)

    notify_no_meh_timers()
  end
end


function at_tadamirs()
  if (got_crystal) then -- returning with a crystal
    Hyperlink("give crystal tadamir", "[give crystal]", "", buttoncol, "black", false)
    Note("")

  -- instead of else, it should be:
  -- elseif (not fetching_crystal) then
  -- but! then we'd need another timer, to only show the hyperlinks if the crystal is still available

  else -- request a crystal map
    Hyperlink("give 20000 gold tadamir", "[give 20000 gold]", "", buttoncol, "black", false)
    Tell(" - ")
    Hyperlink("give 50000 gold tadamir", "[give 50000 gold]", "", buttoncol, "black", false)
    Note("")
  end

  EnableTrigger("crystal_blank", false)
end


function show_latest_crystal()
  local latest = GetVariable("latest_crystal")

  if (latest ~= nil) then
    Note("-- quests - crystl quest: latest map requested on " .. latest .. " --")

  else
    ColourNote("tomato", "black", "-- quests - crystal quest error: you need to request a map first! --")
  end
end



-------------------
-- pursuer quests
-------------------

-- 15 minutes
local pursuer_cooldown = 15 * 60 * 60


function pursuer_started(what, where)
  SetVariable("pursuer_when", os.date())
  SetVariable("pursuer_what", what)
  SetVariable("pursuer_where", where)
  SaveState()

  pursuer_done = false

  if (meh_timers_present) then
    set_unique_countdown(0, 0, pursuer_cooldown, "pursuer quest available", "quests plugin")
    nagged = false

  else
    next_pursuer = pursuer_cooldown

    EnableTrigger("countdown", true)

    notify_no_meh_timers()
  end
end


function pursuer_completed()
  if (not pursuer_done) then
    pursuer_done = true

    if (meh_timers_present) then
      set_unique_countdown(0, 0, pursuer_cooldown, "pursuer quest available", "quests plugin")
      nagged = false

    else
      next_pursuer = pursuer_cooldown

      EnableTrigger("countdown", true)

      notify_no_meh_timers()
    end
  end
end


function show_pursuer_target()
  local what = GetVariable("pursuer_what")
  if (what ~= nil) then
    local where = GetVariable("pursuer_where")
    local when = GetVariable("pursuer_when")

    Tell("-- pursuer quest - target: ")
    ColourTell("silver", "black", what)
    Tell(" (")
    ColourTell("silver", "black", where)
    Note(") - " .. when .. " --")

  else
    ColourNote("tomato", "black", "-- quests - pursuer quest error: you need to request a target first! --")
  end
end



-----------------
-- personal log
-----------------

function log_available_in()
  if (meh_timers_present) then
    set_unique_countdown(0, 0, 3600, "personal log available", "quests plugin")
    nagged = false

  else
    next_log = 3600

    EnableTrigger("countdown", true)

    notify_no_meh_timers()
  end
end



---------------------------
-- show all quests timers
---------------------------

function show_quests_timers()
  if (meh_timers_present) then
    local res = CallPlugin("a11c9d4e484b5fc428a49941", "list_timers_matching", "quest")

  else
    if (next_regular) then
      Note("* next regular quest: " .. make_hh_mm_ss(next_regular))
    end

    if (next_crystal) then
      Note("* next crystal quest: " .. make_hh_mm_ss(next_crystal))
    end

    if (next_pursuer) then
      Note("* next pursuer quest: " .. make_hh_mm_ss(next_pursuer))
    end
  end
end



------------------------------
-- interface with meh_timers
------------------------------

function set_unique_countdown(hh, mm, ss, text, owner)
  local res = CallPlugin("a11c9d4e484b5fc428a49941", "set_unique_countdown", hh, mm, ss, text, owner)
end


function meh_timers_plugin_present()
  return is_plugin_present("meh_timers", "a11c9d4e484b5fc428a49941")
end


function notify_no_meh_timers()
  -- notify that meh_timers isn't installed, once
  if (not nagged) then
    ColourNote("tomato", "black", "-- quests - warning: meh_timers not installed / enabled! --")

    nagged = true
  end
end


-----------
-- events
-----------

function add_to_events(txt)
  add_to_events_world(txt)
  add_to_events_mini(txt)
end


function add_to_events_world(txt)
  local world = GetWorld("events")

  if (world) then
    world:Note("")
    world:ColourTell("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    world:Note(txt)
    world:Note("")
  end
end


function add_to_events_mini(txt)
  function add_style_to_events_mini(fgcol, bgcol, txt)
    CallPlugin("9ced43d0a7b4a60116794096", "add_to_mini", fgcol, bgcol, txt)
  end

  -- OnPluginListChanged() should keep 'use_events_mini' updated

  if (use_events_mini) then
    add_style_to_events_mini("silver", "black", "[".. os.date("%H:%M:%S") .. "] ")
    add_style_to_events_mini("blue", "black", txt)
    add_style_to_events_mini("silver", "black", "\r\n")
  end
end


function events_mini_installed()
  return is_plugin_present("events_mini", "9ced43d0a7b4a60116794096")
end



----------
-- sound
----------

function make_noise()
  if (play_sounds_present) then
    Execute("play a sound quest.wav")
  end
end


function play_sounds_plugin_present()
  return is_plugin_present("play_sounds", "4327c10cd9ae383bef04a7fc")
end


]]>

</script>

</muclient>
