<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, October 01, 2011, 2:34 AM -->
<!-- MuClient version 4.73 -->

<!-- Plugin "capture2notepads" generated by Plugin Wizard -->

<muclient>

<plugin
   name="capture2notepads"
   author="Ruthgul"
   id="47150df0ca58b162ea22b396"
   language="Lua"
   purpose="notepads for channels"
   date_written="2012-01-31 17:56:44"
   date_modified="2016-02-11 12:25:12"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.--------------------.
 | capture2notepads |
`--------------------'

Notepad windows for channels captures.


Features:
- Each channel type goes to a separate notepad window.
- Everything is captured (no filters or channel selection).
- Notepad windows don't capture color. This is intentional, to gag annoying colors
  and make text easier to read. If you want to see colors, check your main screen.
- Text in notepad windows can be selected.
- You can either reorganize your captures in a tile pattern, or keep them
  maximized + tabbed.


** REQUIRES **

- capture2dworld (plugin id="b2772cad800b33a6073d9377") must be installed and enabled.


Syntax:

* notepad write <name> <text>  - adds the text to the notepad named <name> (where <name> must be a single word)

* list notepads  - shows a list of all open notepads

* notepad <name>  - brings the notepad to the foreground

* notepad echo  - toggles echo ON or OFF (whether what you say will be captured or not)

* notepad timestamps  - toggles timestamps ON or OFF

* color  - changes the text color, background color, font and font size of all captures to your chosen default

* color <capture_name>  - changes the text color, background color, font and font size of the specified capture to your chosen default

* to set your defaults, edit the variables: txt_color, bg_color, font, font_size - variables are around line 70 in this file


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>
  <variable name="txt_color">lightgray</variable>
  <variable name="bg_color">black</variable>

  <variable name="font">Lucida Console</variable>
  <variable name="font_size">10</variable>
</variables>



<!--  Aliases   -->

<aliases>

  <alias
   match="^notepad write (?P&lt;name&gt;[^ ]+) (?P&lt;text&gt;.+)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>write_to_notepad("%&lt;name&gt;", "%&lt;text&gt;")
</send>
  </alias>

  <alias
   match="^list[ ]+notepads$"
   enabled="y"
   group="script-captures"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>list_notepads()
</send>
  </alias>

  <alias
   match="^notepad[ ]+(?P&lt;params&gt;.+?)$"
   enabled="y"
   group="script-captures"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>parse_notepad_params("%&lt;params&gt;")
</send>
  </alias>

  <alias
   match="^color[ ]+(?P&lt;notepad&gt;.+?)$"
   enabled="y"
   group="script-captures"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_notepad_color("%&lt;notepad&gt;")
</send>
  </alias>

  <alias
   match="^color$"
   enabled="y"
   group="script-captures"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_colors()
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^capture2notepads(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"

buffer = {}


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
    Note(" to see info about this plugin --")

    load_state()

    -- give the plugins time to initialize
    wait.time(3)
    detect_plugins()
  end)
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  reader_present = reader_plugin_present()

  crlfs = "\r\n"
  if (not reader_present) then
    crlfs = crlfs .. "\r\n"
  end
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/capture2notepads.xml",
  }
  return (table.concat(t, ";"))
end



--------------
-- variables
--------------

function set_colors()
  local key, notepad
  for key, notepad in pairs (GetNotepadList()) do
    NotepadColour (notepad, GetVariable("txt_color"), GetVariable("bg_color"))
    NotepadFont (notepad, GetVariable("font"), GetVariable("font_size"), 0, 0)
  end
end


function set_notepad_color(notepad)
  -- or pick a different color scheme
  NotepadColour (notepad, GetVariable("txt_color"), GetVariable("bg_color"))

  -- or pick a different font + size
  NotepadFont (notepad, GetVariable("font"), GetVariable("font_size"), 0, 0)
end



------------------
-- show captures
------------------

function OnPluginBroadcast(msg, id, name, text)
  if (id =="b2772cad800b33a6073d9377") -- capture2dworld
  and (name == "capture2dworld")
  and (msg == 2) then
    process_message(text)

  elseif (id == "51a661f409c5d66601ff16e9") -- comm_stuff
  and (name == "comm_stuff")
  and (msg == 1) then
    process_irc_msg(text)
  end
end


function process_message(text)
  local t = utils.split(text, "Ø")

  local notepad = t[1]
  local txt = t[2]
  local who = t[3]

  if (show_echo) or (string.lower(who or "") ~= "you") then
    add_to_notepad(notepad, txt)
  end
end


function process_irc_msg(text)
  local user, extuser, msg = string.match(text, "(.+);(.+);(.+)")

--  Note("got irc msg")
--  Note("show_echo: " .. tostring(show_echo))
--  Note("user: " .. user)
--  Note("extuser: " .. extuser)
--  Note("msg: " .. msg)

  if (show_echo) or (user ~= "me") then
    add_to_notepad("irc", extuser .. ": " .. msg)
  end
end


function write_to_notepad(name, text)
  add_to_notepad(name, text)
  broadcast_txt_line(name, text, "")
end


function add_to_notepad(notepad, txt)
  if world.GetInfo(113) then
  -- world is active
    -- capture current line normally

    if (GetNotepadLength(notepad) > 524288) then
    -- notepad is (1/2)+ full
      ReplaceNotepad(notepad, "")
    end

    if (show_timestamps) then
      AppendToNotepad(notepad, "[".. os.date("%X") .. "] ")
    end

    AppendToNotepad(notepad, txt .. crlfs)

    -- make the notepad not nag "wanna save me?" when it is closed
    NotepadSaveMethod(notepad, 2)

  else
  -- world is not active, put pending changes for the notepad into a buffer
    if (show_timestamps) then
      txt = "[".. os.date("%X") .. "] " .. txt
    end

    if (not buffer[notepad]) then
      buffer[notepad] = txt
    else
      buffer[notepad] = buffer[notepad] .. crlfs .. txt
    end
  end
end


function broadcast_txt_line(type, line, who)
  -- broadcast text-only info, for capture2notepads and similar plugins
  local t = {
    [1] = type,
    [2] = line,
    [3] = who,
  }
  BroadcastPlugin(2, table.concat(t, "Ø"))
end


function OnPluginGetFocus()
  -- update all notepads with any pending changes in the buffer
  for name, contents in pairs(buffer) do
    AppendToNotepad(name, contents .. crlfs)

    -- purge the buffer
    buffer[name] = nil
  end
end



------------
-- toggles
------------

function parse_notepad_params(params)
  params = string.lower(params)

  if (params == "echo") then
    toggle_echo()

  elseif (params == "timestamps") then
    toggle_timestamps()

  else
    make_notepad_fg(params)
  end
end


function toggle_echo()
  show_echo = not show_echo

  save_state()

  if (show_echo) then
    Note("-- capture2notepads: echo ON --")
  else
    Note("-- capture2notepads: echo OFF --")
  end
end


function toggle_timestamps()
  show_timestamps = not show_timestamps

  save_state()

  if (show_timestamps) then
    Note("-- capture2notepads: timestamps ON --")
  else
    Note("-- capture2notepads: timestamps OFF --")
  end
end


function save_state()
  SetVariable("notepad_echo", tostring(show_echo))
  SetVariable("notepad_timestamps", tostring(show_timestamps))
  SaveState()
end


function load_state()
  show_echo = ((GetVariable("notepad_echo") or "true") == "true")
  show_timestamps = ((GetVariable("notepad_timestamps") or "true") == "true")
end


function make_notepad_fg(name)
  ActivateNotepad(name)
end


function list_notepads()
  local t = {}

  for key, val in pairs (GetNotepadList()) do
    t[#t + 1] = val
  end

  table.sort(t)

  local s = table.concat(t, ",")
  s = string.gsub(s, ",", ", ")

  Note(s)
end



-------------------------
-- check for MushReader
-------------------------

function reader_plugin_present()
  return is_plugin_present("MushReader", "925cdd0331023d9f0b8f05a7")
end


]]>

</script>

</muclient>
