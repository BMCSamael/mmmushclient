<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, June 11, 2011, 8:20 PM -->
<!-- MuClient version 4.72 -->

<!-- Plugin "ship_kp" generated by Plugin Wizard -->

<muclient>

<plugin
   name="ship_kp"
   author="Ruthgul"
   id="522cd3350766f852d36c5e5c"
   language="Lua"
   purpose="ship keypad"
   save_state="y"
   date_written="2011-06-11 20:15:55"
   date_modified="2014-01-04 18:12:09"
   requires="4.71"
   version="0.9"
   >

<description trim="y">

<![CDATA[

.-----------.
 | ship_kp |
`-----------'

*** REQUIRES ***

- MUSHclient _must_ have write access to its folder.
- accelerators (plugin id="f99134f19ea994a0cc0888d1") must be installed and enabled.
- Client setting: Game, Configure, Output > [x] Convert IAC EOR/GA to new line (must be checked).


Usage:

* ship_kp config  - opens a dialog to choose keystrokes to control your ship.


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Variables  -->

<variables>

  <variable name="char_name">[a-zA-Z0-9 \-\,\.\']+</variable>

</variables>



<!--  Aliases  -->

<aliases>

<!-- config -->

  <alias
   enabled="y"
   match="^ship\_kp config$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>config_kb()
</send>
  </alias>


<!-- we won't be using most of these directly, but through accelerator keys instead -->

<!-- rigging -->

  <alias
   enabled="y"
   match="^ship\_kp rig$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_rigging()
</send>
  </alias>


<!-- speed -->

  <alias
   enabled="y"
   match="^ship\_kp decel$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>decelerate()
</send>
  </alias>

  <alias
   enabled="y"
   match="^ship\_kp stop$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>stop()
</send>
  </alias>

  <alias
   enabled="y"
   match="^ship\_kp accel$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>accelerate()
</send>
  </alias>

  <alias
   enabled="y"
   match="^ship\_kp flank$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>flank()
</send>
  </alias>

  <alias
   enabled="y"
   match="^ship\_kp halt$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>halt()
</send>
  </alias>


<!-- direction -->

  <alias
   enabled="y"
   match="^ship\_kp (?P&lt;dir&gt;(north|northeast|east|southeast|south|southwest|west|northwest))$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>direction("%&lt;dir&gt;")
</send>
  </alias>


<!-- salvage -->

  <alias
   enabled="y"
   match="^ship\_kp salv$"
   regexp="y"
   send_to="10"
   sequence="100"
  >
  <send>ship salvage</send>
  </alias>


<!-- lookout -->

  <alias
   enabled="y"
   match="^ship\_kp look$"
   regexp="y"
   send_to="10"
   sequence="100"
  >
  <send>ship lookout</send>
  </alias>


<!-- scan -->

  <alias
   enabled="y"
   name="ship_kp_scan"
   match="^ship\_kp scan$"
   regexp="y"
   send_to="10"
   sequence="100"
  >
  <send>ship scan</send>
  </alias>


<!--  Plugin help  -->

  <alias
   script="OnHelp"
   match="^ship\_kp(|( |\:)help)$"
   regexp="y"
   enabled="y"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- board/disembark -->

  <trigger
   group="detect_atsea"
   keep_evaluating="y"
   match="^You board (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>boarded()
</send>
  </trigger>

  <trigger
   group="detect_atsea"
   keep_evaluating="y"
   match="^You disembark from (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>disembarked()
</send>
  </trigger>

  <trigger
   group="detect_atsea"
   keep_evaluating="y"
   match="^(.*?)(|\&lt;(.+)hp (.+)sp (.+)st)\&gt; $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>-- here on normal prompt
disembarked()
</send>
  </trigger>

  <trigger
   group="detect_atsea"
   keep_evaluating="y"
   match="^(|\[(.+)\])\([0-9]+hull (.+)dir (.+) (.+)wind(| (.+)\%shld)(| (.+)\, (.+))\) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>-- here on ship prompt
boarded()
</send>
  </trigger>


<!-- detect / suggest rigging -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^Ship rigging has been set to \'(?P&lt;rigging&gt;(COMBAT|NORMAL))\'\."
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>set_rigging("%&lt;rigging&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You raise the ship\'s anchor\."
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>suggest_rigging()
</send>
  </trigger>


<!-- detect ship speed -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   expand_variables="y"
   match="^(?P&lt;name&gt;(@!char_name)) adjusts (.+)\'s speed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>detect_speed()
</send>
  </trigger>

  <trigger
   name="ship_speed_prompt"
   keep_evaluating="y"
   match="^(|\[(.+)\])\([0-9]+hull (.+)dir (?P&lt;speed&gt;(ANCHOR|STOP|SLOW|HALF|FULL|FLANK)) (.+)wind(| [0-9]+\%shld)(| [0-9]+\, [0-9]+)\) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_ship_speed("%&lt;speed&gt;")
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "serialize"
require "wait"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  wait.make(function()
    Tell("-- " .. GetPluginInfo(GetPluginID (), 1) .. ": type ")
    ColourTell("silver", "black", GetPluginInfo(GetPluginID (), 1) .. " help")
    Note(" to see info about this plugin --")

    atsea = false
    backed_up = false

    wait.time(3)
    use_accelerators = is_accelerators_present()

    if (use_accelerators) then
      EnableTriggerGroup("detect_atsea", true)
      load_kb_config()
    else
      ColourNote("tomato", "black", "-- ship_kp: the accelerators plugin isn't installed / enabled --")
    end
  end)
end


function OnPluginDisconnect()
  if (use_accelerators) then
    atsea = false
    disable_ship_accel()
  end
end


function OnPluginDisable()
  if (use_accelerators) then
    disable_ship_accel()
  end
end


function OnPluginClose()
  if (use_accelerators) then
    disable_ship_accel()
  end
end


function OnPluginListChanged()
  detect_plugins()
end


function detect_plugins()
  use_accelerators = is_accelerators_present()
end


function is_plugin_present(name, id)
  local res = false

  local plugin_name = GetPluginInfo(id, 1)

  if (plugin_name == name) then
    -- is it enabled?
    if (GetPluginInfo(id, 17)) then
      res = true
    end
  end

  return res
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")

  if (use_accelerators) and (config) then
    show_keystrokes()
  else
    show_aliases()
  end
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/ship_kp.xml",
  }
  return (table.concat(t, ";"))
end



--------------------------------
-- load / save keyboard config
--------------------------------

default_config = {
  ["ship_kp southwest"] = "numpad1",
  ["ship_kp south"] = "numpad2",
  ["ship_kp southeast"] = "numpad3",
  ["ship_kp west"] = "numpad4",
  ["ship_kp stop"] = "numpad5",
  ["ship_kp east"] = "numpad6",
  ["ship_kp northwest"] = "numpad7",
  ["ship_kp north"] = "numpad8",
  ["ship_kp northeast"] = "numpad9",
  ["ship_kp salv"] = "numpad0",
  ["ship_kp rig"] = "decimal",
  ["ship_kp accel"] = "add",
  ["ship_kp decel"] = "subtract",
  ["ship_kp scan"] = "multiply",
  ["ship_kp look"] = "divide",
  ["ship_kp flank"] = "shift+add",
  ["ship_kp halt"] = "shift+subtract",
  ["ship target attacker"] = "f2",
  ["ship fire"] = "f3",
  ["ship fire fire-launcher"] = "f4",
  ["ship fire light-ballista"] = "f5",
  ["ship fire heavy-ballista"] = "f6",
  ["ship fire basic-cannon"] = "f7",
  ["ship fire medium-cannon"] = "f8",
  ["ship fire heavy-cannon"] = "f9",
  ["ship fire harpoon"] = "f10",
}


function load_kb_config()
  config = {}
  used_keystrokes = {}

  assert(loadstring(GetVariable("config") or ""))()

  for command, keystroke in pairs(default_config) do
    config[command] = string.lower(config[command] or keystroke)

    used_keystrokes[#used_keystrokes + 1] = config[command]
  end
end


function save_kb_config()
  SetVariable("config", "config = " .. serialize.save_simple(config))
end


function config_kb()
  if (atsea) then
    repeat
      local choices = {}

      -- build table of choices, with existing values
      for command, keystroke in pairs(config) do
        choices[command] = command .. " : " .. keystroke
      end

      -- choose one ...
      local result = utils.listbox(
          "Choose a keystroke to edit.\r\n(To see the proper names of keystrokes, check Input, Key Name...)\r\n\r\nClick Cancel when done (any changes will be retained).",
          "Keystrokes", choices)

      -- if not cancelled, try to change the keystroke
      if (result) then
        edit_keystroke(result)
      end -- if they chose something

    until not result  -- loop until dialog cancelled

    save_kb_config()
    SaveState()

  else
    ColourNote("tomato", "black", "-- ship_kp: you must be aboard a ship to config your keystrokes --")
  end
end


function edit_keystroke(command)
  local old_keystroke = string.lower(config[command])

  local response = utils.inputbox(command, "Change keystroke", old_keystroke)

  -- if cancelled dialog, just return
  if not response then
    return
  end -- cancelled

  response = string.lower(response)

  local success

  -- if keystroke changed, notify them
  if (response ~= old_keystroke) then
    if (response == "") then
      -- response is "", so we delete the old keystroke
      success = del_accelerator(old_keystroke, "yes")
      if (success) then
        table.remove(used_keystrokes, find_index(used_keystrokes, old_keystroke))

      else
        ColourNote("tomato", "black", "-- ship_kp: couldn't remove the old keystroke '" .. old_keystroke .. "' --")
      end

    else -- response is not "", so we change the old keystroke
      if (not find_index(used_keystrokes, response)) then
        -- new keystroke isn't in use

        success = add_accelerator(response, command, "yes")
        if (success) then
          used_keystrokes[#used_keystrokes + 1] = response

          -- delete old keystroke
          del_accelerator(old_keystroke, "yes")
          table.remove(used_keystrokes, find_index(used_keystrokes, old_keystroke))
        end

      else -- new keystroke already in use
        ColourNote("tomato", "black", "-- ship_kp: the keystroke '" .. response .. "' is already in use --")
      end
    end

    if (success) then -- new accelerator added / removed OK
      config[command] = response
      Note("-- ship_kp: keystroke for '" .. command .. "' changed from '" .. old_keystroke .. "' to '" .. response .. "'")

    else -- error adding the accelerator
      ColourNote("tomato", "black", "-- ship_kp: error changing the keystroke for '" .. command .. "' --")
    end
  end
end


function find_index(t, item)
  local res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end


local ship_directions = { "ship_kp northwest", "ship_kp north", "ship_kp northeast","ship_kp east", "ship_kp southeast", "ship_kp south", "ship_kp southwest", "ship_kp west" }


local ship_weapons = { "light-ballista", "heavy-ballista", "basic-cannon", "medium-cannon", "heavy-cannon" }


function show_keystrokes()
  Note("")
  ColourNote("silver", "black", "---")
  Note("")
  ColourNote("silver", "black", "Keystokes:")
  Note("")
  ColourNote("silver", "black", "* When you board a ship, the following keyboard accelerators are enabled:")
  Note("")

  for i = 1, #ship_directions do
    show_item(i, "|", "silver", config[ship_directions[i]])
  end
  ColourTell("silver", "black", " : ship direction = ")
  for i = 1, #ship_directions do
    show_item(i, "|", "silver", string.match(ship_directions[i], "ship_kp (.+)"))
  end
  Note("")
  ColourNote("silver", "black", "(... these will:")
  ColourNote("silver", "black", "  - stop the ship,")
  ColourNote("silver", "black", "  - set the chosen direction,")
  ColourNote("silver", "black", "  - restore previous speed (or start moving at slow speed if we were stopped) )")
  Note("")

  ColourNote("silver", "black", config["ship_kp stop"] .. " : STOP the ship (or drop the ANCHOR, if the ship is already stopped)")
  Note("")

  ColourNote("silver", "black", config["ship_kp accel"] .. " : increase ship speed by 1")
  ColourNote("silver", "black", config["ship_kp decel"] .. " : decrease ship speed by 1")
  Note("")

  ColourNote("silver", "black", config["ship_kp flank"] .. " : ship speed FLANK")
  ColourNote("silver", "black", config["ship_kp halt"] .. " : HALT the ship (ship direction none + ship speed slow)")
  Note("")

  ColourNote("silver", "black", config["ship_kp scan"] .. " : ship scan")
  ColourNote("silver", "black", config["ship_kp look"] .. " : ship lookout")
  Note("")

  ColourNote("silver", "black", config["ship_kp salv"] .. " : ship salvage")
  ColourNote("silver", "black", config["ship_kp rig"] .. " : ship rigging (toggles combat|normal)")
  Note("")

  ColourNote("silver", "black", config["ship target attacker"] .. " : ship target attacker")
  ColourNote("silver", "black", config["ship fire"] .. " : ship fire (auto-fires a weapon chosen according to ship weapon priority and availability)")

  ColourNote("silver", "black", config["ship fire fire-launcher"] .. " : ship fire fire-launcher")

  for i = 1, #ship_weapons do
    show_item(i, "|", "silver", config["ship fire " .. ship_weapons[i]])
  end
  ColourTell("silver", "black", " : ship fire ")
  for i = 1, #ship_weapons do
    show_item(i, "|", "silver", ship_weapons[i])
  end
  Note("")
  ColourNote("silver", "black", config["ship fire harpoon"] .. " : ship fire harpoon")

  Note("")
  Note("")
  ColourNote("silver", "black", "* When you disembark, the above accelerators are DISABLED, and your normal keystrokes are restored.")
end


function show_aliases()
  ColourNote("silver", "black", [[

* ship_kp rig  - toggles rigging on/off

* ship_kp accel  - increases the ship's speed

* ship_kp decel  - decreases the ship's speed

* ship_kp halt  - HALTs the ship (ship direction none + ship speed slow)

]])
end


function show_item(num, divider, color, item)
  if (num > 1) then
    ColourTell(color, "black", divider)
  end
  ColourTell(color, "black", item)
end



-------------------------------------------
-- interface with the accelerators plugin
-------------------------------------------

function is_accelerators_present()
  return is_plugin_present("accelerators", "f99134f19ea994a0cc0888d1")
end


function enable_ship_accel()
  if (not backed_up) then
    Note("-- ship_kp: enabling ship accelerators --")

    for command, keystroke in pairs(config) do
      backup_keystroke(keystroke)
      add_accelerator(keystroke, command, "yes")
    end

    backed_up = true
  end
end


function disable_ship_accel()
  if (backed_up) then
    Note("-- ship_kp: disabling ship accelerators --")

    for _, keystroke in pairs(config) do
      restore_keystroke(keystroke, "yes")
    end

    backed_up = false
  end
end


function backup_keystroke(keystroke)
  local res

  res = CallPlugin("f99134f19ea994a0cc0888d1", "backup_accelerator", keystroke)

  return res
end


function restore_keystroke(keystroke, override)
  local res

  res = CallPlugin("f99134f19ea994a0cc0888d1", "restore_accelerator", keystroke, override)

  return res
end


function add_accelerator(keystroke, command, override)
  local res, val

  res, val = CallPlugin("f99134f19ea994a0cc0888d1", "add_accelerator", keystroke, command, override)

  if (res ~= 0) then
    val = false
  end

  return val
end


function del_accelerator(keystroke, override)
  local res, val

  res, val = CallPlugin("f99134f19ea994a0cc0888d1", "del_accelerator", keystroke, override)

  if (res ~= 0) then
    val = false
  end

  return val
end



----------------------------
-- board / disembark stuff
----------------------------

function boarded()
  detect_speed()

  if (not atsea) then
    enable_ship_accel()
    atsea = true
  end
end


function disembarked()
  ship_kp_speed = nil

  if (atsea) then
    disable_ship_accel()
    atsea = false
  end
end



------------------
-- rigging stuff
------------------

function set_rigging(rigging)
  ship_kp_rigging = string.lower(rigging)
end


function suggest_rigging()
  -- when we raise the anchor, it pastes 'ship rigging combat' on our command window
  local res = SetCommand("ship rigging combat")
  if (res == 0) then
    SetCommandSelection(1, -1)
  end
end


function toggle_rigging()
  local rigging = ship_kp_rigging

  if (not rigging) then
    rigging = "normal"
  end

  if (rigging == "normal") then
    Send("ship rigging combat")

  else
    Send("ship rigging normal")
  end
end



-----------------------
-- capture ship speed
-----------------------

function detect_speed()
  EnableTrigger("ship_speed_prompt", true)
end


function capture_ship_speed(speed)
  local speeds = {
    ["ANCHOR"] = 0,
    ["STOP"] = 0,
    ["SLOW"] = 1,
    ["HALF"] = 2,
    ["FULL"] = 3,
    ["FLANK"] = 4,
  }

  EnableTrigger("ship_speed_prompt", false)
  ship_kp_speed = speeds[speed]
end



----------------
-- speed stuff
----------------

function accelerate()
  if (not ship_kp_speed) then
    ship_kp_speed = 1

  elseif (ship_kp_speed < 4) then
    ship_kp_speed = ship_kp_speed + 1
  end

  set_speed(ship_kp_speed)
end


function decelerate()
  if (not ship_kp_speed) then
    ship_kp_speed = 0

  elseif (ship_kp_speed > 0) then
    ship_kp_speed = ship_kp_speed - 1
  end

  set_speed(ship_kp_speed)
end


function stop()
  if (not ship_kp_speed) then
    ship_kp_speed = 0
  end

  if (ship_kp_speed == 0) then -- if it's aready stopped, we drop the anchor
    Send("ship anchor")

  else
    set_speed(0)
  end
end


function flank()
  set_speed(4)
end


function halt()
  set_speed(0)
  Send("ship direction none")
  set_speed(1)
end


function set_speed(num)
  local speeds = {
    [0] = "stop",
    [1] = "slow",
    [2] = "half",
    [3] = "full",
    [4] = "flank",
  }

  Send("ship speed " .. speeds[num])
end



--------------------
-- direction stuff
--------------------

function direction(dir)
  if (ship_kp_speed == nil) then
    ship_kp_speed = 0
  end

  local old_speed = ship_kp_speed
  if (old_speed == 0) then
    old_speed = 1
  end

  set_speed(0)
  Send("ship direction " .. dir)
  set_speed(old_speed)
end


]]>

</script>

</muclient>
