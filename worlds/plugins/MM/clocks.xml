<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, May 17, 2012, 9:25 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "clocks" generated by Plugin Wizard -->

<muclient>

<plugin
   name="clocks"
   author="Ruthgul"
   id="fdebcc7a082dc4e7c6d4c306"
   language="Lua"
   purpose="shows Alyrian/system/local time in a miniwindow"
   save_state="y"
   date_written="2012-05-17 09:23:48"
   date_modified="2014-07-23 22:07:12"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.----------.
 | clocks |
`----------'

Please look at a clock, or check time with a clock in your inv, to initialize the current Alyrian time.


** REQUIRES **

- The file generic_miniwindow.lua must be placed in the MUSHclient/lua directory.
- MUSHclient must have write access to its folder.


Syntax:

* clocks mini [on|off]  - shows/hides the clocks miniwindow

* reset clocks  - restores the default size


Author: Ruthgul
Miniwindow code adapted from Fiendish's / Enelya's chat capture plugins

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

  <alias
   match="^clocks mini(| (?P&lt;state&gt;on|off))$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>toggle_clocks("%&lt;state&gt;")
</send>
  </alias>

  <alias
    enabled="y"
    regexp="y"
    match="^reset clocks$"
    script="restore_defaults"
  >
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^clocks(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- init clocks -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>init_clocks()
</send>
  </trigger>


<!-- system time -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^The current system time is\: [A-Za-z ]+ [0-9]+ (?P&lt;hh&gt;[0-9]+)\:(?P&lt;mm&gt;[0-9]+)\:(?P&lt;ss&gt;[0-9]+) [0-9]+\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_system_time("%&lt;hh&gt;", "%&lt;mm&gt;", "%&lt;ss&gt;")
</send>
  </trigger>


<!-- alyrian time -->

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^It is (?P&lt;hh&gt;[0-9]+)\:(?P&lt;mm&gt;[0-9]+) (?P&lt;ampm&gt;(am|pm)) on (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("%&lt;hh&gt;", "%&lt;mm&gt;", "%&lt;ampm&gt;")
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^The land becomes alive as the sun breaks free of the horizon\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("5", "00", "am", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^The sun rises in the east\, sending molten light across the land\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("6", "00", "am", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^The sun has reached its zenith directly overhead\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("12", "00", "pm", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^Light begins to dim as the sun sets in the west\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("6", "00", "pm", true)
</send>
  </trigger>

  <trigger
   enabled="y"
   group="testtime"
   keep_evaluating="y"
   match="^The last glimmer of sunlight fades\, and the land is dark\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>capture_alyrian_time("7", "00", "pm", true)
</send>
  </trigger>

</triggers>



<!--  Timers  -->

<timers>

  <timer
   name="seconds"
   enabled="y"
   second="1.00"
   offset_second="0.00"
   send_to="12"
   active_closed="y"
  >
  <send>update_times()
</send>
  </timer>

</timers>



<!--  Scripts  -->

<script>

<![CDATA[

require "generic_miniwindow"


-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID(), 1) .. " help")
  Note(" to see info about this plugin --")

  EnableTrigger("first_prompt", true)
end


function OnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo(GetPluginID(), 14)) .. ")")
end


function OnPluginConnect()
  EnableTrigger("first_prompt", true)
end


function OnPluginEnable()
  if (show_mini) then
    mini_show()
  end
end


function OnPluginClose()
  if (show_mini) then
    if GetPluginInfo(GetPluginID(), 17) then -- plugin is enabled
      mini_hide()
    end
  end
end


function OnPluginDisable()
  if (show_mini) then
    mini_hide()
  end
end


function OnPluginSaveState()
  if (show_mini) then
    SetVariable("enabled", tostring(GetPluginInfo(GetPluginID(), 17)))
    save_status()
  end
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/clocks.xml",
  }
  return (table.concat(t, ";"))
end


function plugin_update_aux_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/generic_miniwindow.lua,MUSH/lua",
  }
  return (table.concat(t, ";"))
end



-----------------
-- capture time
-----------------

function init_clocks()
  EnableTrigger("first_prompt", false)
  Note("-- clocks: sending 'time' to capture the current system time --")
  Note("(please look at a clock, or check time with a clock in your inv, to initialize the current Alyrian time)")

  show_mini = ((GetVariable("show_mini") or "true") == "true")

  Send("time")
end


function capture_system_time(hh, mm, ss)
  sys_time_hh = tonumber(hh)
  sys_time_mm = tonumber(mm)
  sys_time_ss = tonumber(ss)

  clocks_start()
end


function capture_alyrian_time(hh, mm, ampm, reset)
  if (reset) then
    EnableTimer("seconds", false)
    ResetTimer("seconds")
    EnableTimer("seconds", true)
  end

  aly_time_hh = tonumber(hh)

  -- converting to 24-hour clock
  if (ampm == "pm") and (aly_time_hh ~= 12) then -- 12 pm = midday, so we don't fix it
    aly_time_hh = aly_time_hh + 12
  end
  if (ampm == "am") and (aly_time_hh == 12) then -- 12 am = midnight
    aly_time_hh = 0
  end

  aly_time_mm = tonumber(mm)
  aly_time_ss = 0
end



----------------
-- update time
----------------

function fix_time(hh, mm, ss)
  local i, f
  if (ss > 59) then
    i, f = math.modf(ss / 60)
    mm = mm + i
    ss = math.fmod(ss, 60)
  end

  if (mm > 59) then
    i, f = math.modf(mm / 60)
    hh = hh + i
    mm = math.fmod(mm, 60)
  end

  if (hh > 23) then
    hh = math.fmod(hh, 24)
  end

  return hh, mm, ss
end


function update_times()
  if (sys_time_ss ~= nil) then
    sys_time_ss = sys_time_ss + 1
    sys_time_hh, sys_time_mm, sys_time_ss = fix_time(sys_time_hh, sys_time_mm, sys_time_ss)
  end

  if (aly_time_ss ~= nil) then
    aly_time_ss = aly_time_ss + 4
    aly_time_hh, aly_time_mm, aly_time_ss = fix_time(aly_time_hh, aly_time_mm, aly_time_ss)
  end

  clocks_redraw()
end



------------
-- toggles
------------

function toggle_clocks(state)
  if (state == "") then
    show_mini = not show_mini

  elseif (state == "on") then
    show_mini = true

  elseif (state == "off") then
    show_mini = false
  end

  if (show_mini) then
    SetVariable("show_mini", "true")
    mini_show()

  else
    SetVariable("show_mini", "false")
    mini_hide()
  end
end



---------------------
-- miniwindow stuff
---------------------

function clocks_start()
  do_install_miniwindow("clocks", show_mini, false)
end


function clocks_redraw()
  if (show_mini) then
    clear_mini()
    do_show_clocks()
  end
end


function do_show_clocks()
  local txt = ""

  -- Alyrian time
  txt = "alyria: "
  if (aly_time_ss) then
    txt = txt .. string.format("%02i", aly_time_hh) .. ":" .. string.format("%02i", aly_time_mm) .. ":" .. string.format("%02i", aly_time_ss)
  else
    txt = txt .. "??:??:??"
  end

  add_to_mini("silver", "black", txt)
  add_to_mini("silver", "black", "\r\n")


  -- System time
  txt = "system: "
  if (sys_time_ss) then
    txt = txt .. string.format("%02i", sys_time_hh) .. ":" .. string.format("%02i", sys_time_mm) .. ":" .. string.format("%02i", sys_time_ss)
  else
    txt = txt .. "??:??:??"
  end

  add_to_mini("silver", "black", txt)
  add_to_mini("silver", "black", "\r\n")


  -- Local time
  txt = "local:  " .. os.date("%H:%M:%S")

  add_to_mini("silver", "black", txt)
  add_to_mini("silver", "black", "\r\n")
end


function add_to_mini(fgcol, bgcol, txt)
  if (show_mini) then
    if (not styles) then
      styles = {}
    end

    if (txt == "\r\n") then
      log_to_mini("", "", "", styles)
      styles = {}

    else
      styles[#styles + 1] = {
        text = txt,
        textcolour = ColourNameToRGB(fgcol),
        backcolour = ColourNameToRGB(bgcol),
        length = string.len(txt),
        style = 0,
      }
    end
  end
end


]]>

</script>

</muclient>
