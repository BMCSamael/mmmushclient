<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, April 28, 2012, 11:05 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "missing_affects" generated by Plugin Wizard -->

<muclient>

<plugin
   name="missing_affects"
   author="Ruthgul"
   id="226fb67b0722e0f0ddc3a235"
   language="Lua"
   purpose="shows what affects you're missing"
   date_written="2012-04-28 11:03:49"
   date_modified="2014-04-11 09:08:36"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

.-------------------.
 | missing_affects |
`-------------------'

Shows what affects you're missing, based on a 'wanted' list.

It also tries to detect similar affects (eg, if you want shield, and have force field, it doesn't list shield as missing.)


** REQUIRES **

- MM_GMCP_Handler (plugin id="f67c4339ed0591a5b010d05b") must be installed and enabled.
- detect_globals (plugin id="d900cb999816b1f6f2d4bdc5") must be installed and enabled.
- global_vars (plugin id="97784abf5f30629a0d7e7307") must be installed and enabled.


Syntax:

* affects add <affect>  - adds an affect to the 'wanted' list
* affects del <affect>  - removes an affect from the 'wanted' list

* affects list wanted  - shows your full list of wanted affects


Author: Ruthgul

Latest version:
http://github.com/MateriaMagicaLLC/mm-mushclient-scripts

]]>

</description>

</plugin>



<!--  Aliases  -->

<aliases>

<!-- affects -->

  <alias
   enabled="y"
   match="^affects[ ]+add[ ]+(?P&lt;affect&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  add_wanted_affect("%&lt;affect&gt;")
else
  plugin_not_initialized()
end
</send>
  </alias>

  <alias
   enabled="y"
   match="^affects[ ]+del[ ]+(?P&lt;affect&gt;.+)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  del_wanted_affect("%&lt;affect&gt;")
else
  plugin_not_initialized()
end
</send>
  </alias>

  <alias
   enabled="y"
   match="^affects[ ]+list[ ]+wanted$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if (name) then
  list_wanted_affects()
else
  plugin_not_initialized()
end
</send>
  </alias>


<!--  Plugin help  -->

  <alias
   enabled="y"
   match="^missing\_affects(|( |\:)help)$"
   regexp="y"
   script="OnHelp"
  >
  </alias>

</aliases>



<!--  Triggers  -->

<triggers>

<!-- on first prompt -->

  <trigger
   enabled="y"
   name="first_prompt"
   keep_evaluating="y"
   match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)|\&gt;) $"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>on_first_prompt()
</send>
  </trigger>


<!-- affects -->

  <trigger
   group="process-affects"
   keep_evaluating="y"
   match="^You are affected by the following\:$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>affects_start()
</send>
  </trigger>

  <trigger
   group="process-affects"
   keep_evaluating="y"
   match="^(Spell|Prof)\:[ ]+(?P&lt;affect&gt;.+)[ ]+\- Level (.+)\, modifies (.+)[ ]+by[ ]+(.+)(| for (.+) minute(|s))\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>affect_line("%&lt;affect&gt;")
</send>
  </trigger>

  <trigger
   group="process-affects"
   keep_evaluating="y"
   match="^Total of (.+) magical (|and (.+) non\-magical )affect(|s)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>affects_end()
</send>
  </trigger>

</triggers>



<!--  Scripts  -->

<script>

<![CDATA[

require "wait"


-----------
-- plugin
-----------

function OnPluginInstall()
  Tell("-- " .. GetPluginInfo(GetPluginID (), 1) .. ": type ")
  ColourTell("silver", "black", GetPluginInfo(GetPluginID (), 1) .. " help")
  Note(" to see info about this plugin --")

  EnableTrigger("first_prompt", true)
  name = nil
end


function OnPluginConnect()
  EnableTrigger("first_prompt", true)
  name = nil
end


function OnPluginDisconnect()
  EnableTriggerGroup("process-affects", false)
end


function plugin_not_initialized()
  Note("-- " .. GetPluginInfo(GetPluginID (), 1) .. ": plugin initialization unfinished --")
  Note("please wait 5 seconds and try again")
end


function OnHelp ()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))
  Note("")
  ColourNote("silver", "black", "(this version: " .. os.date("%c", GetPluginInfo (GetPluginID(), 14)) .. ")")
end


function plugin_update_url()
  local t = {
    "https://raw.githubusercontent.com/MateriaMagicaLLC/mm-mushclient-scripts/master/src/missing_affects.xml",
  }
  return (table.concat(t, ";"))
end



------------
-- general
------------

function get_global_var(name)
  local res, val

  res, val = CallPlugin("97784abf5f30629a0d7e7307", "get_global_var", name)

  if (res ~= 0) then
    val = nil
  end

  return val
end



---------
-- name
---------

function on_first_prompt()
  wait.make(function()
    EnableTrigger("first_prompt", false)

    -- give the plugins time to initialize
    wait.time(3)

    do_get_name()
  end)
end


function OnPluginBroadcast(msg, id, pname, text)
  if (id =="97784abf5f30629a0d7e7307")
  and (pname == "global_vars") then -- global_vars
    if (msg == 1) and (text == "name") then
      -- name broadcasted
      do_get_name()
    end
  end
end


function do_get_name()
  name = get_global_var("name")

  if (name) then
    got_name()
  end
end


function got_name()
  EnableTriggerGroup("process-affects", true)
end



------------
-- affects
------------

function find_index(t, item)
  local res = nil

  for i = 1, #t do
    if (t[i] == item) then
      res = i
      break
    end
  end

  return res
end


function add_affect(twaffects, affect)
  local i = find_index(twaffects, affect)

  if (not i) then
    table.insert(twaffects, affect)
    table.sort(twaffects)
  end

  return twaffects
end


function del_affect(twaffects, affect)
  if (twaffects) then
    local i = find_index(twaffects, affect)

    if (i) then
      table.remove(twaffects, i)
    end
  end

  return twaffects
end


function add_wanted_affect(affect)
  affect = Trim(affect) -- remove leading and trailing blanks
  affect = string.sub(affect, 1, 20) -- names get cut to 20 chars in the affects list
  affect = string.lower(affect) -- lowercase

  local waffects = GetVariable(name .. "_wanted_affects") or ""

  local twaffects
  if (waffects == "") then
    twaffects = {}
  else
    twaffects = utils.split(waffects, ",")
  end

  twaffects = add_affect(twaffects, affect)

  waffects = table.concat(twaffects, ",")

  SetVariable(name .. "_wanted_affects", waffects)
  SaveState()
  Tell("-- missing_affects: current list of wanted affects is '")
  waffects = string.gsub(waffects, ",", ", ")
  ColourTell("silver", "black", waffects)
  Note("' --")
end


function del_wanted_affect(affect)
  local waffects = GetVariable(name .. "_wanted_affects") or ""

  if (waffects ~= "") then
    affect = Trim(affect) -- remove leading and trailing blanks
    affect = string.sub(affect, 1, 20) -- names get cut to 20 chars in the affects list
    affect = string.lower(affect) -- lowercase

    local twaffects = utils.split(waffects, ",")

    twaffects = del_affect(twaffects, affect)

    waffects = table.concat(twaffects, ",")

    SetVariable(name .. "_wanted_affects", waffects)
    SaveState()

    Tell("-- missing_affects: current list of wanted affects is '")
    waffects = string.gsub(waffects, ",", ", ")
    ColourTell("silver", "black", waffects)
    Note("' --")
  end
end


function list_wanted_affects()
  Note("wanted affects: " .. (GetVariable(name .. "_wanted_affects") or "-"))
end


function affects_start()
  if (name) then
    local missing_affects = GetVariable(name .. "_wanted_affects") or ""

    if (missing_affects == "") then
      t_missing_affects = {}
    else
      t_missing_affects = utils.split(missing_affects, ",")
    end

  else
    plugin_not_initialized()
  end
end


similar_affects = {
  [1] = { "armor", "aegis", "guise of nature" },
  [2] = { "detect invisibility", "radiance invocation" },
  [3] = { "enhanced strength", "minerals invocation", "unnatural strength" },
  [4] = { "fireshield", "frostborne", "magma invocation" },
  [5] = { "haste", "lightning invocation", "whirlwind" },
  [6] = { "levitation", "air invocation", "float" },
  [7] = { "pass door" , "steam invocation", "wind walk" },
  [8] = { "sanctuary", "fire invocation" },
  [9] = { "sense life", "infravision", "pense" },
  [10] = { "shield", "ice invocation", "force field" },
  [11] = { "stone skin", "ooze invocation", "statuary skin" },
  [12] = { "underwater breathing", "otolithic growth" },
}


function affect_line(affect)
  affect = Trim(affect) -- remove leading and trailing blanks
  affect = string.lower(affect) -- lowercase

  t_missing_affects = del_affect(t_missing_affects, affect)

  local taux

  for i = 1, #similar_affects do
    taux = similar_affects[i]

    if (find_index(taux, affect)) then
      for j = 1, #taux do
        if (taux[j] ~= affect) then
          t_missing_affects = del_affect(t_missing_affects, taux[j])
        end
      end

      break
    end
  end
end


function affects_end()
  if (t_missing_affects) then
    local missing_affects = table.concat(t_missing_affects, ",")

    if (missing_affects ~= "") then
      Tell("You are missing: ")
      missing_affects = string.gsub(missing_affects, ",", ", ")
      ColourNote("silver", "black", missing_affects)
    end
  end
end


]]>

</script>

</muclient>
